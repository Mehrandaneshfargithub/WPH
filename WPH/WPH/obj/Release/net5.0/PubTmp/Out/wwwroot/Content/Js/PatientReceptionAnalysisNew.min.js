function OnRadiologyDoctorSelect(n) { var t = this.dataItem(n.item.index()); $("#RadiologyDoctor").val(t.User.Name); $("#RadiologyDoctorId").val(t.Guid); setTimeout(function () { $("#RadiologyDoctor").val(t.User.Name) }, 20) } function SetReceptionSelectedAnalysis(n) { if (console.log(n), selectedAnalysis = n, selectedAnalysis !== null) for (let n = 0; n < selectedAnalysis.length; n++){ let t, i, r; selectedAnalysis[n].AnalysisItemId !== null && selectedAnalysis[n].AnalysisItemId !== undefined ? (t = selectedAnalysis[n].AnalysisItemId, selectedAnalysis[n].AnalysisTypeName = "Analysis Item", i = selectedAnalysis[n].AnalysisItem.Name, r = selectedAnalysis[n].AnalysisItem.Code === null ? "" : selectedAnalysis[n].AnalysisItem.Code) : selectedAnalysis[n].GroupAnalysisId !== null && selectedAnalysis[n].GroupAnalysisId !== undefined ? (t = selectedAnalysis[n].GroupAnalysisId, selectedAnalysis[n].AnalysisTypeName = "Group Analysis", i = selectedAnalysis[n].GroupAnalysi.Name, r = selectedAnalysis[n].GroupAnalysi.Code === null ? "" : selectedAnalysis[n].GroupAnalysi.Code) : selectedAnalysis[n].AnalysisId !== null && selectedAnalysis[n].AnalysisId !== undefined && (t = selectedAnalysis[n].AnalysisId, selectedAnalysis[n].AnalysisTypeName = "Analysis", i = selectedAnalysis[n].Analysis.Name, r = selectedAnalysis[n].Analysis.Code === null ? "" : selectedAnalysis[n].Analysis.Code); selectedAnalysis[n].Discount === null && (selectedAnalysis[n].Discount = 0); let u = parseFloat(selectedAnalysis[n].Amount) - parseFloat(selectedAnalysis[n].Discount); selectedItems.push({ Guid: t, Type: selectedAnalysis[n].AnalysisTypeName, Name: i, Code: r, Price: selectedAnalysis[n].Amount, Discount: selectedAnalysis[n].Discount, Total: u }) } let t = $("#SelectedGrid").data("kendoGrid"); t.setDataSource(selectedItems); changeDiscountAmount() } function SetReceptionAmounts(n) { if (n.HospitalReception) { disableComponents(); $("#ReceptionClinicSectionDescriptionParent").removeClass("hidden"); let n = $("#Reception-Id").text(); hospitalReception = !0; $.ajax({ type: "Post", data: { DestinationReceptionId: n }, url: "/Reception/GetReceptionClinicSectionByDestinationReceptionId", success: function (n) { $("#ReceptionClinicSectionDescription").val(n.Description) } }) } $("#Guid").val(n.Guid); $("#CreatedUserId").val(n.CreatedUserId); $("#PatientId").val(n.PatientId); $("#AddressId").val(n.AddressId); $("#DateOfBirthDay").val(n.DateOfBirthDay); $("#DateOfBirthMonth").val(n.DateOfBirthMonth); $("#DateOfBirthYear").val(n.DateOfBirthYear); $("#ReceptionNum").val(n.ReceptionNum); $("#ReceptionNumlbl").text(n.ReceptionNum); $("#Name2").val(n.Patient.User.Name); $("#PhoneNumber").val(n.Patient.User.PhoneNumber); let i = $("#GenderId").data("kendoDropDownList"); i.value(n.Patient.GenderId); $("#DateOfBirth").val(n.Patient.DateOfBirth); setTimeout(function () { let n = $("#DateOfBirth").data("kendoDatePicker"), t = $("#DateOfBirth").attr("aria-owns"); n.open(); n.close(); let i = $("#" + t + " .k-state-focused a").click() }); TotalReceived = n.TotalReceived; (TotalReceived === "" || TotalReceived === null) && (TotalReceived = 0); typeof TotalReceived == "string" && (TotalReceived = parseFloat(TotalReceived)); $("#TotalReceived").val(TotalReceived); let r = $("#ClinicSectionId").data("kendoDropDownList"); r.value(n.ClinicSectionId); $("#Explanation").val(n.Description); var t = n.PatientReceptionReceiveds; if (t !== null) for (let n = 0; n < t.length; n++)ReceivedAmount.push({ Guid: t[n].Guid, Amount: t[n].Amount, AmountCurrencyId: t[n].AmountCurrencyId, CurrencyType: t[n].AmountCurrencyName, New: !1, Date: t[n].ViewDate, Index: n + 1, CanDelete: t[n].CanDelete }); let u = $("#PatientReceptionReceivedDetailGrid").data("kendoGrid"); u.setDataSource(ReceivedAmount); let f = $("#Discount").data("kendoNumericTextBox"); f.value(n.Discount); let e = $("#DiscountAmount").data("kendoNumericTextBox"); e.value(n.Discount); $("#TotalReceived").val(n.TotalReceived); $("#TotalReceivedDollar").val(n.TotalReceived); changeDiscountAmount() } function disableComponents() { nameAuto.enable(!1); $("#Year").data("kendoTextBox").enable(!1); $("#Month").data("kendoTextBox").enable(!1); let n = $("#PhoneNumber").data("kendoAutoComplete"); n.enable(!1); let t = $("#GenderId").data("kendoDropDownList"); t.enable(!1); SpeciallityDropDown.enable(!1); doctorAuto.enable(!1); radiologyDoctorAuto.enable(!1); let i = $("#DateOfBirth").data("kendoDatePicker"); i.enable(!1) } function SetPatientAmounts(n) { $("#PatientId").val(n.Guid); $("#AddressId").val(n.AddressId); $("#DateOfBirthDay").val(n.DateOfBirthDay); $("#DateOfBirthMonth").val(n.DateOfBirthMonth); $("#DateOfBirthYear").val(n.DateOfBirthYear); $("#Name2").val(n.Name); $("#PhoneNumber").val(n.PhoneNumber); let t = $("#GenderId").data("kendoDropDownList"); t.value(n.GenderId); $("#DateOfBirth").val(n.DateOfBirth); setTimeout(function () { let n = $("#DateOfBirth").data("kendoDatePicker"), t = $("#DateOfBirth").attr("aria-owns"); n.open(); n.close(); let i = $("#" + t + " .k-state-focused a").click() }); disableComponents() } function SetDoctorAmounts(n) { $("#DoctorId").val(n.Guid); $("#Doctor").val(n.UserName); try { SpeciallityDropDown.value(Reception.Doctor.SpecialityId) } catch (t) { } } function getTranslatedWords() { TotalTranslated = $("#Translated").attr("data-TotalTranslated"); DiscountTranslated = $("#Translated").attr("data-DiscountTranslated"); PriceTranslated = $("#Translated").attr("data-PriceTranslated"); CodeTranslated = $("#Translated").attr("data-CodeTranslated"); TypeTranslated = $("#Translated").attr("data-TypeTranslated"); NameTranslated = $("#Translated").attr("data-NameTranslated"); AmountTranslated = $("#Translated").attr("data-AmountTranslated"); DateTranslated = $("#Translated").attr("data-DateTranslated") } function CreateTelerikComponents() { $("#ReceptionNumber").kendoTextBox({}); nameAuto = $("#Name2").kendoAutoComplete({ dataTextField: "PhoneNumberAndName", filter: "contains", highlightFirst: !0, clearButton: !1, select: OnPatientSelectInReception, dataSource: { serverFiltering: !1, transport: { read: { url: "/PatientReceptionAnalysis/GetPatient" } } } }).data("kendoAutoComplete"); $("#PhoneNumber").kendoAutoComplete({ dataTextField: "PhoneNumberAndName", filter: "contains", highlightFirst: !0, clearButton: !1, dataSource: { serverFiltering: !1, transport: { read: { url: "/PatientReceptionAnalysis/GetPatient" } } } }); $("#GenderId").kendoDropDownList({ dataTextField: "Name", dataValueField: "Id", dataSource: { serverFiltering: !1, transport: { read: { url: "/BaseInfo/GetAllGenders" } } } }); $("#DateOfBirth").kendoDatePicker({ format: "dd/MM/yyyy", max: new Date, animation: !1, change: changeBirthOfDatePatientDatetimePicker }); $("#Year").kendoTextBox({}); $("#Month").kendoTextBox({}); radiologyDoctorAuto = $("#RadiologyDoctor").kendoAutoComplete({ dataTextField: "NameAndSpeciallity", filter: "contains", highlightFirst: !0, clearButton: !1, select: OnRadiologyDoctorSelect, dataSource: { serverFiltering: !1, transport: { read: "/PatientReceptionAnalysis/GetDoctor" } } }).data("kendoAutoComplete"); doctorAuto = $("#Doctor").kendoAutoComplete({ dataTextField: "NameAndSpeciallity", filter: "contains", highlightFirst: !0, clearButton: !1, select: OnDoctorSelect, dataSource: { serverFiltering: !1, transport: { read: "/PatientReceptionAnalysis/GetDoctor" } } }).data("kendoAutoComplete"); SpeciallityDropDown = $("#Speciality").kendoDropDownList({ dataTextField: "Name", dataValueField: "Guid", dataSource: { serverFiltering: !0, transport: { read: { url: "/BaseInfo/GetAllDoctorSpecialities" } } } }).data("kendoDropDownList"); $("#ClinicSectionId").kendoDropDownList({ dataTextField: "Name", dataValueField: "Guid", select: selectClinicSection, dataBound: function () { setTimeout(() => { let n = $("#ClinicSectionId").val(); selectClinicSectionFirstTime(n) }, 20) }, dataSource: { serverFiltering: !0, transport: { read: { url: "/ClinicSection/GetAllLabAndXRayClinicSectionsForUser" } } } }); $("#MoneyConvertAmount").kendoNumericTextBox({ format: "# IQD" }); $("#Explanation").kendoTextArea({ rows: 2, maxLength: 200, placeholder: $("#Translated").attr("data-ExplanationTranslated") }); $("#ReceptionClinicSectionDescription").kendoTextArea({ rows: 2, maxLength: 200, enable: !1 }); $("#buttonTabstrip").kendoTabStrip({ animation: { open: { effects: "fadeIn" } } }); $("#tabstrip").kendoTabStrip({ animation: { open: { effects: "fadeIn" } } }); $("#totalAmount").kendoTextBox({ readonly: !0 }); $("#totalAmountDollar").kendoTextBox({ readonly: !0 }); $("#DiscountAmount").kendoNumericTextBox({ format: "N0", min: 0 }); $("#Discount").kendoNumericTextBox({ format: "##.00 %", min: 0, max: 100 }); $("#totalAmountWithDiscount").kendoTextBox({ readonly: !0 }); $("#totalAmountWithDiscountDollar").kendoTextBox({ readonly: !0 }); $("#RemainedAmount").kendoTextBox({ readonly: !0 }); $("#RemainedAmountDollar").kendoTextBox({ readonly: !0 }); $("#PatientReceptionReceivedAmount").kendoNumericTextBox({ format: "N0", min: 0 }); $("#PatientReceptionReceivedAmountDollar").kendoNumericTextBox({ format: "C2", min: 0 }); $("#TotalReceived").kendoTextBox({ readonly: !0 }); $("#TotalReceivedDollar").kendoTextBox({ readonly: !0 }); $("#btn-address-accept").kendoButton(); $("#btn-address-close").kendoButton(); $("#btn-moneyConvert-accept").kendoButton(); $("#btn-allMoneyConvert-accept").kendoButton(); $("#btn-allMoneyConvert-close").kendoButton(); $("#btn-PatientReceptionReceived-accept").kendoButton(); $("#btn-PatientReceptionReceived-close").kendoButton(); $("#btn-PatientReceptionReceivedDetailed-close").kendoButton(); $("#btn-ChosseAnalysis-accept").kendoButton(); $("#tabstripChooseAnalysis").kendoTabStrip({ animation: { open: { effects: "fadeIn" } } }) } function analysisAjax(n) { return $("#analysisButton").html('<div style="margin-right: auto; display: inline-block; position: absolute;left:50%;top:30%"><img src = "../Content/kendo/css/Default/loading_2x.gif" /><\/div>'), $("#analysisList").html('<div style="margin-right: auto; display: inline-block; position: absolute;left:50%;top:30%"><img src = "../Content/kendo/css/Default/loading_2x.gif" /><\/div>'), $.ajax({ type: "Post", data: { ClinicSectionId: n }, url: "/Analysis/GetAllAnalysesByClinicSectionId", success: function (n) { Analysis = n; for (let n = 0; n < Analysis.length; n++)Analysis[n].Type = "Analysis", Analysis[n].Code === null && (Analysis[n].Code = ""), Analysis[n].Amount === null && (Analysis[n].Amount = 0), Analysis[n].Discount === null && (Analysis[n].Discount = 0), Analysis[n].disabled = !1, AllItems.push(Analysis[n]); createAnalysisGrid(); let i = $("#AnalysisNameAutoComplete").data("kendoAutoComplete"); i.setDataSource(Analysis); let t = []; t = Analysis.filter(function (n) { return n.Code !== "" }); let r = $("#AnalysisCodeAutoComplete").data("kendoAutoComplete"); r.setDataSource(t) } }) } function analysisItemAjax(n) { return $("#analysisItemButton").html('<div style="margin-right: auto; display: inline-block; position: absolute;left:50%;top:30%"><img src = "../Content/kendo/css/Default/loading_2x.gif" /><\/div>'), $("#analysisItemList").html('<div style="margin-right: auto; display: inline-block; position: absolute;left:50%;top:30%"><img src = "../Content/kendo/css/Default/loading_2x.gif" /><\/div>'), $.ajax({ type: "Post", data: { ClinicSectionId: n }, url: "/AnalysisItem/GetAllAnalysisItemByClinicSectionId", success: function (n) { AnalysisItems = n; for (let n = 0; n < AnalysisItems.length; n++)AnalysisItems[n].Type = "Analysis Item", AnalysisItems[n].Code === null && (AnalysisItems[n].Code = ""), AnalysisItems[n].Amount === null && (AnalysisItems[n].Amount = 0), (AnalysisItems[n].Discount === null || AnalysisItems[n].Discount === undefined) && (AnalysisItems[n].Discount = 0), AnalysisItems[n].disabled = !1, AllItems.push(AnalysisItems[n]); createAnalysisListItemsGrid(); let i = $("#AnalysisItemNameAutoComplete").data("kendoAutoComplete"); i.setDataSource(AnalysisItems); let t = []; t = AnalysisItems.filter(function (n) { return n.Code !== "" }); console.log(t); let r = $("#AnalysisItemCodeAutoComplete").data("kendoAutoComplete"); r.setDataSource(t) } }) } function groupAjax(n) { return $("#groupAnalysisButton").html('<div style="margin-right: auto; display: inline-block; position: absolute;left:50%;top:30%"><img src = "../Content/kendo/css/Default/loading_2x.gif" /><\/div>'), $("#groupAnalysisList").html('<div style="margin-right: auto; display: inline-block; position: absolute;left:50%;top:30%"><img src = "../Content/kendo/css/Default/loading_2x.gif" /><\/div>'), $.ajax({ type: "Post", data: { ClinicSectionId: n }, url: "/GroupAnalysis/GetAllGroupAnalysisByClinicSectionId", success: function (n) { groupAnalysis = n; for (let n = 0; n < groupAnalysis.length; n++)groupAnalysis[n].Type = "Group Analysis", groupAnalysis[n].Code === null && (groupAnalysis[n].Code = ""), groupAnalysis[n].Amount === null && (groupAnalysis[n].Amount = 0), groupAnalysis[n].Discount === null && (groupAnalysis[n].Discount = 0), groupAnalysis[n].disabled = !1, AllItems.push(groupAnalysis[n]); createGroupAnalysisGrid(); let i = $("#GroupAnalysisNameAutoComplete").data("kendoAutoComplete"); i.setDataSource(groupAnalysis); let t = []; t = groupAnalysis.filter(function (n) { return n.Code !== "" }); let r = $("#GroupAnalysisCodeAutoComplete").data("kendoAutoComplete"); r.setDataSource(t) } }) } function selectClinicSection(n) { let t = n.dataItem.Guid; $("#analysisList").empty(); $("#analysisItemList").empty(); $("#groupAnalysisList").empty(); AllItems = []; $.when(analysisAjax(t), analysisItemAjax(t), groupAjax(t)).done(function () { let t = $("#AllNameAutoComplete").data("kendoAutoComplete"); t.setDataSource(AllItems); let n = []; n = AllItems.filter(function (n) { return n.Code !== "" }); let i = $("#AllCodeAutoComplete").data("kendoAutoComplete"); i.setDataSource(n); createButtons() }) } function selectClinicSectionFirstTime(n) { $("#analysisList").empty(); $("#analysisItemList").empty(); $("#groupAnalysisList").empty(); AllItems = []; $.when(analysisAjax(n), analysisItemAjax(n), groupAjax(n)).done(function () { let t = $("#AllNameAutoComplete").data("kendoAutoComplete"); t.setDataSource(AllItems); let n = []; n = AllItems.filter(function (n) { return n.Code !== "" }); let i = $("#AllCodeAutoComplete").data("kendoAutoComplete"); i.setDataSource(n); createButtons() }) } function ChosseAnalysisModal() { $("#ChosseAnalysisModal").modal("toggle"); createChooseAnalysisTabs() } function createChooseAnalysisTabs() { $("#groupAnalysisListChooseAnalysis").empty(); $("#analysisListChooseAnalysis").empty(); $("#analysisItemListChooseAnalysis").empty(); let n = ""; groupAnalysis.sort((n, t) => n.Name > t.Name ? 1 : t.Name > n.Name ? -1 : 0); for (let t = 0; t < groupAnalysis.length; t++)n = groupAnalysis[t].IsButton ? n + "<div class='col-ms-12' style='padding:0.5rem;border:solid 1px rgba(0,0,0,0.8);border-radius:1rem'><span class='fa fa-angle-up k-primary' style = 'padding-top:0.3rem;padding-buttom:0.3rem' onclick = 'IncreasePriority(this)' data-id='" + groupAnalysis[t].Guid + " data-type='Group' ><\/span ><span class='fa fa-angle-down k-primary' style='margin:0 0.5rem;padding-top:0.3rem;padding-buttom:0.3rem' data-id='" + groupAnalysis[t].Guid + "' data-type='Group' onclick='DicreasePriority(this)'><\/span><input type = 'checkbox' id = 'eq" + t + "' class='k-checkbox' data-id='" + groupAnalysis[t].Guid + "' data-type='Group' checked = 'checked' onchange='checkBoxChange(this)'>                <label class='k-checkbox-label' for= 'eq" + t + "' >" + groupAnalysis[t].Name + "<\/label><\/div>" : n + "<div class='col-ms-12' style='padding:0.5rem;border:solid 1px rgba(0,0,0,0.8);border-radius:1rem'><span class='fa fa-angle-up k-primary' style='padding-top:0.3rem;padding-buttom:0.3rem' onclick='IncreasePriority(this)' data-id='" + groupAnalysis[t].Guid + " data-type='Group'><\/span><span class='fa fa-angle-down k-primary' style='margin:0 0.5rem;padding-top:0.3rem;padding-buttom:0.3rem' data-id='" + groupAnalysis[t].Guid + "' data-type='Group'  onclick='DicreasePriority(this)' ><\/span><input type='checkbox' id='eq" + t + "' data-id='" + groupAnalysis[t].Guid + "' class='k-checkbox' data-type='Group' onchange='checkBoxChange(this)'>                <label class='k-checkbox-label' for= 'eq" + t + "' >" + groupAnalysis[t].Name + "<\/label><\/div>"; $("#groupAnalysisListChooseAnalysis").append("<div class='col-sm-12' style=' padding: 0' >" + n + "<\/div>"); let t = ""; Analysis.sort((n, t) => n.Name > t.Name ? 1 : t.Name > n.Name ? -1 : 0); for (let n = 0; n < Analysis.length; n++)t = Analysis[n].IsButton ? t + "<div class='col-ms-12' style='padding:0.5rem;border:solid 1px rgba(0,0,0,0.8);border-radius:1rem'><span class='fa fa-angle-up k-primary' style='padding-top:0.3rem;padding-buttom:0.3rem' onclick='IncreasePriority(this)' data-id='" + Analysis[n].Guid + "' data-type='Analysis' ><\/span><span class='fa fa-angle-down k-primary' style='margin:0 0.5rem;padding-top:0.3rem;padding-buttom:0.3rem' data-id='" + Analysis[n].Guid + "' data-type='Analysis'  onclick='DicreasePriority(this)'><\/span><input type='checkbox' id='eq" + n + "' class='k-checkbox' data-id='" + Analysis[n].Guid + "' data-type='Analysis' checked='checked' onchange='checkBoxChange(this)'>                <label class='k-checkbox-label' for= 'eq" + n + "' >" + Analysis[n].Name + "<\/label><\/div>" : t + "<div class='col-ms-12' style='padding:0.5rem;border:solid 1px rgba(0,0,0,0.8);border-radius:1rem'><span class='fa fa-angle-up k-primary' style='padding-top:0.3rem;padding-buttom:0.3rem' onclick='IncreasePriority(this)' data-id='" + Analysis[n].Guid + "' data-type='Analysis' ><\/span><span class='fa fa-angle-down k-primary' style='margin:0 0.5rem;padding-top:0.3rem;padding-buttom:0.3rem' data-id='" + Analysis[n].Guid + "'  data-type='Analysis' onclick='DicreasePriority(this)'><\/span><input type='checkbox' id='eq" + n + "' data-id='" + Analysis[n].Guid + "' data-type='Analysis' class='k-checkbox' onchange='checkBoxChange(this)'>                <label class='k-checkbox-label' for= 'eq" + n + "' >" + Analysis[n].Name + "<\/label><\/div>"; $("#analysisListChooseAnalysis").append("<div class='col-sm-12' style=' padding: 0' >" + t + "<\/div>"); let i = ""; AnalysisItems.sort((n, t) => n.Name > t.Name ? 1 : t.Name > n.Name ? -1 : 0); for (let n = 0; n < AnalysisItems.length; n++)i = AnalysisItems[n].IsButton ? i + "<div class='col-ms-12' style='padding:0.5rem;border:solid 1px rgba(0,0,0,0.8);border-radius:1rem'><span class='fa fa-angle-up k-primary' style='padding-top:0.3rem;padding-buttom:0.3rem' onclick='IncreasePriority(this)' data-id='" + AnalysisItems[n].Guid + "'  data-type='AnalysisItem' ><\/span><span class='fa fa-angle-down k-primary' style='margin:0 0.5rem;padding-top:0.3rem;padding-buttom:0.3rem' data-id='" + AnalysisItems[n].Guid + "' data-type='AnalysisItem' onclick='DicreasePriority(this)'><\/span><input type='checkbox' id='eq" + n + "' class='k-checkbox' data-id='" + AnalysisItems[n].Guid + "' data-type='AnalysisItem' checked='checked' onchange='checkBoxChange(this)'>                <label class='k-checkbox-label' for= 'eq" + n + "' >" + AnalysisItems[n].Name + "<\/label><\/div>" : i + "<div class='col-ms-12' style='padding:0.5rem;border:solid 1px rgba(0,0,0,0.8);border-radius:1rem'><span class='fa fa-angle-up k-primary' style='padding-top:0.3rem;padding-buttom:0.3rem' onclick='IncreasePriority(this)' data-id='" + AnalysisItems[n].Guid + "' data-type='AnalysisItem'><\/span><span class='fa fa-angle-down k-primary' style='margin:0 0.5rem;padding-top:0.3rem;padding-buttom:0.3rem' data-id='" + AnalysisItems[n].Guid + "' data-type='AnalysisItem' onclick='DicreasePriority(this)'><\/span><input type='checkbox' id='eq" + n + "' data-id='" + AnalysisItems[n].Guid + "' class='k-checkbox' data-type='AnalysisItem' onchange='checkBoxChange(this)'>                <label class='k-checkbox-label' for= 'eq" + n + "' >" + AnalysisItems[n].Name + "<\/label><\/div>"; $("#analysisItemListChooseAnalysis").append("<div class='col-sm-12' style=' padding: 0' >" + i + "<\/div>") } function checkBoxChange(n) { let t = $(n).attr("data-id"), i = $(n).attr("data-type"); if (i === "Group") { let n = groupAnalysis.find(n => n.Guid == t); n.IsButton = !n.IsButton } else if (i === "Analysis") { let n = Analysis.find(n => n.Guid == t); n.IsButton = !n.IsButton } else { let n = AnalysisItems.find(n => n.Guid == t); n.IsButton = !n.IsButton } } function IncreasePriority(n) { let t = $(n).attr("data-id"), i = $(n).attr("data-type"); if (i === "Group") { let n = groupAnalysis.find(n => n.Guid == t); if (n.Priority === 1) return; let i = groupAnalysis.find(t => t.Priority == n.Priority - 1); n.Priority--; i.Priority++ } else if (i === "Analysis") { let n = Analysis.find(n => n.Guid == t); if (n.Priority === 1) return; let i = Analysis.find(t => t.Priority == n.Priority - 1); n.Priority--; i.Priority++ } else { let n = AnalysisItems.find(n => n.Guid == t); if (n.Priority === 1) return; let i = AnalysisItems.find(t => t.Priority == n.Priority - 1); n.Priority--; i.Priority++ } createChooseAnalysisTabs(); createButtons() } function DicreasePriority(n) { let t = $(n).attr("data-id"), i = $(n).attr("data-type"); if (i === "Group") { let n = groupAnalysis.find(n => n.Guid == t); if (n.Priority === groupAnalysis.length) return; let i = groupAnalysis.find(t => t.Priority == n.Priority + 1); n.Priority++; i.Priority-- } else if (i === "Analysis") { let n = Analysis.find(n => n.Guid == t); if (n.Priority === Analysis.length) return; let i = Analysis.find(t => t.Priority == n.Priority + 1); n.Priority++; i.Priority-- } else { let n = AnalysisItems.find(n => n.Guid == t); if (n.Priority === AnalysisItems.length) return; let i = AnalysisItems.find(t => t.Priority == n.Priority + 1); n.Priority++; i.Priority-- } createChooseAnalysisTabs(); createButtons() } function ChosseAnalysisAccept() { createChooseAnalysisTabs(); createButtons(); let n = []; $("#groupAnalysisListChooseAnalysis input:checked").each(function () { n.push($(this).attr("data-id")) }); for (let n = 0; n < groupAnalysis.length; n++)groupAnalysis[n].IsButton = !1; for (let t = 0; t < n.length; t++){ let i = groupAnalysis.find(i => i.Guid == n[t]); i.IsButton = !0 } let t = []; $("#analysisListChooseAnalysis input:checked").each(function () { t.push($(this).attr("data-id")) }); for (let n = 0; n < Analysis.length; n++)Analysis[n].IsButton = !1; for (let n = 0; n < t.length; n++){ let i = Analysis.find(i => i.Guid == t[n]); i.IsButton = !0 } let i = [], r = []; $("#analysisItemListChooseAnalysis input:checked").each(function () { i.push($(this).attr("data-id")) }); for (let n = 0; n < AnalysisItems.length; n++)AnalysisItems[n].IsButton = !1; for (let n = 0; n < i.length; n++){ let t = AnalysisItems.find(t => t.Guid == i[n]); t.IsButton = !0; r.push(t) } createButtons(); $("#ChosseAnalysisModal").modal("hide"); $(".modal-backdrop").remove(); $("#groupAnalysisListChooseAnalysis").empty(); $("#analysisListChooseAnalysis").empty(); $("#analysisItemListChooseAnalysis").empty(); $.ajax({ type: "Post", data: { allGroup: groupAnalysis }, url: "/GroupAnalysis/UpdateGroupAnalysisButtonAndPriority" }); $.ajax({ type: "Post", data: { allAnalysis: Analysis }, url: "/Analysis/UpdateAnalysisButtonAndPriority" }); $.ajax({ type: "Post", data: { allAnalysisItem: r }, url: "/AnalysisItem/UpdateAnalysisItemButtonAndPriority" }) } function closeChosseAnalysisModal() { $("#ChosseAnalysisModal").modal("hide"); $(".modal-backdrop").remove(); $("#groupAnalysisListChooseAnalysis").empty(); $("#analysisListChooseAnalysis").empty(); $("#analysisItemListChooseAnalysis").empty() } function createButtons() { $("#groupAnalysisButton").empty(); $("#analysisButton").empty(); $("#analysisItemButton").empty(); let n = ""; for (let t = 0; t < groupAnalysis.length; t++)groupAnalysis[t].IsButton && (n = n + "<div style='margin:1rem 0.5rem;display:inline-block'><a class='analysisButtons' style='padding:0.5rem' onclick='AddButtonToSelectedGrid(this)' data-Guid='" + groupAnalysis[t].Guid + "' data-Type='Group Analysis' data-Name='" + groupAnalysis[t].Name + "' data-Code='" + groupAnalysis[t].Code + "' data-Price='" + groupAnalysis[t].Price + "'  data-Discount='" + groupAnalysis[t].Discount + "'>" + groupAnalysis[t].Name + "<\/a><\/div>"); $("#groupAnalysisButton").append("<div class='col-sm-12' style=' padding: 0;height:8rem' >" + n + "<\/div>"); let t = ""; for (let n = 0; n < Analysis.length; n++)Analysis[n].IsButton && (t = t + "<div style='margin:1rem 0.5rem;display:inline-block'><a class='analysisButtons' style='padding:0.5rem' onclick='AddButtonToSelectedGrid(this)' data-Guid='" + Analysis[n].Guid + "' data-Type='Analysis' data-Name='" + Analysis[n].Name + "' data-Code='" + Analysis[n].Code + "' data-Price='" + Analysis[n].Price + "'  data-Discount='" + Analysis[n].Discount + "'>" + Analysis[n].Name + "<\/a><\/div>"); $("#analysisButton").append("<div class='col-sm-12' style=' padding: 0;height:8rem' >" + t + "<\/div>"); let i = ""; for (let n = 0; n < AnalysisItems.length; n++)AnalysisItems[n].IsButton && (i = i + "<div style='margin:1rem 0.5rem;display:inline-block'><a class='analysisButtons' style='padding:0.5rem' onclick='AddButtonToSelectedGrid(this)' data-Guid='" + AnalysisItems[n].Guid + "' data-Type='Analysis Item' data-Name='" + AnalysisItems[n].Name + "' data-Code='" + AnalysisItems[n].Code + "' data-Price='" + AnalysisItems[n].Price + "'  data-Discount='" + AnalysisItems[n].Discount + "'>" + AnalysisItems[n].Name + "<\/a><\/div>"); $("#analysisItemButton").append("<div class='col-sm-12' style=' padding: 0 ;height:8rem' >" + i + "<\/div>") } function AddButtonToSelectedGrid(n) { let t = { Guid: $(n).attr("data-Guid"), Type: $(n).attr("data-Type"), Name: $(n).attr("data-Name"), Code: $(n).attr("data-Code"), Price: $(n).attr("data-Price"), Discount: $(n).attr("data-Discount") }; AddToGridFromAutoCompelets(t) } function AddSpeciallity() { Address = !1; $(".loader").removeClass("hidden"); $("#AddressModal").modal("toggle"); $("#AddressModal-body").load("/BaseInfo/AddNewModal", function () { $(".loader").fadeIn("slow"); $(".loader").addClass("hidden") }) } function addNewAddress() { var n; if ($("#Name").val() === "") { $("#Name-box").removeClass("hidden"); return } n = Address ? $("#Address").attr("data-Value") : $("#Speciallity").attr("data-Value"); $("#TypeId").val(n); var t = $("#addNewForm").serialize(); $(".loader").removeClass("hidden"); $.ajax({ type: "Post", url: "/BaseInfo/AddOrUpdate", data: t, success: function (n) { n !== 0 && (n === "ValueIsRepeated" ? ($("#Name-Exist").removeClass("hidden"), $(".loader").fadeIn("slow"), $(".loader").addClass("hidden")) : (SpeciallityDropDown.dataSource.read(), $("#AddressModal").modal("hide"), $(".modal-backdrop").remove(), $("#AddressModal-body").empty(), $(".loader").fadeIn("slow"), $(".loader").addClass("hidden"), SpeciallityDropDown.focus(), SpeciallityDropDown.open())) } }) } function CloseModal() { $("#AddressModal").modal("hide"); $(".modal-backdrop").remove(); $("#AddressModal-body").empty() } function draw2(n) { "use strict"; var i = [], t; for (let r = 0; r < n.allb.length; r++)t = new Image, t.src = "data:image/jpeg;base64," + n.allb[r], i.push(t.src); printJS({ printable: i, type: "image" }) } function PatientReceptionAnalysisReport() { let n = AggregateData(); if (n) { $(".loader").removeClass("hidden"); var t = $(':input:hidden[name*="RequestVerificationToken"]'); $.ajax({ type: "Post", url: "/PatientReception/AddOrUpdate", data: { __RequestVerificationToken: t.attr("value"), patientReception: patientReception }, success: function (n) { $("#Guid").val(n); $.ajax({ url: "/PatientReceptionAnalysis/PrintPatientReceptionAnalysisReport", type: "Post", data: { PatientReceptionId: n }, success: function (n) { Exit(); draw2(n); $(".loader").fadeIn("slow"); $(".loader").addClass("hidden") }, error: function () { } }) } }) } } function KeyPressAndFocusConfigs() { $("#Name2").on("focus", function () { $("#Name2-box").addClass("hidden"); let n = nameAuto.value(); nameAuto.search(n) }); $("#Doctor").on("focus", function () { $("#Doctor-box").addClass("hidden"); let n = doctorAuto.value(); doctorAuto.search(n) }); $("#RadiologyDoctor").on("focus", function () { let n = radiologyDoctorAuto.value(); radiologyDoctorAuto.search(n) }); $("#PhoneNumber").on("focus", function () { let n = $("#PhoneNumber").data("kendoAutoComplete"), t = n.value(); n.search(t) }); $("#AddressName").on("focus", function () { let n = $("#AddressName").data("kendoAutoComplete"), t = n.value(); n.search(t) }); $("#AllNameAutoComplete").on("focus", function () { let n = $("#AllNameAutoComplete").data("kendoAutoComplete"), t = n.value(); n.search(t) }); $("#AllCodeAutoComplete").on("focus", function () { let n = $("#AllCodeAutoComplete").data("kendoAutoComplete"), t = n.value(); n.search(t) }); $("#GroupAnalysisNameAutoComplete").on("focus", function () { let n = $("#GroupAnalysisNameAutoComplete").data("kendoAutoComplete"), t = n.value(); n.search(t) }); $("#GroupAnalysisCodeAutoComplete").on("focus", function () { let n = $("#GroupAnalysisCodeAutoComplete").data("kendoAutoComplete"), t = n.value(); n.search(t) }); $("#AnalysisNameAutoComplete").on("focus", function () { let n = $("#AnalysisNameAutoComplete").data("kendoAutoComplete"), t = n.value(); n.search(t) }); $("#AnalysisCodeAutoComplete").on("focus", function () { let n = $("#AnalysisCodeAutoComplete").data("kendoAutoComplete"), t = n.value(); n.search(t) }); $("#AnalysisItemNameAutoComplete").on("focus", function () { let n = $("#AnalysisItemNameAutoComplete").data("kendoAutoComplete"), t = n.value(); n.search(t) }); $("#AnalysisItemCodeAutoComplete").on("focus", function () { let n = $("#AnalysisItemCodeAutoComplete").data("kendoAutoComplete"), t = n.value(); n.search(t) }); $("#AnalysisAutoComplete").on("focus", function () { let n = $("#AnalysisAutoComplete").data("kendoAutoComplete"), t = n.value(); n.search(t) }); $("#Name2").on("keypress", function (n) { n.which === 13 && $("#PhoneNumber").focus() }); var n = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "/", ".", "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩", " "], t = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "q", "Q", "w", "e", "E", "r", "R", "t", "T", "y", "Y", "u", "U", "i", "I", "o", "O", "p", "P", "a", "A", "s", "S", "d", "D", "f", "F", "g", "G", "h", "H", "j", "J", "k", "K", "l", "L", "z", "Z", "x", "X", "c", "C", "v", "V", "b", "B", "n", "N", "m", "M"], i = [1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1602, 96, 1608, 1749, 1610, 1585, 1685, 1578, 1591, 1740, 1742, 1574, 1569, 1581, 1593, 1734, 1572, 1662, 1579, 1575, 1570, 1587, 1588, 1583, 1584, 1601, 1573, 1711, 1594, 1607, 8204, 1688, 1571, 1705, 1603, 1604, 1717, 1586, 1590, 1582, 1589, 1580, 1670, 1700, 1592, 1576, 1609, 1606, 1577, 1605, 1600]; $("#PhoneNumber").on("keypress", function (r) { let u = $("#GenderId").data("kendoDropDownList"), f = n.indexOf(r.key); if (f !== -1 || r.which === 13 || r.which === 9) { let n = i.indexOf(r.which); if (r.which === 13 || r.which === 9) u.focus(), u.open(); else if (n !== -1) { r.preventDefault(); let i = t[n], u = $(this).val(); $(this).val(u + i) } } else r.preventDefault() }); $("#GenderId").parent().on("keypress", function (n) { if (n.which === 13) { let n = $("#DateOfBirth").data("kendoDatePicker"); n.element.focus() } }); $("#DateOfBirth").on("focus", function () { let n = $("#DateOfBirth").data("kendoDatePicker"); n.element.select() }); $("#DateOfBirth").on("keypress", function (n) { n.which === 13 && $("#Doctor").focus() }); $("#Year").on("keypress", function (n) { n.which === 13 && $("#Month").focus() }); $("#Year").on("focus", function () { $("#Year").select() }); $("#Month").on("keypress", function (n) { n.which === 13 && $("#Doctor").focus() }); $("#Month").on("focus", function () { $("#Month").select() }); $("#Doctor").on("keypress", function (n) { if (n.which === 13) { let n = $("#Speciality").data("kendoDropDownList"); n.focus(); n.open() } }); $("#Speciality").parent().on("keypress", function () { $("#Explanation").focus() }); $("#AllNameAutoComplete").on("keypress", function (n) { if (n.which === 13) { let n = $("#Discount").data("kendoNumericTextBox"); n.focus() } }); $("#AllNameAutoComplete").on("keydown", function (n) { if (n.which === 9) { n.preventDefault(); let t = $("#Discount").data("kendoNumericTextBox"); t.focus() } }); $("#Discount").on("keypress", function (n) { if (n.which === 13) { let n = $("#DiscountAmount").data("kendoNumericTextBox"); n.focus() } }); $("#Discount").on("focus", function () { var n = $(this); setTimeout(function () { n.select() }) }); $("#DiscountAmount").on("keypress", function (n) { if (n.which === 13) { let n = $("#PatientReceptionReceivedAmount").data("kendoNumericTextBox"); n.focus() } }); $("#DiscountAmount").on("focus", function () { var n = $(this); setTimeout(function () { n.select() }) }); $("#PatientReceptionReceivedAmount").on("keydown", function (n) { if (n.which === 13) { let n = $("#PatientReceptionReceivedAmount").val(); n === 0 || n === "" || n === null || n === undefined || n === "0" ? $("#btnPrint").focus() : (addNewPatientReceptionReceived(), $("#btnPrint").focus()) } else n.which === 9 && (n.preventDefault(), $("#PatientReceptionReceivedAmountDollar").focus()) }); $("#PatientReceptionReceivedAmountDollar").on("keydown", function (n) { if (n.which === 13) { let n = $("#PatientReceptionReceivedAmountDollar").val(); n === 0 || n === "" || n === null || n === undefined || n === "0" ? $("#btnPrint").focus() : (addNewPatientReceptionReceivedDollar(), $("#btnPrint").focus()) } else n.which === 9 && (n.preventDefault(), $("#btnPrint").focus()) }); $("#PatientReceptionReceivedAmount").on("focus", function () { var n = $(this); setTimeout(function () { n.select() }) }); $("#PatientReceptionReceivedAmountDollar").on("focus", function () { var n = $(this); setTimeout(function () { n.select() }) }); $("#Explanation").on("keydown", function (n) { n.which === 9 && (n.preventDefault(), $("html, body").animate({ scrollTop: 450 }), setTimeout(function () { $("#AllNameAutoComplete").focus() }, 500)) }); $("#ReceptionNumber").on("keydown", function (n) { n.which === 13 && GoToCustomReception("value") }); $("#btnOkNew").on("keydown", function (n) { n.which === 37 && $("#btnOkExit").focus() }); $("#btnOkExit").on("keydown", function (n) { n.which === 39 ? $("#btnOkNew").focus() : n.which === 37 && $("#btnExit").focus() }); $("#btnExit").on("keydown", function (n) { n.which === 39 ? $("#btnOkExit").focus() : n.which === 37 && $("#btnPrint").focus() }); $("#btnPrint").on("keydown", function (n) { n.which === 39 && $("#btnExit").focus() }); $("#MoneyConvertAmount").on("keydown", function (n) { n.which === 13 && changeMoneyConvert() }); $("#MoneyConvertAmount").on("focus", function () { var n = $(this); setTimeout(function () { n.select() }) }) } function createAnalysisGrid() { $("#analysisList").html(""); RTL === "True" ? $("#analysisList").kendoGrid({ dataSource: { data: Analysis, schema: { model: { fields: { Name: { type: "string" }, Code: { type: "string" } } } }, pageSize: 10 }, height: gridHieght, scrollable: !0, sortable: !0, pageable: { input: !0, numeric: !1 }, columns: [{ template: "<i class='fa fa-arrow-left bigger-120 blue'  > <\/i>", width: "50px", attributes: { onclick: "addToSelectedGrid(this)", "data-Guid": "#: Guid #", "data-Type": "Analysis", "data-Name": "#: Name #", "data-Code": "#: Code #", "data-Price": "#: Price #", "data-Discount": "#: Discount #", "data-Disabled": "#: disabled #", style: "cursor:pointer" } }, { field: "Code", title: CodeTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong >  #: Code #  <\/strong>", width: "60px", headerAttributes: { style: "text-align: center" }, attributes: { "data-Guid": "#: Guid #", "data-Type": "Analysis", "data-Name": "#: Name #", "data-Code": "#: Code #", "data-Price": "#: Price #" } }, { field: "Name", title: NameTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong   >  #: Name #  <\/strong>", headerAttributes: { style: "text-align: center" }, attributes: { "data-Guid": "#: Guid #", "data-Type": "Analysis", "data-Name": "#: Name #", "data-Code": "#: Code #", "data-Price": "#: Price #" } }, { template: "<strong>  #: Index #  <\/strong>", width: "30px" }], selectable: "row" }) : $("#analysisList").kendoGrid({ dataSource: { data: Analysis, schema: { model: { fields: { Name: { type: "string" }, Code: { type: "string" } } } }, pageSize: 10 }, height: gridHieght, scrollable: !0, sortable: !0, pageable: { input: !0, numeric: !1 }, columns: [{ template: "<strong>  #: Index #  <\/strong>", width: "30px" }, { field: "Name", title: NameTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong   >  #: Name #  <\/strong>", headerAttributes: { style: "text-align: center" }, attributes: { "data-Guid": "#: Guid #", "data-Type": "Analysis", "data-Name": "#: Name #", "data-Code": "#: Code #", "data-Price": "#: Price #" } }, { field: "Code", title: CodeTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong >  #: Code #  <\/strong>", width: "60px", headerAttributes: { style: "text-align: center" }, attributes: { "data-Guid": "#: Guid #", "data-Type": "Analysis", "data-Name": "#: Name #", "data-Code": "#: Code #", "data-Price": "#: Price #" } }, { template: "<i class='fa fa-arrow-right bigger-120 blue'  > <\/i>", width: "50px", attributes: { onclick: "addToSelectedGrid(this)", "data-Guid": "#: Guid #", "data-Type": "Analysis", "data-Name": "#: Name #", "data-Code": "#: Code #", "data-Price": "#: Price #", "data-Discount": "#: Discount #", "data-Disabled": "#: disabled #", style: "cursor:pointer" } }], selectable: "row" }) } function createAnalysisListItemsGrid() { $("#analysisItemList").html(""); RTL === "True" ? $("#analysisItemList").kendoGrid({ dataSource: { data: AnalysisItems, schema: { model: { fields: { Name: { type: "string" }, Code: { type: "string" } } } }, pageSize: 10 }, height: gridHieght, scrollable: !0, sortable: !0, pageable: { input: !0, numeric: !1 }, columns: [{ template: "<i class='fa fa-arrow-left bigger-120 blue'  > <\/i>", width: "50px", attributes: { onclick: "addToSelectedGrid(this)", "data-Guid": "#: Guid #", "data-Type": "Analysis Item", "data-Name": "#: Name #", "data-Code": "#: Code #", "data-Price": "#: Price #", "data-Disabled": "#: disabled #", "data-Discount": 0, style: "cursor:pointer" } }, { field: "Code", title: CodeTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong  data-Guid = '#: Guid #'  data-Type='Analysis'  >  #: Code #  <\/strong>", width: "60px", headerAttributes: { style: "text-align: center" }, attributes: { "data-Guid": "#: Guid #", "data-Type": "Analysis", "data-Name": "#: Name #", "data-Code": "#: Code #", "data-Price": "#: Price #" } }, { field: "Name", title: NameTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong  data-Guid = '#: Guid #'  data-Type='Analysis'   >  #: Name #  <\/strong>", headerAttributes: { style: "text-align: center" }, attributes: { "data-Guid": "#: Guid #", "data-Type": "Analysis", "data-Name": "#: Name #", "data-Code": "#: Code #", "data-Price": "#: Price #" } }, { template: "<strong>  #: Index #  <\/strong>", width: "30px" }] }) : $("#analysisItemList").kendoGrid({ dataSource: { data: AnalysisItems, schema: { model: { fields: { Name: { type: "string" }, Code: { type: "string" } } } }, pageSize: 10 }, height: gridHieght, scrollable: !0, sortable: !0, pageable: { input: !0, numeric: !1 }, columns: [{ template: "<strong>  #: Index #  <\/strong>", width: "30px" }, { field: "Name", title: NameTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong  data-Guid = '#: Guid #'  data-Type='Analysis'   >  #: Name #  <\/strong>", headerAttributes: { style: "text-align: center" }, attributes: { "data-Guid": "#: Guid #", "data-Type": "Analysis", "data-Name": "#: Name #", "data-Code": "#: Code #", "data-Price": "#: Price #" } }, { field: "Code", title: CodeTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong  data-Guid = '#: Guid #'  data-Type='Analysis'  >  #: Code #  <\/strong>", width: "60px", headerAttributes: { style: "text-align: center" }, attributes: { "data-Guid": "#: Guid #", "data-Type": "Analysis", "data-Name": "#: Name #", "data-Code": "#: Code #", "data-Price": "#: Price #" } }, { template: "<i class='fa fa-arrow-right bigger-120 blue'  > <\/i>", width: "50px", attributes: { onclick: "addToSelectedGrid(this)", "data-Guid": "#: Guid #", "data-Type": "Analysis Item", "data-Name": "#: Name #", "data-Code": "#: Code #", "data-Price": "#: Price #", "data-Disabled": "#: disabled #", "data-Discount": 0, style: "cursor:pointer" } }] }) } function createGroupAnalysisGrid() { $("#groupAnalysisList").html(""); RTL === "True" ? $("#groupAnalysisList").kendoGrid({ dataSource: { data: groupAnalysis, schema: { model: { fields: { Name: { type: "string" }, Code: { type: "string" } } } }, pageSize: 10 }, height: gridHieght, scrollable: !0, sortable: !0, pageable: { input: !0, numeric: !1 }, columns: [{ template: "<i class='fa fa-arrow-left bigger-120 blue'  > <\/i>", width: "50px", attributes: { onclick: "addToSelectedGrid(this)", "data-Guid": "#: Guid #", "data-Type": "Group Analysis", "data-Name": "#: Name #", "data-Code": "#: Code #", "data-Price": "#: Price #", "data-Discount": "#: Discount #", style: "cursor:pointer" } }, { field: "Code", title: CodeTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong  data-Guid = '#: Guid #'  data-Type='Analysis'  >  #: Code #  <\/strong>", width: "60px", headerAttributes: { style: "text-align: center" }, attributes: { "data-Guid": "#: Guid #", "data-Type": "Analysis", "data-Name": "#: Name #", "data-Code": "#: Code #" } }, { field: "Name", title: NameTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong  data-Guid = '#: Guid #'  data-Type='Analysis'   >  #: Name #  <\/strong>", headerAttributes: { style: "text-align: center" }, attributes: { "data-Guid": "#: Guid #", "data-Type": "Analysis", "data-Name": "#: Name #", "data-Code": "#: Code #" } }, { template: "<strong>  #: Index #  <\/strong>", width: "30px" }] }) : $("#groupAnalysisList").kendoGrid({ dataSource: { data: groupAnalysis, schema: { model: { fields: { Name: { type: "string" }, Code: { type: "string" } } } }, pageSize: 10 }, height: gridHieght, scrollable: !0, sortable: !0, pageable: { input: !0, numeric: !1 }, columns: [{ template: "<strong>  #: Index #  <\/strong>", width: "30px" }, { field: "Name", title: NameTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong  data-Guid = '#: Guid #'  data-Type='Analysis'   >  #: Name #  <\/strong>", headerAttributes: { style: "text-align: center" }, attributes: { "data-Guid": "#: Guid #", "data-Type": "Analysis", "data-Name": "#: Name #", "data-Code": "#: Code #" } }, { field: "Code", title: CodeTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong  data-Guid = '#: Guid #'  data-Type='Analysis'  >  #: Code #  <\/strong>", width: "60px", headerAttributes: { style: "text-align: center" }, attributes: { "data-Guid": "#: Guid #", "data-Type": "Analysis", "data-Name": "#: Name #", "data-Code": "#: Code #" } }, { template: "<i class='fa fa-arrow-right bigger-120 blue'  > <\/i>", width: "50px", attributes: { onclick: "addToSelectedGrid(this)", "data-Guid": "#: Guid #", "data-Type": "Group Analysis", "data-Name": "#: Name #", "data-Code": "#: Code #", "data-Price": "#: Price #", "data-Discount": "#: Discount #", style: "cursor:pointer" } },] }) } function createSelectedGrid() { let n = "{0:n" + dinarDecimal + "}"; RTL === "True" ? $("#SelectedGrid").kendoGrid({ dataSource: { data: selectedItems, schema: { model: { fields: { Name: { type: "string" }, Type: { type: "string" }, Code: { type: "string" }, Price: { type: "number" }, Discount: { type: "number" }, Total: { type: "number" } } } }, sort: { field: "Type", dir: "asc" }, pageSize: 10 }, scrollable: !0, sortable: !0, pageable: { input: !0, numeric: !1 }, columns: [{ template: "<i class='fa fa-trash-can bigger-120 red' style: 'cursor:pointer'> <\/i>", width: "50px", attributes: { onclick: "removeFromSelectedGrid(this)", "data-Guid": "#: Guid #", "data-Type": "#: Type #", style: "cursor:pointer" } }, { field: "Total", title: TotalTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, format: n, headerAttributes: { style: "text-align: center" } }, { field: "Discount", title: DiscountTranslated, format: n, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, width: "80px", headerAttributes: { style: "text-align: center" } }, { field: "Price", title: PriceTranslated, format: n, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, headerAttributes: { style: "text-align: center" } }, { field: "Code", title: CodeTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong >  #: Code #  <\/strong>", width: "60px", headerAttributes: { style: "text-align: center" } }, { field: "Type", title: TypeTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong >  #: Type #  <\/strong>", headerAttributes: { style: "text-align: center" } }, { field: "Name", title: NameTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong >  #: Name #  <\/strong>", headerAttributes: { style: "text-align: center" } },] }) : $("#SelectedGrid").kendoGrid({ dataSource: { data: selectedItems, schema: { model: { fields: { Name: { type: "string" }, Type: { type: "string" }, Code: { type: "string" }, Price: { type: "number" }, Discount: { type: "number" }, Total: { type: "number" } } } }, sort: { field: "Type", dir: "asc" }, pageSize: 10 }, scrollable: !0, sortable: !0, pageable: { input: !0, numeric: !1 }, columns: [{ field: "Name", title: NameTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong >  #: Name #  <\/strong>", headerAttributes: { style: "text-align: center" } }, { field: "Type", title: TypeTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong >  #: Type #  <\/strong>", headerAttributes: { style: "text-align: center" } }, { field: "Code", title: CodeTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, template: "<strong >  #: Code #  <\/strong>", width: "60px", headerAttributes: { style: "text-align: center" } }, { field: "Price", title: PriceTranslated, format: n, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, headerAttributes: { style: "text-align: center" } }, { field: "Discount", title: DiscountTranslated, format: n, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, width: "80px", headerAttributes: { style: "text-align: center" } }, { field: "Total", title: TotalTranslated, filterable: { cell: { operator: "contains", suggestionOperator: "contains" } }, format: n, headerAttributes: { style: "text-align: center" } }, { template: "<i class='fa fa-trash-can bigger-120 red' style: 'cursor:pointer'> <\/i>", width: "50px", attributes: { onclick: "removeFromSelectedGrid(this)", "data-Guid": "#: Guid #", "data-Type": "#: Type #", style: "cursor:pointer" } }] }); AllMoneyConverts[0] !== null && changeDiscountAmount() } function createGroupAnalysisNameAutoComplete() { $("#GroupAnalysisNameAutoComplete").kendoAutoComplete({ dataSource: groupAnalysis, dataTextField: "Name", filter: "contains", placeholder: "Select Name...", clearButton: !1, highlightFirst: !0, select: selectGroupAnalysisNameAutoComplete }) } function selectGroupAnalysisNameAutoComplete(n) { let t = $("#GroupAnalysisNameAutoComplete").data("kendoAutoComplete"), i = t.dataItem(n.item.index()); AddToGridFromAutoCompelets(i); setTimeout(function () { t.value("") }, 20) } function createGroupAnalysisCodeAutoComplete() { $("#GroupAnalysisCodeAutoComplete").kendoAutoComplete({ dataTextField: "Code", filter: "contains", placeholder: "Select Code...", clearButton: !1, highlightFirst: !0, select: selectGroupAnalysisCodeAutoComplete }) } function selectGroupAnalysisCodeAutoComplete(n) { let t = $("#GroupAnalysisCodeAutoComplete").data("kendoAutoComplete"), i = t.dataItem(n.item.index()); AddToGridFromAutoCompelets(i); setTimeout(function () { t.value("") }, 20) } function createAnalysisNameAutoComplete() { $("#AnalysisNameAutoComplete").kendoAutoComplete({ dataSource: Analysis, dataTextField: "Name", filter: "contains", placeholder: "Select Name...", clearButton: !1, highlightFirst: !0, select: selectAnalysisNameAutoComplete }) } function selectAnalysisNameAutoComplete(n) { let t = $("#AnalysisNameAutoComplete").data("kendoAutoComplete"), i = t.dataItem(n.item.index()); AddToGridFromAutoCompelets(i); setTimeout(function () { t.value("") }, 20) } function resetAnalysisItemAndAllItem() { AllAnalysisItems = []; AllItems = []; for (let n = 0; n < Analysis.length; n++){ for (let t = 0; t < Analysis[n].AnalysisItems.length; t++)AllAnalysisItems.push(Analysis[n].AnalysisItems[t]), AllItems.push(Analysis[n].AnalysisItems[t]); Analysis[n].Type = "Analysis"; AllItems.push(Analysis[n]) } for (let n = 0; n < groupAnalysis.length; n++)groupAnalysis[n].Type = "Group Analysis", AllItems.push(groupAnalysis[n]); let n = $("#AnalysisItemNameAutoComplete").data("kendoAutoComplete"); n.setDataSource(AllAnalysisItems); let t = $("#AnalysisItemCodeAutoComplete").data("kendoAutoComplete"); t.setDataSource(AllAnalysisItems); let i = $("#AllNameAutoComplete").data("kendoAutoComplete"); i.setDataSource(AllItems); let r = $("#AllCodeAutoComplete").data("kendoAutoComplete"); r.setDataSource(AllItems); let u = $("#AnalysisAutoComplete").data("kendoAutoComplete"); u.setDataSource(Analysis) } function createAnalysisCodeAutoComplete() { $("#AnalysisCodeAutoComplete").kendoAutoComplete({ dataTextField: "Code", filter: "contains", placeholder: "Select Code...", clearButton: !1, highlightFirst: !0, select: selectAnalysisCodeAutoComplete }) } function selectAnalysisCodeAutoComplete(n) { let t = $("#AnalysisCodeAutoComplete").data("kendoAutoComplete"), i = t.dataItem(n.item.index()); AddToGridFromAutoCompelets(i); setTimeout(function () { t.value("") }, 20) } function createAnalysisItemNameAutoComplete() { $("#AnalysisItemNameAutoComplete").kendoAutoComplete({ dataSource: AnalysisItems, dataTextField: "Name", filter: "contains", placeholder: "Select Name...", clearButton: !1, highlightFirst: !0, select: selectAnalysisItemNameAutoComplete }) } function selectAnalysisItemNameAutoComplete(n) { let t = $("#AnalysisItemNameAutoComplete").data("kendoAutoComplete"), i = t.dataItem(n.item.index()); AddToGridFromAutoCompelets(i); setTimeout(function () { t.value("") }, 20) } function createAnalysisItemCodeAutoComplete() { $("#AnalysisItemCodeAutoComplete").kendoAutoComplete({ dataTextField: "Code", filter: "contains", placeholder: "Select Code...", clearButton: !1, highlightFirst: !0, select: selectAnalysisItemCodeAutoComplete }) } function selectAnalysisItemCodeAutoComplete(n) { let t = $("#AnalysisItemCodeAutoComplete").data("kendoAutoComplete"), i = t.dataItem(n.item.index()); AddToGridFromAutoCompelets(i); setTimeout(function () { t.value("") }, 20) } function addToSelectedGrid(n) { let t = { Guid: $(n).attr("data-Guid"), Type: $(n).attr("data-Type"), Name: $(n).attr("data-Name"), Code: $(n).attr("data-Code"), Price: $(n).attr("data-Price"), disabled: $(n).attr("data-Disabled"), Discount: $(n).attr("data-Discount") }; AddToGridFromAutoCompelets(t) } function removeFromSelectedGrid(n) { let i = $(n).attr("data-Guid"), r = $(n).attr("data-Type"), t = selectedItems.findIndex(n => n.Guid == i); t > -1 && (selectedItems.splice(t, 1), createSelectedGrid()) } function AddToGridFromAutoCompelets(n) { let t = n.Guid, u = n.Type, f = n.Name, e = n.Code, i = n.Price, r = n.Discount, h = n.disabled, o = parseFloat(i) - parseFloat(r), s = selectedItems.findIndex(n => n.Guid == t); if (s === -1) { selectedItems.push({ Guid: t, Type: u, Name: f, Code: e, Price: i, Discount: r, Total: o }); let n = $("#SelectedGrid").data("kendoGrid"); n.dataSource.read() } changeDiscountAmount() } function createAllNameAutoComplete() { $("#AllNameAutoComplete").kendoAutoComplete({ dataSource: AllItems, dataTextField: "Name", filter: "contains", placeholder: "Select Name...", clearButton: !1, highlightFirst: !0, select: selectAllNameAutoComplete }) } function selectAllNameAutoComplete(n) { let t = $("#AllNameAutoComplete").data("kendoAutoComplete"), i = t.dataItem(n.item.index()); AddToGridFromAutoCompelets(i); setTimeout(function () { t.value(""); $("#AllNameAutoComplete").focus() }, 20) } function createAllCodeAutoComplete() { $("#AllCodeAutoComplete").kendoAutoComplete({ dataTextField: "Code", filter: "contains", placeholder: "Select Code...", clearButton: !1, highlightFirst: !0, select: selectAllCodeAutoComplete }) } function selectAllCodeAutoComplete(n) { let t = $("#AllCodeAutoComplete").data("kendoAutoComplete"), i = t.dataItem(n.item.index()); AddToGridFromAutoCompelets(i); setTimeout(function () { t.value(""); $("#AllCodeAutoComplete").focus() }, 20) } function DeleteAllSelectedItems() { bootbox.confirm("Do you Want To Delete All Analysis?", function (n) { if (n) selectedItems = [], createSelectedGrid(); else return }) } function changeDiscount() { let t = 0, r = 0, i = 0, u = 0; for (let n = 0; n < selectedItems.length; n++)t = t + parseFloat(selectedItems[n].Total); let f = $("#Discount").data("kendoNumericTextBox"), o = $("#DiscountAmount").data("kendoNumericTextBox"), n = $("#Discount").val(); (n === null || n === "" || n === undefined) && (n = 0, f.value(n)); n > 100 && (n = 100, f.value(100)); n = parseFloat(n); let e = Math.round(t * (n / 100)); r = calculateMoneyConvert(t, 11, 12).toFixed(2); i = t - e; u = calculateMoneyConvert(i, 11, 12).toFixed(2); o.value(e); $("#totalAmount").val(t.toLocaleString()); $("#totalAmountDollar").val(r.toLocaleString() + " $"); $("#totalAmountWithDiscount").val(i.toLocaleString()); $("#totalAmountWithDiscountDollar").val(u.toLocaleString() + " $"); calculateTotalReceived(i) } function changeDiscountAmount() { let t = 0, u = 0, i = 0, f = 0; for (let n = 0; n < selectedItems.length; n++)t = t + parseFloat(selectedItems[n].Total); let r = $("#Discount").data("kendoNumericTextBox"), e = $("#DiscountAmount").data("kendoNumericTextBox"), n = $("#DiscountAmount").val(); (n === null || n === "" || n === undefined) && (n = 0, e.value(n), r.value(0)); n > t && (n = t, e.value(t)); n = parseFloat(n); u = calculateMoneyConvert(t, 11, 12).toFixed(2); i = t - n; f = calculateMoneyConvert(i, 11, 12).toFixed(2); let o = n / t * 100; isNaN(o) ? r.value(0) : r.value(o); $("#totalAmount").val(t.toLocaleString()); $("#totalAmountDollar").val(u.toLocaleString() + " $"); $("#totalAmountWithDiscount").val(i.toLocaleString()); $("#totalAmountWithDiscountDollar").val(f.toLocaleString() + " $"); calculateTotalReceived(i) } function totalReceived(n) { TotalReceived = 0; let t = 11, i = !0; for (let r = 0; r < ReceivedAmount.length; r++)if (ReceivedAmount[r].AmountCurrencyId !== t) { let u = AllMoneyConverts.find(n => n.BaseCurrencyId == ReceivedAmount[r].AmountCurrencyId && n.DestCurrencyId == t); u === undefined && (u = AllMoneyConverts.find(n => n.BaseCurrencyId == t && n.DestCurrencyId == ReceivedAmount[r].AmountCurrencyId)); u === undefined && (i = !1, GetConvert(ReceivedAmount[r].AmountCurrencyId, t, n)) } i && calculateTotalReceived(n) } function calculateMoneyConvert(n, t, i) { let r = $("#useDollar").text(); if (r === "true") { let r = AllMoneyConverts.find(n => n.BaseCurrencyId == t && n.DestCurrencyId == i); return r !== undefined ? n * r.Amount : (r = AllMoneyConverts.find(n => n.BaseCurrencyId == i && n.DestCurrencyId == t), n * (1 / r.Amount)) } return n } function calculateTotalReceived(n) { let f = $("#useDollar").text(); TotalReceived = 0; let i = 11; for (let n = 0; n < ReceivedAmount.length; n++)if (ReceivedAmount[n].AmountCurrencyId === i) TotalReceived = TotalReceived + parseFloat(ReceivedAmount[n].Amount); else { let t = AllMoneyConverts.find(t => t.BaseCurrencyId == ReceivedAmount[n].AmountCurrencyId && t.DestCurrencyId == i); t === null || t === undefined ? (t = AllMoneyConverts.find(t => t.BaseCurrencyId == i && t.DestCurrencyId == ReceivedAmount[n].AmountCurrencyId), TotalReceived = TotalReceived + parseFloat(ReceivedAmount[n].Amount) * (1 / t.Amount)) : TotalReceived = TotalReceived + parseFloat(ReceivedAmount[n].Amount) * t.Amount } let t = parseFloat(n) - TotalReceived; $("#RemainedAmount").val(t.toLocaleString()); $("#RemainedAmountDollar").val(calculateMoneyConvert(t, 11, 12).toFixed(2).toLocaleString() + " $"); let r = $("#PatientReceptionReceivedAmount").data("kendoNumericTextBox"); r.value(t); let u = $("#PatientReceptionReceivedAmountDollar").data("kendoNumericTextBox"); u.value(calculateMoneyConvert(t, 11, 12)); $("#TotalReceived").val(TotalReceived.toLocaleString()); $("#TotalReceivedDollar").val(calculateMoneyConvert(TotalReceived, 11, 12).toFixed(2).toLocaleString() + " $") } function changeMoneyConvert() { let n = $("#MoneyConvertAmount").data("kendoNumericTextBox").value(); if (n === 0 || n === "" || n === null) { bootbox.alert({ message: "please Insert Amount", className: "bootbox-class" }); return } var t = $(':input:hidden[name*="RequestVerificationToken"]'); $.ajax({ type: "Post", data: { __RequestVerificationToken: t.attr("value"), BaseCurrencyId: 12, DestCurrencyId: 11, Amount: n }, url: "/MoneyConvert/AddOrUpdate", success: function () { AllMoneyConverts = []; AllMoneyConverts.push({ BaseCurrencyId: 12, DestCurrencyId: 11, Amount: n / 100, Exist: !1 }); changeDiscountAmount() } }) } function AddMoneyConvertModal() { $(".loader").removeClass("hidden"); $("#MoneyConvertModal").modal("toggle"); $("#MoneyConvertModal-body").load("/MoneyConvert/AddNewModal", function () { $(".loader").fadeIn("slow"); $(".loader").addClass("hidden"); $("#Amount").data("kendoNumericTextBox").focus() }) } function addNewMoneyConvert() { let n = $("#Amount").data("kendoNumericTextBox").value(); if (n === 0 || n === "" || n === null) { bootbox.alert({ message: "please Insert Amount", className: "bootbox-class" }); return } var t = $(':input:hidden[name*="RequestVerificationToken"]'); $.ajax({ type: "Post", data: { __RequestVerificationToken: t.attr("value"), BaseCurrencyId: 12, DestCurrencyId: 11, Amount: n }, url: "/MoneyConvert/AddOrUpdate", success: function () { AllMoneyConverts = []; AllMoneyConverts.push({ BaseCurrencyId: 12, DestCurrencyId: 11, Amount: n / 100, Exist: !1 }); $("#MoneyConvertModal").modal("toggle"); $("#MoneyConvertModal-body").empty() } }) } function GoToCustomReception(n) { let i = parseInt($("#InvoiceNum").val()), r = parseInt($("#LastInvoiceNum").val()), f = parseInt($("#FirstInvoiceNum").val()), t = 0; if (n === "Next") { if (i >= r) { bootbox.dialog({ message: "<h5 class = 'MyFont-Roboto-header'> This is a Last Reception <\/h5>", className: "bootbox-class MyFont-Roboto-header", size: "small" }); window.setTimeout(function () { bootbox.hideAll() }, 2e3); return } t = i + 1; getReception(t) } else if (n === "Pre") { if (i === "1") { bootbox.dialog({ message: "<h5 class = 'MyFont-Roboto-header'> This is a First Reception <\/h5>", className: "bootbox-class MyFont-Roboto-header", size: "small" }); window.setTimeout(function () { bootbox.hideAll() }, 2e3); return } t = i - 1; getReception(t) } else if (n === "Last") { if (i === r) { bootbox.dialog({ message: "<h5 class = 'MyFont-Roboto-header'> This is a Last Reception <\/h5>", className: "bootbox-class MyFont-Roboto-header", size: "small" }); window.setTimeout(function () { bootbox.hideAll() }, 2e3); return } t = r; getReception(t) } else if (n === "First") { if (i === f) { bootbox.dialog({ message: "<h5 class = 'MyFont-Roboto-header'> This is Today's First Reception <\/h5>", className: "bootbox-class MyFont-Roboto-header", size: "small" }); window.setTimeout(function () { bootbox.hideAll() }, 2e3); return } t = f; getReception(t) } let u = $("#ReceptionNumber").val(); if (u !== null && u !== undefined && u !== "") { if (t = parseInt($("#ReceptionNumber").val()), t >= r) { bootbox.alert({ message: "this reception number not exist", className: "bootbox-class MyFont-Roboto-header" }); return } isNaN(t) || getReception(t) } } function getReception(n) { bootbox.dialog({ message: "<h5 class = 'MyFont-Roboto-header'> You Dont Save This Reception Do You Want Save It? <\/h5>", className: "bootbox-class MyFont-Roboto-header", size: "medium", buttons: { cancel: { label: "No", className: "MyFont-Roboto-grid", callback: function () { $(".loader").removeClass("hidden"); $(".page-content").load("/PatientReceptionAnalysis/GetPatientReception?InvoiceNum=" + n, function () { $(".loader").fadeIn("slow"); $(".loader").addClass("hidden") }) } }, ok: { label: "Yes", className: "MyFont-Roboto-grid", callback: function () { let t = AggregateData(); if (t) { $(".loader").removeClass("hidden"); var i = $(':input:hidden[name*="RequestVerificationToken"]'); $.ajax({ type: "Post", url: "/PatientReception/AddOrUpdate", data: { __RequestVerificationToken: i.attr("value"), patientReception: patientReception }, success: function (t) { t !== 0 && $(".page-content").load("/PatientReceptionAnalysis/GetPatientReception?InvoiceNum=" + n, function () { $(".loader").fadeIn("slow"); $(".loader").addClass("hidden") }) } }) } bodyPadding() } } } }) } function ReserveInsertAge() { var r = parseInt($("#Year").val()), i = parseInt($("#Month").val()), u, n; ($("#Month").val() === "" || i === undefined) && (i = 0); ($("#Year").val() === "" || r === undefined) && (r = 0); i > 11 && (i = 11, $("#Month").val("11")); u = new Date; n = u; n.setFullYear(n.getFullYear() - r); n.setMonth(n.getMonth() - i); let t = n.getMonth() + 1; t.toString() !== "10" && t.toString() !== "11" && t.toString() !== "12" && (t = "0" + t.toString()); $("#DateOfBirth").val("01/" + t + "/" + n.getFullYear()) } function GetConvert(n, t, i) { $.ajax({ type: "Post", url: "/MoneyConvert/GetConvertAmount", data: { BaseCurrencyId: n, DestCurrencyId: t }, success: function (r) { if (r !== -1 && r !== 0) AllMoneyConverts.push({ BaseCurrencyId: n, DestCurrencyId: t, Amount: r, Exist: !1 }), calculateTotalReceived(i); else $(".loader").removeClass("hidden"), $("#AllMoneyConvertModal").modal("toggle"), $("#AllMoneyConvertModal-body").load("/MoneyConvert/AddNewModal", function () { $(".loader").fadeIn("slow"); $(".loader").addClass("hidden") }) } }) } function addAllNewMoneyConvert() { let n = $("#Price").data("kendoNumericTextBox").value(); if (n === 0 || n === "" || n === null) { bootbox.alert({ message: "please Insert Amount", className: "bootbox-class" }); return } var t = $(':input:hidden[name*="RequestVerificationToken"]'); $.ajax({ type: "Post", data: { __RequestVerificationToken: t.attr("value"), BaseCurrencyId: 12, DestCurrencyId: 11, Amount: n }, url: "/MoneyConvert/AddOrUpdate", success: function () { AllMoneyConverts.push({ BaseCurrencyId: 12, DestCurrencyId: 11, Amount: n, Exist: !1 }); calculateTotalReceived($("#totalAmountWithDiscount").val()); $("#AllMoneyConvertModal").modal("toggle"); $("#AllMoneyConvertModal-body").empty() } }) } function bodyPadding() { $("body").addClass("body-padding") } function Exit() { $(".page-content").load("/PatientReception/Form", function () { $(".loader").fadeIn("slow"); $(".loader").addClass("hidden") }) } function OkAndExit() { let n = AggregateData(); if (n) { $(".loader").removeClass("hidden"); var t = $(':input:hidden[name*="RequestVerificationToken"]'); $.ajax({ type: "Post", url: "/PatientReception/AddOrUpdate", data: { __RequestVerificationToken: t.attr("value"), patientReception: patientReception }, success: function (n) { n !== 0 && $(".page-content").load("/PatientReception/Form", function () { $(".loader").fadeIn("slow"); $(".loader").addClass("hidden") }) } }) } bodyPadding() } function OkAndNew() { let n = AggregateData(); if (n) { $(".loader").removeClass("hidden"); var t = $(':input:hidden[name*="RequestVerificationToken"]'); $.ajax({ type: "Post", url: "/PatientReception/AddOrUpdate", data: { __RequestVerificationToken: t.attr("value"), patientReception: patientReception }, success: function (n) { n !== 0 && $(".page-content").load("/PatientReceptionAnalysis/Form", function () { $(".loader").fadeIn("slow"); $(".loader").addClass("hidden") }) } }) } bodyPadding() } function AggregateData() { let r = $("#Name2").val().replace(/ /g, ""); if (r === "") return bootbox.dialog({ message: "<h5 class='MyFont-Roboto-header'> Please Fill Patinet Name <\/h5>", className: "bootbox-class MyFont-Roboto-header", size: "small" }), window.setTimeout(function () { bootbox.hideAll(); $("#Name2").focus() }, 2e3), bodyPadding(), !1; let t = $("#DateOfBirth").data("kendoDatePicker").value(), u = $("#useDollar").text(), i = []; if (u === "false") { let n = $("#totalAmountWithDiscount").val(), t = n.replace(",", ""); i.push({ Amount: t, AmountCurrencyId: 11 }) } else for (let n = 0; n < ReceivedAmount.length; n++)ReceivedAmount[n].New && i.push({ Amount: ReceivedAmount[n].Amount, AmountCurrencyId: ReceivedAmount[n].AmountCurrencyId }); Patient = { Guid: $("#PatientId").val(), Name: $("#Name2").val(), GenderId: $("#GenderId").val(), PhoneNumber: $("#PhoneNumber").val(), AddressId: $("#AddressId").val(), DateOfBirthDay: t.getDate(), DateOfBirthMonth: t.getMonth() + 1, DateOfBirthYear: t.getFullYear() }; let f = { Name: $("#Doctor").val(), SpecialityId: $("#Speciality").val(), Guid: $("#DoctorId").val() }, e = $("#ReceptionClinicSection-Id").text(); patientReception = { Guid: $("#Guid").val(), CreatedUserId: $("#CreatedUserId").val(), CreatedDate: $("#CreatedDate").val(), PatientId: $("#PatientId").val(), Patient: Patient, RadiologyDoctorName: $("#RadiologyDoctor").val(), RadiologyDoctorId: $("#RadiologyDoctorId").val(), DoctorId: $("#DoctorId").val(), Doctor: f, ReceptionDate: $("#ReceptionDate").val(), Discount: $("#DiscountAmount").val(), DiscountCurrencyId: 11, Description: $("#Explanation").val(), ReceptionNum: $("#ReceptionNum").val(), BaseCurrencyId: 11, ClinicSectionId: $("#ClinicSectionId").val(), Barcode: $("#Barcode").val(), PatientReceptionReceiveds: i, HospitalReception: hospitalReception, ReceptionClinicSectionId: e }; var n = []; for (let t = 0; t < selectedItems.length; t++)selectedItems[t].Type === "Analysis" ? n.push({ AnalysisId: selectedItems[t].Guid, Amount: parseFloat(selectedItems[t].Price), AmountCurrencyId: 11, Discount: parseFloat(selectedItems[t].Discount) }) : selectedItems[t].Type === "Group Analysis" ? n.push({ GroupAnalysisId: selectedItems[t].Guid, Amount: parseFloat(selectedItems[t].Price), AmountCurrencyId: 11, Discount: parseFloat(selectedItems[t].Discount) }) : selectedItems[t].Type === "Analysis Item" && n.push({ AnalysisItemId: selectedItems[t].Guid, Amount: parseFloat(selectedItems[t].Price), AmountCurrencyId: 11, Discount: parseFloat(selectedItems[t].Discount) }); return patientReception.PatientReceptionAnalyses = n, !0 } function ConvertPrices() { let n = 11, t = n.value(); $.ajax({ type: "Post", url: "/MoneyConvert/GetConvertAmount", data: { BaseCurrencyId: previousCurrencyId, DestCurrencyId: t }, success: function (i) { if (i !== -1 && i !== 0) { previousCurrencyId = t; for (let t = 0; t < AllItems.length; t++)n.text() === "IQD" ? (AllItems[t].Price = Math.round(AllItems[t].Price * i), AllItems[t].Discount = Math.round(AllItems[t].Discount * i)) : (AllItems[t].Price = AllItems[t].Price * i, AllItems[t].Discount = AllItems[t].Discount * i); for (let t = 0; t < selectedItems.length; t++)if (n.text() === "IQD") { selectedItems[t].Price = Math.round(selectedItems[t].Price * i); selectedItems[t].Discount = Math.round(selectedItems[t].Discount * i); selectedItems[t].Total = Math.round(selectedItems[t].Total * i); let n = $("#DiscountAmount").data("kendoNumericTextBox"); n.value(Math.round(parseFloat($("#DiscountAmount").val()) * i)) } else { selectedItems[t].Price = selectedItems[t].Price * i; selectedItems[t].Discount = selectedItems[t].Discount * i; selectedItems[t].Total = selectedItems[t].Total * i; let n = $("#DiscountAmount").data("kendoNumericTextBox"); n.value(parseFloat($("#DiscountAmount").val()) * i) } createSelectedGrid(); createAnalysisGrid(); createAnalysisListItemsGrid(); createGroupAnalysisGrid() } else $(".loader").removeClass("hidden"), $("#MoneyConvertModal").modal("toggle"), $("#MoneyConvertModal-body").load("/MoneyConvert/AddNewModal", function () { $(".loader").fadeIn("slow"); $(".loader").addClass("hidden"); $("#BaseCurrencyId1").data("kendoDropDownList").value(previousCurrencyId); $("#DestCurrencyId1").data("kendoDropDownList").value(t) }) } }); n.text() === "IQD" ? format = "n" + dinarDecimal : n.text() === "$" ? format = "n" + dollarDecimal : n.text() === "€" ? format = "n" + euroDecimal : n.text() === "£" && (format = "n" + pondDecimal); let i = $("#DiscountAmount").data("kendoNumericTextBox"); i.setOptions({ format: format }) } function closeMoneyConvertModal() { let n = $("#Amount1").data("kendoNumericTextBox").value(); if (n === 0 || n === "" || n === null) 11..value(previousCurrencyId); $("#MoneyConvertModal").modal("toggle"); $("#MoneyConvertModal-body").empty() } function closeAllMoneyConvertModal() { $("#AllMoneyConvertModal").modal("toggle"); $("#AllMoneyConvertModal-body").empty() } function InsertTotalAmountWithDiscountToReceived() { let i = new Date, n = i.getDate(), t = i.getMonth() + 1, f = i.getFullYear(); n < 10 && (n = "0" + n); t < 10 && (t = "0" + t); let e = n + "/" + t + "/" + f, r; r = ReceivedAmount.length === 0 ? 1 : ReceivedAmount.length + 1; let o = $("#RemainedAmount").val().replace(",", ""), u = parseFloat(o); u !== 0 && (ReceivedAmount.push({ Amount: u, AmountCurrencyId: 11, CurrencyType: 11..text(), New: !0, Date: e, Index: r, CanDelete: !0 }), changeDiscountAmount()) } function AddNewReceived() { $(".loader").removeClass("hidden"); $("#PatientReceptionReceivedModal").modal("toggle"); $("#PatientReceptionReceivedModal-body").load("/PatientReceptionReceived/AddNewModal", function () { $(".loader").fadeIn("slow"); $(".loader").addClass("hidden") }) } function addNewPatientReceptionReceived() { let r = new Date, t = r.getDate(), i = r.getMonth() + 1, e = r.getFullYear(); t < 10 && (t = "0" + t); i < 10 && (i = "0" + i); let o = t + "/" + i + "/" + e, u; u = ReceivedAmount.length === 0 ? 1 : ReceivedAmount.length + 1; let n = parseFloat($("#PatientReceptionReceivedAmount").val()); if (n !== 0 && n !== null && n !== undefined && !Number.isNaN(n)) { ReceivedAmount.push({ Amount: n, AmountCurrencyId: 11, CurrencyType: "IQD", New: !0, Date: o, Index: u, CanDelete: !0 }); changeDiscountAmount(); let f = $("#PatientReceptionReceivedAmount").data("kendoNumericTextBox"); f.focus(); f.value(""); createPatientReceptionReceivedDetailGrid() } } function addNewPatientReceptionReceivedDollar() { let r = new Date, t = r.getDate(), i = r.getMonth() + 1, e = r.getFullYear(); t < 10 && (t = "0" + t); i < 10 && (i = "0" + i); let o = t + "/" + i + "/" + e, u; u = ReceivedAmount.length === 0 ? 1 : ReceivedAmount.length + 1; let n = parseFloat($("#PatientReceptionReceivedAmountDollar").val()); if (n !== 0 && n !== null && n !== undefined && !Number.isNaN(n)) { ReceivedAmount.push({ Amount: n, AmountCurrencyId: 12, CurrencyType: "$", New: !0, Date: o, Index: u, CanDelete: !0 }); changeDiscountAmount(); let f = $("#PatientReceptionReceivedAmountDollar").data("kendoNumericTextBox"); f.focus(); f.value(""); createPatientReceptionReceivedDetailGrid() } } function ShowReceivedDetails() { $("#PatientReceptionReceivedDetailedModal").modal("toggle"); createPatientReceptionReceivedDetailGrid() } function createPatientReceptionReceivedDetailGrid() { RTL === "True" ? $("#PatientReceptionReceivedDetailGrid").kendoGrid({ dataSource: { data: ReceivedAmount, schema: { model: { fields: { receivedDate: { type: "string" }, receivedAmount: { type: "numeric" }, receivedCurrencyType: { type: "string" } } } }, pageSize: 10 }, sortable: !0, pageable: { input: !0, numeric: !1 }, columns: [{ template: "<strong>  #: Index #  <\/strong>", width: "50px" }, { field: "receivedDate", title: DateTranslated, template: "<strong   >  #: Date #  <\/strong>", headerAttributes: { style: "text-align: center" } }, { field: "receivedAmount", title: AmountTranslated, template: "<strong   >  #: Amount #  <\/strong>", headerAttributes: { style: "text-align: center" } }, { field: "receivedCurrencyType", title: TypeTranslated, template: "<strong >  #: CurrencyType #  <\/strong>", headerAttributes: { style: "text-align: center" } }, { template: "# if (!CanDelete) { # <i> <\/i>#}else{#<i class='fa fa-trash bigger-120 red'   > <\/i># } #", width: "50px", attributes: { onclick: "removeFromPatientReceptionReceivedDetailGrid(this)", "data-Index": "#: Index #", style: "cursor:pointer" } }], selectable: "row" }) : $("#PatientReceptionReceivedDetailGrid").kendoGrid({ dataSource: { data: ReceivedAmount, schema: { model: { fields: { receivedDate: { type: "string" }, receivedAmount: { type: "numeric" }, receivedCurrencyType: { type: "string" } } } }, pageSize: 10 }, sortable: !0, pageable: { input: !0, numeric: !1 }, columns: [{ template: "# if (!CanDelete) { # <i> <\/i>#}else{#<i class='fa fa-trash bigger-120 red'   > <\/i># } #", width: "50px", attributes: { onclick: "removeFromPatientReceptionReceivedDetailGrid(this)", "data-Index": "#: Index #", style: "cursor:pointer" } }, { field: "receivedCurrencyType", title: TypeTranslated, template: "<strong >  #: CurrencyType #  <\/strong>", headerAttributes: { style: "text-align: center" } }, { field: "receivedAmount", title: AmountTranslated, template: "<strong   >  #: Amount #  <\/strong>", headerAttributes: { style: "text-align: center" } }, { field: "receivedDate", title: DateTranslated, template: "<strong   >  #: Date #  <\/strong>", headerAttributes: { style: "text-align: center" } }, { template: "<strong>  #: Index #  <\/strong>", width: "50px" }], selectable: "row" }) } function removeFromPatientReceptionReceivedDetailGrid(n) { let r = $(n).attr("data-index"), t = ReceivedAmount.findIndex(n => n.Index == r), i = ReceivedAmount[t].Guid; ReceivedAmount[t].CanDelete && bootbox.confirm("Do you Want To Delete This Record?", function (n) { if (n) i !== null && i !== undefined ? $.ajax({ type: "Post", data: { Id: i }, url: "/PatientReceptionReceived/Remove", success: function () { t > -1 && (ReceivedAmount.splice(t, 1), createPatientReceptionReceivedDetailGrid()); changeDiscountAmount() } }) : (t > -1 && (ReceivedAmount.splice(t, 1), createPatientReceptionReceivedDetailGrid()), changeDiscountAmount()); else return }) } function closePatientReceptionReceivedModal() { $("#PatientReceptionReceivedModal").modal("toggle"); $("#PatientReceptionReceivedModal-body").empty() } function closePatientReceptionReceivedDetailedModal() { $("#PatientReceptionReceivedDetailedModal").modal("toggle") } function ShowDescription() { bootbox.confirm({ title: "Description", message: " <textarea id='DescriptionTextBox' style='width:40vw' ><\/textarea>", className: "bootbox-class MyFont-Roboto-header", size: "lg", callback: function (n) { if (n) $("#Explanation").val($("#DescriptionTextBox").val()); else return } }); $("#DescriptionTextBox").kendoTextArea({ rows: 2, maxLength: 2e3, placeholder: "your Text..." }); ($("#Explanation").val() !== null || $("#Explanation").val() !== "" || $("#Explanation").val() !== undefined) && $("#DescriptionTextBox").val($("#Explanation").val()) } var Analysis, AnalysisItems, groupAnalysis, decimalAmount, selectedAnalysis, Address, hospitalReception, patientReception, Patient; let addressAuto, SpeciallityDropDown, nameAuto, doctorAuto, radiologyDoctorAuto; var selectedItems = [], AllItems = [], previousCurrencyId, TotalReceived, ReceivedAmount = [], dinarDecimal, dollarDecimal, euroDecimal, pondDecimal, AllMoneyConverts = [], TotalTranslated, DiscountTranslated, PriceTranslated, CodeTranslated, TypeTranslated, NameTranslated, AmountTranslated, DateTranslated, baseCurrencyId, gridHieght = 180, printed = !1; let firstTime = !0; hospitalReception = !1; $(document).ready(function () { CreateTelerikComponents(); let n = $("#Reception-Id").text(), t = $("#PatientId-Id").text(), i = $("#Doctor-Id").text(), r = $("#ReceptionClinicSectionDescription-Id").text(); n !== "" && n !== null ? (setTimeout(() => { $(".loader").removeClass("hidden") }), $.ajax({ type: "Post", data: { ReceptionId: n }, url: "/PatientReceptionAnalysis/GetReception", success: function (n) { SetReceptionAmounts(n); $(".loader").fadeIn("slow"); $(".loader").addClass("hidden") } }), $.ajax({ type: "Post", data: { ReceptionId: n }, url: "/Reception/GetReceptionDoctor", success: function (n) { var i, r, u, t; if (n !== null && n !== "" && n !== 0) { for (i in n) if (n[i].DoctorRoleName == "RadiologyDoctor") { r = n[i]; $("#RadiologyDoctorId").val(r.DoctorId); $("#RadiologyDoctor").val(r.Doctor.UserName); break } for (u in n) if (n[u].DoctorRoleName == "DispatcherDoctor") { t = n[u]; $("#DoctorId").val(t.DoctorId); $("#Doctor").val(t.Doctor.UserName); let i = $("#Speciality").data("kendoDropDownList"); i.value(t.Doctor.SpecialityId); break } } } }), $.ajax({ type: "Post", data: { ReceptionId: n }, url: "/PatientReceptionAnalysis/GetPatientReceptionAnalysisByReceptionId", success: function (n) { SetReceptionSelectedAnalysis(n); $(".loader").fadeIn("slow"); $(".loader").addClass("hidden") } })) : t !== "" && t !== null ? ($("#ReceptionClinicSectionDescriptionParent").removeClass("hidden"), $("#ReceptionClinicSectionDescription").val(r), hospitalReception = !0, $.ajax({ type: "Post", data: { PatientId: t }, url: "/Patient/GetPatientById", success: function (n) { SetPatientAmounts(n) } }), i !== "" && i !== null && $.ajax({ type: "Post", data: { DoctorId: i }, url: "/Doctor/GetDoctorById", success: function (n) { SetDoctorAmounts(n) } }), $.ajax({ type: "Post", url: "/PatientReception/GetLatestReceptionNum", success: function (n) { $("#ReceptionNum").val(n); $("#ReceptionNumlbl").text(n) } })) : ($.ajax({ type: "Post", url: "/PatientReception/GetLatestReceptionNum", success: function (n) { $("#ReceptionNum").val(n); $("#ReceptionNumlbl").text(n) } }), setTimeout(function () { let n = $("#DateOfBirth").data("kendoDatePicker"); n.open(); n.close(); let t = $("#DateOfBirth").attr("aria-owns"), i = $("#" + t + " .k-footer a").click(); $("#Name2").focus() })); $.ajax({ type: "Post", data: { settingName: "UseDollar" }, url: "/ClinicSection/GetClinicSectionSettingValueBySettingName", success: function (n) { if ($("#useDollar").text(n), n === "true") { let n = $(".dollarclass"); n.addClass("col-md-4"); n.removeClass("col-md-8"); let t = $(".classHidden"); if (t.removeClass("hidden"), AllMoneyConverts[0] === null) AddMoneyConvertModal(), MoneyConvertAmount.value(0); else { let n = AllMoneyConverts[0].Amount * 100; MoneyConvertAmount.value(n) } } } }); $.ajax({ type: "Post", data: { BaseInfoName: "DoctorSpeciality" }, url: "/BaseInfo/GetBaseInfoTypeByName", success: function (n) { $("#Speciallity").attr("data-Value", n) } }); getTranslatedWords(); KeyPressAndFocusConfigs(); createSelectedGrid(); createGroupAnalysisNameAutoComplete(); createGroupAnalysisCodeAutoComplete(); createAnalysisNameAutoComplete(); createAnalysisCodeAutoComplete(); createAnalysisItemNameAutoComplete(); createAnalysisItemCodeAutoComplete(); createAllNameAutoComplete(); createAllCodeAutoComplete(); createPatientReceptionReceivedDetailGrid() }); let first = !0; window.onafterprint = function () { $("#Exit").focus() };
