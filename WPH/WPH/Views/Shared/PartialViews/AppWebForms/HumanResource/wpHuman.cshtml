@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject WPH.Resources.SharedViewLocalizer Localizer

@{
    string font = "", pull = "", pull_rev = "", direction = "", flex = "";
    if (HttpContextAccessor.HttpContext.Session.GetString("culture") == "en")
    {
        font = " MyFont-Roboto-grid ";
        pull = " pull-left ";
        pull_rev = " pull-right ";
        direction = " ";
        flex = " k-flex-row ";
        <h3 id="newHumanText" class="hidden">@Localizer["New"] @Localizer["HumanResource"]</h3>
        <h3 id="newHumanSalaryText" class="hidden">@Localizer["New"] @Localizer["HumanResourceSalary"]</h3>
    }
    else
    {
        font = " MyFont-Sarchia-grid ";
        pull = " pull-right ";
        pull_rev = " pull-left ";
        direction = " direction:rtl; ";
        flex = " k-flex-row-reverse ";
        <h3 id="newHumanText" class="hidden">@Localizer["HumanResource"] @Localizer["New"]</h3>
        <h3 id="newHumanSalaryText" class="hidden">@Localizer["HumanResourceSalary"] @Localizer["New"]</h3>
    }


    <h3 id="editHumanText" class="hidden">@Localizer["Edit"] @Localizer["HumanResource"]</h3>
    <h3 id="editHumanSalaryText" class="hidden">@Localizer["Edit"] @Localizer["HumanResourceSalary"]</h3>
}

<div id="HumanResourceDirection" class="row k-d-flex @flex  k-justify-content-around ">
    <div class="col-lg-5 col-md-5 col-xs-11">
        <!-- block 1 Begin for HumanResource -->
        <div class="row page-header ">

            <div class="@pull ">
                <h1 class="@font" style="font-size: 2.3rem">
                    @Localizer["HumanResource"]
                </h1>

            </div>

            @if ((bool)ViewBag.AccessNewHumanResource)
            {
                <div class="@font @pull " style="margin:0 2rem;transform:translateY(-10%)">
                    <a class="btn btn-danger" onClick="AddHuman(this)" href="#" style="padding:0.2rem">
                        @Localizer["New"]
                        <i class="ace-icon glyphicon  glyphicon-plus align-top bigger-125"></i>
                    </a>
                </div>
            }

            @if ((bool)(ViewBag.AccessPrintSalaryReport ?? false))
            {
                <div class="@pull_rev" style="margin:0 2rem;transform:translateY(-10%)">
                    <a class="" onClick="ShowSalaryReport()" style="padding:0.2rem;cursor:pointer;font-size: 20px;">
                        <span>
                            <i class="ace-icon fa fa-print align-top bigger-125"></i>
                        </span>
                    </a>
                </div>
            }

            <div class="@pull_rev" style="margin:0 2rem;transform:translateY(-10%)">
                <a class="" onClick="RefreshAllGrids()" style="padding:0.2rem;cursor:pointer;font-size: 20px;">
                    <span>
                        <i class="ace-icon fa fa-refresh align-top bigger-125"></i>
                    </span>
                </a>
            </div>

        </div><!-- /.page-header -->
        <!-- Begin Modal -->
        <div id="AddHumanModal" class="modal fade @font" data-backdrop="static" data-keyboard="false" style="@direction">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" onclick="closeAddHumanModal()" aria-hidden="true">&times;</button>
                        <h3 id="AddHumanModal-header" class="smaller lighter blue no-margin @font">
                        </h3>
                    </div>
                    <div id="AddHumanResourceModal-body" style="width:40vw" class="modal-body @font">
                    </div>

                    <div id="ERROR_SomeThingWentWrong" class="red label-white middle hidden" style="height:40px;display:block">
                        <i class="ace-icon fa fa-stop bigger-120"></i>
                        @Localizer["ERROR_InsertWrong"]
                    </div>

                    <div id="ERROR_Data" class="red label-white middle hidden" style="height:40px;display:block">
                        <i class="ace-icon fa fa-stop bigger-120"></i>
                        @Localizer["ERROR_DataNotValid"]
                    </div>

                    <div class="modal-footer">

                        @(Html.Kendo().Button()
                        .Name("btn-addHuman-accept")
                        .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "k-primary pull-right", onclick = "addNewHuman()" })
                        .Content(Localizer["Ok"]))
                        @(Html.Kendo().Button()
                        .Name("btn-addHuman-close")
                        .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right", onclick = "closeAddHumanModal()" })
                        .Content(Localizer["Exit"]))

                    </div>
                </div> @*.modal-content*@
            </div> @*.modal-dialog*@
        </div>

        <!-- End Modal -->
        <!--Begin Search BeginEnd Date Human -->
        <input class="hidden" type="text" id="periodBeginEndDate-id" data-Value="@ViewBag.PeriodDateBeginEnd" />
        <input class="hidden" type="text" id="human_search" data-value="" />
        <div id="searchHuman" class="row"></div>
        <h1 id="FromToBeginEnd" class="hidden">@ViewBag.FromToIdBeginEnd</h1>

        <script>
            function GetPeriodAndBeginEndDate() {
                var periodBeginEndId = $('#periodBeginEndDate-id').attr('data-Value');
                var human_search = $('#human_search').attr('data-value');

                var fromDate = $("#KendoFromDateBeginEnd").data("kendoDatePicker");
                var toDate = $("#KendoDateToBeginEnd").data("kendoDatePicker");

                if (fromDate != undefined) {
                    var frDate = fromDate.value();
                }
                if (toDate != undefined) {
                    var tDate = toDate.value();
                }

                if (fromDate == undefined) {
                    frDate = new Date();
                }
                if (toDate == undefined) {
                    tDate = new Date();
                }

                let frMonth = frDate.getMonth() + 1;
                let frDay = frDate.getDate();
                let toMonth = tDate.getMonth() + 1;
                let toDay = tDate.getDate();

                if (frMonth < 10)
                    frMonth = "0" + frMonth;
                if (toMonth < 10)
                    toMonth = "0" + toMonth;
                if (frDay < 10)
                    frDay = "0" + frDay;
                if (toDay < 10)
                    toDay = "0" + toDay;

                let fromb = frDate.getFullYear() + "-" + frMonth + "-" + frDay;
                let toob = tDate.getFullYear() + "-" + toMonth + "-" + toDay;

                return {
                    periodId: periodBeginEndId,
                    dateFrom: fromb,
                    dateTo: toob,
                    humanId: human_search
                };

            }
        </script>
        <!--End Search BeginEnd Date Human -->
        <!-- Begin Grig -->
        <div class="row Grid-Content @font">
            @await Html.PartialAsync("~/Views/Shared/PartialViews/AppWebForms/HumanResource/dgHumanGrid.cshtml")
        </div>
    </div>

    <div class="clearfix"></div>
    <div class="col-lg-6 col-md-6 col-xs-11">
        <!-- block 2 Begin for HumanResourceSalary -->
        <div class=" row page-header ">

            <div class="@pull">
                <h1 class="@font" style="font-size: 2.3rem">
                    @Localizer["HumanResourceSalary"]
                </h1>

            </div>
            @if ((bool)ViewBag.AccessNewHumanResourceSalary)
            {
                <div class="@font @pull " style="margin:0 2rem;transform:translateY(-10%)">
                    <a class="btn btn-danger" onClick="AddHumanSalary(this)" href="#" style="padding:0.2rem">
                        @Localizer["New"]
                        <i class="ace-icon glyphicon  glyphicon-plus align-top bigger-125"></i>
                    </a>
                </div>
            }


        </div><!-- /.page-header -->
        <!-- Begin Modal -->
        <div id="AddHumanSalaryModal" class="modal fade @font" data-backdrop="static" data-keyboard="false" style="@direction">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" onclick="closeAddHumanSalaryModal()" aria-hidden="true">&times;</button>
                        <h3 id="AddHumanSalaryModal-header" class="smaller lighter blue no-margin @font">
                        </h3>
                    </div>
                    <div id="AddHumanSalaryModal-body" style="width:40vw" class="modal-body @font">
                    </div>

                    <div id="ERROR_SomeThingWentWrong" class="red label-white middle hidden" style="height:40px;display:block">
                        <i class="ace-icon fa fa-stop bigger-120"></i>
                        @Localizer["ERROR_InsertWrong"]
                    </div>

                    <div id="ERROR_Data" class="red label-white middle hidden" style="height:40px;display:block">
                        <i class="ace-icon fa fa-stop bigger-120"></i>
                        @Localizer["ERROR_DataNotValid"]
                    </div>

                    <div id="ERROR_Money" class="red label-white middle hidden" style="height:40px;display:block">
                        <i class="ace-icon fa fa-stop bigger-120"></i>
                        @Localizer["ERROR_Money"]
                    </div>

                    <div class="modal-footer">

                        @(Html.Kendo().Button()
                        .Name("btn-addHumanSalary-accept")
                        .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "k-primary pull-right", onclick = "addNewHumanSalary()" })
                        .Content(Localizer["Ok"]))
                        @(Html.Kendo().Button()
                        .Name("btn-addHumanSalary-close")
                        .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right", onclick = "closeAddHumanSalaryModal()" })
                        .Content(Localizer["Exit"]))

                    </div>
                </div> @*.modal-content*@
            </div> @*.modal-dialog*@
        </div>

        <!-- Begin Modal -->
        <!-- Begin Search -->
        <input class="hidden" type="text" id="search-human-guid" data-Value="@ViewBag.HumanGuid" />
        <input class="hidden" type="text" id="periodCreateDate-id" data-Value="@ViewBag.PeriodDate" />
        <div id="searchHumanSalary" class="row">
        </div>
        <h1 id="FromTo" class="hidden">@ViewBag.FromToId</h1>


        <script>
            function GetPeriodAndGuidAndCreatDate() {
                var searchHumanId = $('#search-human-guid').attr('data-Value');
                var periodCreatId = $('#periodCreateDate-id').attr('data-Value');

                var fromDate = $("#KendoFromDateCreate").data("kendoDatePicker");
                var toDate = $("#KendoDateToCreate").data("kendoDatePicker");

                if (fromDate != undefined) {
                    var frDate = fromDate.value();
                }
                if (toDate != undefined) {
                    var tDate = toDate.value();
                }

                if (fromDate == undefined) {
                    frDate = new Date();
                }
                if (toDate == undefined) {
                    tDate = new Date();
                }

                let frMonth = frDate.getMonth() + 1;
                let frDay = frDate.getDate();
                let toMonth = tDate.getMonth() + 1;
                let toDay = tDate.getDate();

                if (frMonth < 10)
                    frMonth = "0" + frMonth;
                if (toMonth < 10)
                    toMonth = "0" + toMonth;
                if (frDay < 10)
                    frDay = "0" + frDay;
                if (toDay < 10)
                    toDay = "0" + toDay;

                let from = frDate.getFullYear() + "-" + frMonth + "-" + frDay;
                let too = tDate.getFullYear() + "-" + toMonth + "-" + toDay;

                return {
                    guid: searchHumanId,
                    periodId: periodCreatId,
                    dateFrom: from,
                    dateTo: too
                };


            }
        </script>
        <!-- End Search -->
        <!-- Begin Grig -->
        <div class="row Grid-Content @font">
            @await Html.PartialAsync("~/Views/Shared/PartialViews/AppWebForms/HumanResource/dgHumanSalaryGrid.cshtml")

        </div>

        <!-- End Grid -->
    </div><!-- block 2 End for HumanResourceSalary -->



</div>


<div class="col-sm-12" style="border-top: 1px solid #eee;margin: 3% 0px;padding: 1% 1%;">

    @await Html.PartialAsync("~/Views/Shared/PartialViews/AppWebForms/UserManagment/wpUserManagmentForm.cshtml", true)

</div>
<!-- Delete For Salary  -->
<div id="my-modal-delete-Salary" class="modal fade bd-example-modal-lg @font" data-backdrop="static" data-keyboard="false" style="@direction">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="widget-header" style="padding:1rem">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h3 class='smaller @font'>
                    <i class='ace-icon fa fa-exclamation-triangle red '></i>@Localizer["DeleteRecordHeader"]
                </h3>
            </div>

            <div id="delete-modal-body-salary" class="modal-body">
                @Localizer["DeleteRecordBody"]
                <div id="ERROR_ThisRecordHasDependencyOnItInAnotherEntity" class="red label-white middle hidden" style="height:40px;margin-top:2rem">
                    <i class="ace-icon fa fa-stop bigger-120"></i>
                    @Localizer["ERROR_ThisRecordHasDependencyOnItInAnotherEntity"]
                </div>
                <div id="ERROR_SomeThingWentWrong" class="red label-white middle hidden" style="height:40px;">
                    <i class="ace-icon fa fa-stop bigger-120"></i>
                    @Localizer["ERROR_SomeThingWentWrong"]
                </div>
            </div>

            <div class="modal-footer">
                @Html.AntiForgeryToken()

                @(Html.Kendo().Button()
                .Name("btn-delete-accept-Salary")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "k-primary pull-right" })
                .Content(@Localizer["Ok"]))
                @(Html.Kendo().Button()
                .Name("btn-close-modal-update")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right", @data_dismiss = "modal" })
                .Content(@Localizer["Exit"]))

            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div>
<!-- End Delete For Salary -->

<div id="SalaryHistoryPaymentModal" class="modal fade @font" data-backdrop="static" data-keyboard="false" style="@direction">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" onclick="closeSalaryHistoryPaymentModal()" aria-hidden="true">&times;</button>
                <h3 id="SalaryHistoryPaymentModal-header" class="smaller lighter blue no-margin @font">
                    @Localizer["PaymentsHistory"]
                </h3>
            </div>
            <div id="SalaryHistoryPaymentModal-body" style="width:40vw" class="modal-body @font ">
            </div>

            <div class="modal-footer">

                @(Html.Kendo().Button()
                    .Name("btn-SalaryHistoryPayment-close")
                    .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right", onclick = "closeSalaryHistoryPaymentModal()" })
                    .Content(Localizer["Exit"]))

            </div>
        </div> @*.modal-content*@
    </div> @*.modal-dialog*@
</div>


<div id="PayHumanSalaryModal" class="modal fade @font" data-backdrop="static" data-keyboard="false" style="@direction">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" onclick="ClosePayHumanSalaryModal()" aria-hidden="true">&times;</button>
                <h3 id="PayHumanSalaryModal-header" class="smaller lighter blue no-margin @font">
                    @Localizer["PaySalary"]
                </h3>
            </div>
            <div id="PayHumanSalaryModal-body" style="width:40vw" class="modal-body @font">

            </div>

            <div id="ERROR_SomeThingWentWrong" class="red label-white middle hidden" style="height:40px;display:block">
                <i class="ace-icon fa fa-stop bigger-120"></i>
                @Localizer["ERROR_InsertWrong"]
            </div>

            <div id="ERROR_Data" class="red label-white middle hidden" style="height:40px;display:block">
                <i class="ace-icon fa fa-stop bigger-120"></i>
                @Localizer["ERROR_DataNotValid"]
            </div>

            <div id="ERROR_Money" class="red label-white middle hidden" style="height:40px;display:block">
                <i class="ace-icon fa fa-stop bigger-120"></i>
                @Localizer["ERROR_Money"]
            </div>

            <div class="modal-footer">

                @(Html.Kendo().Button()
                        .Name("btn-payHumanSalary-accept")
                        .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "k-primary pull-right" })
                        .Content(Localizer["Ok"]))
                @(Html.Kendo().Button()
                        .Name("btn-payHumanSalary-close")
                        .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right", onclick= "ClosePayHumanSalaryModal()" })
                        .Content(Localizer["Exit"]))
            </div>
        </div> @*.modal-content*@
    </div> @*.modal-dialog*@
</div>

<div id="DeletePaymentModal" class="modal fade bd-example-modal-lg @font" data-backdrop="static" data-keyboard="false" style="@direction">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="widget-header" style="padding:1rem">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h3 class='smaller @font'>
                    <i class='ace-icon fa fa-exclamation-triangle red '></i>@Localizer["DeleteRecordHeader"]
                </h3>
            </div>

            <div id="DeletePaymentModal-body" class="modal-body">
                @Localizer["DeleteRecordBody"]
                <div id="ERROR_ThisRecordHasDependencyOnItInAnotherEntity" class="red label-white middle hidden" style="height:40px;margin-top:2rem">
                    <i class="ace-icon fa fa-stop bigger-120"></i>
                    @Localizer["ERROR_ThisRecordHasDependencyOnItInAnotherEntity"]
                </div>
                <div id="ERROR_SomeThingWentWrong" class="red label-white middle hidden" style="height:40px;">
                    <i class="ace-icon fa fa-stop bigger-120"></i>
                    @Localizer["ERROR_SomeThingWentWrong"]
                </div>
            </div>

            <div class="modal-footer">

                @(Html.Kendo().Button()
                .Name("btn-DeletePayment-accept")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "k-primary pull-right" })
                .Content(@Localizer["Ok"]))
                @(Html.Kendo().Button()
                .Name("btn-DeletePayment-close")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right", @data_dismiss = "modal" })
                .Content(@Localizer["Exit"]))

            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div>


<div id="PayAllSalaryModal" class="modal fade @font" data-backdrop="static" data-keyboard="false" style="@direction">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h3 id="PayAllSalary-header" class="smaller lighter blue no-margin @font">
                    @Localizer["PayAllSalary"]
                </h3>
            </div>
            <div id="PayAllSalaryModal-body" style="width:40vw" class="modal-body @font">


                <span class="block clearfix">
                    @Localizer["DoYouWantToPayAllSalary"]
                </span>

                <div class="space-10"></div>

                <label class="block clearfix">
                    <label for="form-field-8">@Localizer["Description"]: </label>
                    <span class="block input-icon input-icon-right">
                        @(Html.Kendo().TextBox()
                        .Name("PayAllSalaryDescription")
                        .HtmlAttributes(new { style = "width: 100%" })
                        )
                    </span>
                </label>

            </div>

            <div id="ERROR_SomeThingWentWrong" class="red label-white middle hidden" style="height:40px;display:block">
                <i class="ace-icon fa fa-stop bigger-120"></i>
                @Localizer["ERROR_InsertWrong"]
            </div>

            <div class="modal-footer">

                @(Html.Kendo().Button()
                .Name("btn-PayAllSalary-accept")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "k-primary pull-right" })
                .Content(Localizer["Ok"]))
                @(Html.Kendo().Button()
                .Name("btn-PayAllSalary-close")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right", @data_dismiss = "modal" })
                .Content(Localizer["Exit"]))
            </div>
        </div> @*.modal-content*@
    </div> @*.modal-dialog*@
</div>
<script>

    function ShowSalaryReport() {
        $(".loader").removeClass("hidden");

        let link = "/HumanResource/ShowReport";

        $(".page-content").load(link , function (responce) {

            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        })
    }


    function PayAllHumanSalary(element) {
        $("#PayAllSalaryDescription").val("");
        $("#PayAllSalaryDescription").focus();

        $('#PayAllSalaryModal #ERROR_SomeThingWentWrong').addClass('hidden');

        var Id = $(element).attr('data-id');

        $("#btn-PayAllSalary-accept").attr('data-id', Id);

        $(".loader").removeClass("hidden");

        $('#PayAllSalaryModal').modal('toggle');

        $(".loader").fadeIn("slow");
        $(".loader").addClass("hidden");

    }


    $("#btn-PayAllSalary-accept").on("click", function () {
        $(this).attr("disabled", true);

        $('#PayAllSalaryModal #ERROR_SomeThingWentWrong').addClass('hidden');

        var _Id = $(this).attr('data-id');
        var link = "/HumanResourceSalaryPayment/PayAllSalaries";

        var token = $(':input:hidden[name*="RequestVerificationToken"]');
        $(".loader").removeClass("hidden");
        $.ajax({
            type: "Post",
            url: link,
            data: {
                __RequestVerificationToken: token.attr('value'),
                humanResourceId: _Id,
                description: $("#PayAllSalaryModal  #PayAllSalaryDescription").val()
            },
            success: function (response) {
                $('#btn-PayAllSalary-accept').removeAttr("disabled");

                if (response === "SomeThingWentWrong") {
                    $("#PayAllSalaryModal #ERROR_SomeThingWentWrong").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                } else {
                    $('#PayAllSalaryModal').modal('hide');
                    $(".modal-backdrop:last").remove();
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                    $("#kendoHumanGrid .k-pager-refresh")[0].click();
                    $("#kendoHumanSalaryGrid .k-pager-refresh")[0].click();
                }
            }
        });
    });

    function EditPayment(element) {

        $("#PayHumanSalaryModal #ERROR_SomeThingWentWrong").addClass("hidden");
        $("#PayHumanSalaryModal #ERROR_Data").addClass("hidden");
        $("#PayHumanSalaryModal #ERROR_Money").addClass("hidden");

        var paySalary_id = $(element).attr('data-id');
        var link2 = "/HumanResourceSalaryPayment/PaySalaryEditModal?paySalaryId=";
        $(".loader").removeClass("hidden");

        $('#PayHumanSalaryModal').modal('toggle');
        $('#PayHumanSalaryModal-body').load(link2 + paySalary_id + "", function () {
            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        });
    }

    function DeletePayment(element) {
        $("#DeletePaymentModal #ERROR_ThisRecordHasDependencyOnItInAnotherEntity").addClass("hidden");
        $("#DeletePaymentModal #ERROR_SomeThingWentWrong").addClass("hidden");

        $(".loader").removeClass("hidden");
        $('#DeletePaymentModal').modal('toggle');
        var Id = $(element).attr('data-id');
        $('#btn-DeletePayment-accept').attr('data-id', Id);
        $(".loader").fadeIn("slow");
        $(".loader").addClass("hidden");
    }


    $('#btn-DeletePayment-accept').on("click", function () {
        $(this).attr("disabled", true);

        $("#DeletePaymentModal #ERROR_ThisRecordHasDependencyOnItInAnotherEntity").addClass("hidden");
        $("#DeletePaymentModal #ERROR_SomeThingWentWrong").addClass("hidden");

        var Id = $(this).attr('data-id');

        var link = "/HumanResourceSalaryPayment/Remove?Id=";

        var token = $(':input:hidden[name*="RequestVerificationToken"]');
        $(".loader").removeClass("hidden");
        $.ajax({
            type: "Post",
            url: link,
            data: {
                __RequestVerificationToken: token.attr('value'),
                Id: Id
            },
            success: function (response) {
                $('#btn-DeletePayment-accept').removeAttr("disabled");

                if (response === "SUCCESSFUL") {
                    $('#DeletePaymentModal').modal('hide');
                    $(".modal-backdrop:last").remove();
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");

                    $("#kendoSalaryPaymentGrid .k-pager-refresh")[0].click();
                    $("#kendoHumanSalaryGrid .k-pager-refresh")[0].click();
                }
                else if (response === "ERROR_ThisRecordHasDependencyOnItInAnotherEntity") {
                    $("#DeletePaymentModal #ERROR_ThisRecordHasDependencyOnItInAnotherEntity").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                }
                else if (response === "ERROR_SomeThingWentWrong") {
                    $("#DeletePaymentModal #ERROR_SomeThingWentWrong").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                }
                else if (response === "AreYouSure") {
                    AskForDelete(Id);
                }
                else if (response === "CanNotDelete") {
                    CanNotDelete();
                } else {

                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                }
            }
        });
    });


    function PaymentsHistory(element) {
        var humanSalary_id = $(element).attr('data-id');
        var link2 = "/HumanResourceSalaryPayment/GetHistoryPaymentsModal?humanSalaryId=";
        $(".loader").removeClass("hidden");

        $('#SalaryHistoryPaymentModal').modal('toggle');
        $('#SalaryHistoryPaymentModal-body').load(link2 + humanSalary_id + "", function () {
            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        });
    }

    function closeSalaryHistoryPaymentModal() {

        $('#SalaryHistoryPaymentModal').modal('hide');
        $('#SalaryHistoryPaymentModal-body').empty();
        $(".modal-backdrop:last").remove();
    }

    function RefreshAllGrids(){
        $("#human_search").attr("data-value","");
        $('#search-human-guid').attr('data-Value',"");
        $("#filter_user_grid").attr("data-value","");

        $("#kendoHumanGrid .k-pager-refresh")[0].click();
        $("#kendoHumanSalaryGrid .k-pager-refresh")[0].click();
        $("#kendoGrid .k-pager-refresh")[0].click();
    }
    function SelectHumanInUserManager(element){
        var human_id = $(element).attr('data-id');
        $("#human_search").attr("data-value",human_id);
        $('#search-human-guid').attr('data-Value',human_id);

        $("#kendoHumanGrid .k-pager-refresh")[0].click();
        $("#kendoHumanSalaryGrid .k-pager-refresh")[0].click();
    }

    function SelectUserManager(element){
        var human_id = $(element).attr('data-id');
        $("#filter_user_grid").attr("data-value",human_id);

        $("#kendoGrid .k-pager-refresh")[0].click();
    }

    function AddHuman(element) {
        $("#AddHumanModal #ERROR_SomeThingWentWrong").addClass("hidden");

        var link2 = "/HumanResource/AddNewModal";
        $(".loader").removeClass("hidden");
        let header = $("#newHumanText").text();
        $('#AddHumanModal-header').text(header);
        $('#AddHumanModal').modal('toggle');
        $('#AddHumanResourceModal-body').load(link2, function () {
            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
            $('#MdName').focus();
        });
        CurrencyCh();
    }
    function AddHumanSalary(element) {

        $("#AddHumanSalaryModal #ERROR_SomeThingWentWrong").addClass("hidden");
        $("#AddHumanSalaryModal #ERROR_Data").addClass("hidden");
        $("#AddHumanSalaryModal #ERROR_Money").addClass("hidden");
        $('#Name-Exist').addClass('hidden');

        var link3 = "/HumanResource/AddNewModalSalary";
        $(".loader").removeClass("hidden");
        let header = $("#newHumanSalaryText").text();
        $('#AddHumanSalaryModal-header').text(header);
        $('#AddHumanSalaryModal').modal('toggle');
        $('#AddHumanSalaryModal-body').load(link3, function () {
            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
            $('#HumanResourceName').get(0).focus();
        });
        CurrencyCh();
        var NamePayment = $(element).attr('data-NamePayment');
        var FixSalaryPayment = $(element).attr('data-FixSalaryPayment');
        if (NamePayment != "") {
            setTimeout(function () {
                $("#HumanResourceName").val(NamePayment);
                $("#HumanResourceName").blur();
                $("#HumanSalary").focus();
                $("#HumanSalary").val(FixSalaryPayment);
                $("#HumanSalary").blur();
                $("#WorkTime").focus();
            }, 1000);
        }
    }

    function closeAddHumanModal() {

        $('#AddHumanModal').modal('hide');
        $('#AddHumanResourceModal-body').empty();
        $(".modal-backdrop:last").remove();
    }
    function closeAddHumanSalaryModal() {

        $('#AddHumanSalaryModal').modal('hide');
        $('#AddHumanSalaryModal-body').empty();
        $(".modal-backdrop:last").remove();
    }

    function onChange(e) {
        var dataItem = this.dataItem(e.item);
        setItem(dataItem.Name);
    }
    function onSelect(e) {
        var dataItem = this.dataItem(e.item);
        setItem(dataItem.Name);
    }
    function onDataBound(e) {
        var dataItem = this.dataItem(e.item);
        setItem(dataItem.Name);
    }

    function setItem(name){
        if (name == "Doctor") {
            $('#AddDoctorRoleModal-body').removeClass('hidden');
        }
        if (name == "Nurse") {
            $('#AddDoctorRoleModal-body').addClass('hidden');
        }
        if (name == "Other") {
            $('#AddDoctorRoleModal-body').addClass('hidden');
        }
        $('#DdownMenu').attr('dataValue', name);
    }

    function addNewHuman() {
        $("#AddHumanModal #ERROR_SomeThingWentWrong").addClass("hidden");
        $("#AddHumanModal #ERROR_Data").addClass("hidden");
        $('.emptybox').addClass('hidden');

        var mobile = $("#Mobile-wrong");
        if (mobile) {
            mobile.addClass("hidden");

            if ($('[validate-mobile="Mobile-wrong"]').val() !== undefined) {
                let text = $('[validate-mobile="Mobile-wrong"]').val();
                if (text != "" & text.trim().length < 8) {
                    mobile.removeClass("hidden");
                    return;
                }
            }
        }

        var email = $("#Email-wrong");
        if (email) {
            email.addClass("hidden");

            if ($('[validate-email="Email-wrong"]').val() !== undefined) {
                let text = $('[validate-email="Email-wrong"]').val();
                if (!ValidateEmail(text)) {
                    email.removeClass("hidden");
                    return;
                }
            }
        }

        var isEmmpty = true;
        $('.emptybox').each(function () {
            if ($(this).attr('data-isEssential') === 'true') {
                var empty = $(this).attr('id');
                if ($('[data-checkEmpty="' + empty + '"]').val() === "") {
                    $(this).removeClass('hidden');
                    $(this).blur();
                    isEmmpty = false;
                    return;
                }
            }
        });


        if (isEmmpty === false) {
            return;
        }


        var link = "/HumanResource/AddOrUpdate";

        var data = $("#addNewHumanResourceForm").serialize();
        $(".loader").removeClass("hidden");
        $.ajax({
            type: "Post",
            url: link,
            data: data,
            success: function (response) {
                if (response !== 0) {
                    if (response === "ValueIsRepeated") {

                        $('#Name-Exist').removeClass('hidden');
                        $(".loader").fadeIn("slow");
                        $(".loader").addClass("hidden");

                    } else if (response === "WrongEmail") {

                        $("#Email-wrong").removeClass('hidden');

                        $(".loader").fadeIn("slow");
                        $(".loader").addClass("hidden");
                    } else if (response === "WrongMobile") {

                        $("#Mobile-wrong").removeClass('hidden');

                        $(".loader").fadeIn("slow");
                        $(".loader").addClass("hidden");
                    } else if (response === "SomeThingWentWrong") {

                        $("#AddHumanModal #ERROR_SomeThingWentWrong").removeClass("hidden");
                        $(".loader").fadeIn("slow");
                        $(".loader").addClass("hidden");

                    }else if (response === "TheUserNameIsDuplicated") {

                        $("#AddHumanModal #UserName-Exist").removeClass("hidden");
                        $(".loader").fadeIn("slow");
                        $(".loader").addClass("hidden");

                    }else if (response === "DataNotValid") {

                        $("#AddHumanModal #ERROR_Data").removeClass("hidden");
                        $(".loader").fadeIn("slow");
                        $(".loader").addClass("hidden");

                    }else if (response === "PassNotMatch") {

                        $("#AddHumanModal #incorrectPass").removeClass("hidden");
                        $(".loader").fadeIn("slow");
                        $(".loader").addClass("hidden");

                    }else {
                        $('#AddHumanModal').modal('hide');
                        $(".modal-backdrop:last").remove();
                        $('#AddHumanResourceModal-body').empty();
                        $(".loader").fadeIn("slow");
                        $(".loader").addClass("hidden");
                        $("#kendoHumanGrid .k-pager-refresh")[0].click();
                        $("#kendoHumanSalaryGrid .k-pager-refresh")[0].click();
                        $("#kendoGrid .k-pager-refresh")[0].click();
                    }
                }
            }
        });
    }

    function addNewHumanSalary() {

        $("#AddHumanSalaryModal #ERROR_SomeThingWentWrong").addClass("hidden");
        $("#AddHumanSalaryModal #ERROR_Data").addClass("hidden");
        $("#AddHumanSalaryModal #ERROR_Money").addClass("hidden");
        $('#Name-Exist').addClass('hidden');

        $('.emptybox').addClass('hidden');
        var isEmmpty = true;
        $('.emptybox').each(function () {
            if ($(this).attr('data-isEssential') === 'true') {
                var empty = $(this).attr('id');
                if ($('[data-checkEmpty="' + empty + '"]').val() === "") {
                    $(this).removeClass('hidden');
                    $(this).blur();
                    isEmmpty = false;
                    return;
                }
            }
        });


        if (isEmmpty === false) {
            return;
        }

        data = {
            Guid: $("#dGuid").val(),
            Id: $("#dId").val(),
            HumanResourceId: $("#dHumanResourceId").val(),
            Currency: $("#Currency").val(),
            HumanResourceName: $("#HumanResourceName").val(),
            Begin_Date: $("#KendoBeginDate").val(),
            ExtraSalary: $("#ExtraSalary").val(),
            WorkTime: $("#WorkTime").val(),
            End_Date: $("#EnDa").val(),
            Salary: $("#HumanSalary").val(),
            CurrencyId: $("#CurrencyId").val(),
            SalaryTypeHolderId: $("#SalaryType").val(),
            SalaryType: $("#SalaryType").val()
        }
        var link = "/HumanResource/AddorNewSalary";

        $(".loader").removeClass("hidden");
        $.ajax({
            type: "Post",
            url: link,
            data: data,
            success: function (response) {
                if (response !== 0) {
                    if (response === "ValueIsRepeated") {

                        $('#Name-Exist').removeClass('hidden');
                        $(".loader").fadeIn("slow");
                        $(".loader").addClass("hidden");
                    } else if (response === "SomeThingWentWrong") {

                        $('#AddHumanSalaryModal #ERROR_SomeThingWentWrong').removeClass('hidden');
                        $(".loader").fadeIn("slow");
                        $(".loader").addClass("hidden");

                    } else if (response === "DataNotValid") {

                        $('#AddHumanSalaryModal #ERROR_Data').removeClass('hidden');
                        $(".loader").fadeIn("slow");
                        $(".loader").addClass("hidden");

                    } else if (response === "ERROR_Money") {

                        $('#AddHumanSalaryModal #ERROR_Money').removeClass('hidden');
                        $(".loader").fadeIn("slow");
                        $(".loader").addClass("hidden");

                    } else {
                        $('#AddHumanSalaryModal').modal('hide');
                        $(".modal-backdrop:last").remove();
                        $('#AddHumanSalaryModal-body').empty();
                        $(".loader").fadeIn("slow");
                        $(".loader").addClass("hidden");
                        $("#kendoHumanSalaryGrid .k-pager-refresh")[0].click();
                    }
                }
            }
        });
    }

    function CurrencyCh() {

        var currency = $("#CurrencyId").data("kendoDropDownList");
        if (currency !== null && currency !== undefined) {
            if (currency.text() === "IQD")
                format = "n" + dinarDecimal;
            else if (currency.text() === "$")
                format = "n" + dollarDecimal;
            else if (currency.text() === "€")
                format = "n" + euroDecimal;
            else if (currency.text() === "£")
                format = "n" + pondDecimal;
        }
        else {
            format = "n0";
        }
    }

    function EditHuman(element) {
        $('#AddHumanModal').modal('toggle');

        let header = $('#editHumanText').text();

        $('#AddHumanModal-header').text(header);
        var link = "/HumanResource/EditModal?Id=";
        var Id = $(element).attr('data-id');
        $(".loader").removeClass("hidden");
        $('#AddHumanResourceModal-body').load(link + Id + '', function () {
            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
            $('#MdName').select();
        });
    }

    function EditHumanSalary(element) {
        $('#AddHumanSalaryModal').modal('toggle');

        let header = $('#editHumanSalaryText').text();
        var type=$(element).attr('salary-type');
        $('#AddHumanSalaryModal-header').text(header);
        if(type=="Wage"){
             $('#AddHumanSalaryModal-body').html('<h3>@Localizer["WageCanNotChange"]</h3>');
             $("#btn-addHumanSalary-accept").addClass("hidden");
        }else{
             $("#btn-addHumanSalary-accept").removeClass("hidden");
            var link = "/HumanResource/EditModalSalary?Id=";
            var Id = $(element).attr('data-id');
            $(".loader").removeClass("hidden");
            $('#AddHumanSalaryModal-body').load(link + Id + '', function () {
                $(".loader").fadeIn("slow");
                $(".loader").addClass("hidden");
                $('#HumanResourceName').select();
            });
        }

    }

    function ClosePayHumanSalaryModal() {

        $('#PayHumanSalaryModal').modal('hide');
        $('#PayHumanSalaryModal-body').empty();
        $(".modal-backdrop:last").remove();
    }

    function PayHumanSalary(element) {
        $("#PayHumanSalaryModal #ERROR_SomeThingWentWrong").addClass("hidden");
        $("#PayHumanSalaryModal #ERROR_Data").addClass("hidden");
        $("#PayHumanSalaryModal #ERROR_Money").addClass("hidden");

        var humanSalary_id = $(element).attr('data-id');
        var link2 = "/HumanResourceSalaryPayment/PaySalaryModal?humanSalaryId=";
        $(".loader").removeClass("hidden");

        $('#PayHumanSalaryModal').modal('toggle');
        $('#PayHumanSalaryModal-body').load(link2 + humanSalary_id + "", function () {
            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        });
    }

    $('#btn-payHumanSalary-accept').on("click", function () {
        $(this).attr("disabled", true);

        $("#PayHumanSalaryModal #ERROR_SomeThingWentWrong").addClass("hidden");
        $("#PayHumanSalaryModal #ERROR_Data").addClass("hidden");
        $("#PayHumanSalaryModal #ERROR_Money").addClass("hidden");

        var link = "/HumanResourceSalaryPayment/PaySalary";

        var token = $(':input:hidden[name*="RequestVerificationToken"]');
        $(".loader").removeClass("hidden");
        $.ajax({
            type: "Post",
            url: link,
            data: {
                __RequestVerificationToken: token.attr('value'),
                Guid: $("#PayGuid").val(),
                HumanResourceSalaryId: $("#HumanResourceSalaryId").val(),
                Amount: $("#Amount").val(),
                Description: $("#Description").val(),
                CurrencyId: $("#CurrencyId").val(),
            },
            success: function (response) {
                $('#btn-payHumanSalary-accept').removeAttr("disabled");

                if (response === "SomeThingWentWrong") {

                    $("#PayHumanSalaryModal #ERROR_SomeThingWentWrong").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");

                } else if (response === "ERROR_Data") {

                    $("#PayHumanSalaryModal #ERROR_Data").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");

                } else if (response === "ERROR_Money") {

                    $("#PayHumanSalaryModal #ERROR_Money").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");

                }  else {
                    $('#PayHumanSalaryModal').modal('hide');
                    $(".modal-backdrop:last").remove();
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                    $("#kendoHumanSalaryGrid .k-pager-refresh")[0].click();

                    var grid = $("#kendoSalaryPaymentGrid .k-pager-refresh");
                    if (grid.length > 0)
                        grid[0].click();
                }
            }
        });
    });

    function GridDeleteSalaryFunction(element) {

        $("#my-modal-delete-Salary #ERROR_ThisRecordHasDependencyOnItInAnotherEntity").addClass("hidden");
        $("#my-modal-delete-Salary #ERROR_SomeThingWentWrong").addClass("hidden");

        $(".loader").removeClass("hidden");
        $('#my-modal-delete-Salary').modal('toggle');
        var Id = $(element).attr('data-id');
        var type = $(element).attr('data-type');
        $('#btn-delete-accept-Salary').attr('data-id', Id);
        $('#btn-delete-accept-Salary').attr('data-type', type);
        $(".loader").fadeIn("slow");
        $(".loader").addClass("hidden");
    }

    $('#btn-delete-accept-Salary').on("click", function () {
        $(this).attr("disabled", true);

        $("#my-modal-delete-Salary #ERROR_ThisRecordHasDependencyOnItInAnotherEntity").addClass("hidden");
        $("#my-modal-delete-Salary #ERROR_SomeThingWentWrong").addClass("hidden");

        var Id = $(this).attr('data-id');
        let type = $(this).attr('data-type');

        var link = "";
        if (type === "Salary") {
            link = "/HumanResource/RemoveSalary?Id=";
        }
        else {
            link = "/HumanResource/Remove?Id=";
        }

        var GridRefreshLink = $("#GridRefreshLink").attr("data-Value");
        if (!IfUserCheckPass(GridRefreshLink)) {
            $('#btn-delete-accept-Salary').removeAttr("disabled");
            return;
        }
        var token = $(':input:hidden[name*="RequestVerificationToken"]');
        $(".loader").removeClass("hidden");
        $.ajax({
            type: "Post",
            url: link,
            data: {
                __RequestVerificationToken: token.attr('value'),
                Id: Id
            },
            success: function (response) {
                $('#btn-delete-accept-Salary').removeAttr("disabled");

                if (response === "SUCCESSFUL") {
                    $('#my-modal-delete-Salary').modal('hide');
                    $(".modal-backdrop:last").remove();
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");

                    if (type === "Salary") {
                        $("#kendoHumanSalaryGrid").find(".k-pager-refresh").click();
                    }
                    else {
                        $("#kendoHumanGrid").find(".k-pager-refresh").click();
                    }

                }
                else if (response === "ERROR_ThisRecordHasDependencyOnItInAnotherEntity") {
                    $("#my-modal-delete-Salary #ERROR_ThisRecordHasDependencyOnItInAnotherEntity").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                }
                else if (response === "ERROR_SomeThingWentWrong") {
                    $("#my-modal-delete-Salary #ERROR_SomeThingWentWrong").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                }
                else if (response === "AreYouSure") {
                    AskForDelete(Id);
                }
                else if (response === "CanNotDelete") {
                    CanNotDelete();
                }
            }
        });
    });


    function GetFixSalary() {
        link = "/HumanResource/GetFixSalary";
        dN = this.value();
        var token = $(':input:hidden[name*="RequestVerificationToken"]');
        $.ajax({
            type: "Post",
            url: link,
            data: {
                __RequestVerificationToken: token.attr('value'),
                humanName : dN
            },
            success: function (response) {
                $("#HumanSalary").val(response);
                $("#HumanResourceName").blur();

                setTimeout(function () {
                    $("#HumanSalary").focus();

                }, 20);
                }
        });
    }
    function SelectHumanName() {
        $("#HumanSalary").focus();
    }

    function GetFixSalaryq(e) {
        var Datahuman = this.dataItem(e.item);
        $("#HumanSalary").val(Datahuman.FixSalary);
        $("#ExtraSalary").val(Datahuman.ExtraSalaryPh);
        $("#dHumanResourceId").val(Datahuman.Guid);

        setTimeout(function () {
            $("#HumanResourceName").val(Datahuman.Gu.Name);
            $("#HumanResourceName").blur();
        }, 20);

        setTimeout(function () {
            $("#HumanSalary").blur();
        }, 20);

        setTimeout(function () {
            $("#ExtraSalary").blur();
        }, 20);

        setTimeout(function () {
            $("#WorkTimeA").focus();
        }, 20);
    }

    // SEARCH
    function onSelectPeriodInHumanSalaryCreateDate(e) {
        if (e.item) {
            var dataItem = this.dataItem(e.item);
            var Id = dataItem.Id;
            $('#periodCreateDate-id').attr('data-Value', Id);
            if (Id != 6) {
                $("#kendoHumanSalaryGrid").find(".k-pager-refresh").click();
            }
        }
    }

    function onSelectPeriodInHumanBeginEndDate(e) {
        if (e.item) {
            var dataItem = this.dataItem(e.item);
            var Id = dataItem.Id;
            if (Id == "") {
                $('#periodBeginEndDate-id').attr('data-Value', 6);
            }
            else {
                $('#periodBeginEndDate-id').attr('data-Value', Id);
            }

            if (Id != 5) {
                $("#kendoDoctorGrid").find(".k-pager-refresh").click();
            }
        }
    }


    function PeriodsChangeSalaryBeginEndDate() {
        var periodBeginEnd = $("#periodsBeginEndDate").data("kendoDropDownList");

        var periodBEValue = periodBeginEnd.value();

        var fromToBE = $("#FromToBeginEnd").text();

        if (periodBEValue === fromToBE) {
            $("#DivFromAndtoBeginEndDate").removeClass("hidden");
            let date = $("#KendoFromDateBeginEnd").data("kendoDatePicker");
            date.element.focus();
            date.element.select();
        }

        else {
            $("#DivFromAndtoBeginEndDate").addClass("hidden");
        }
    }



    function PeriodsChangeSalaryCreateDate() {
        var periodCreateDate = $("#periodsCreateDate").data("kendoDropDownList");
        var periodValue = periodCreateDate.value();

        var fromTo = $("#FromTo").text();

        if (periodValue === fromTo) {
            $("#DivFromAndtoCreateDate").removeClass("hidden");
            let date = $("#KendoFromDateCreate").data("kendoDatePicker");
            date.element.focus();
            date.element.select();
        }
        else {
            $("#DivFromAndtoCreateDate").addClass("hidden");
        }
    }


    function onSelectSearchHumanSalaryDrDo(e) {
        var searchDataChangeBox = this.dataItem(e.item);
        if (searchDataChangeBox.Name == "CreateDate") {
            //chage to select Items
            var dataItemCreateSearch = $("#periodsCreateDate").data("kendoDropDownList");
            dataItemCreateSearch.value("");
            // refreshe rest
            $('#periodCreateDate-id').attr('data-Value', 5);
            $("#search-human-guid").attr('data-Value', "@ViewBag.HumanGuid");
            $("#kendoHumanSalaryGrid").find(".k-pager-refresh").click();
            // refreshe rest
            $("#searchCreateDateBox").removeClass('hidden');
            $("#searchHumanIdBox").addClass('hidden');
        }
        else if (searchDataChangeBox.Name == "Human") {
            $("#searchHumanName").val("");
            // refreshe rest
            $('#periodCreateDate-id').attr('data-Value', 5);
            $("#search-human-guid").attr('data-Value', "@ViewBag.HumanGuid");
            $("#kendoHumanSalaryGrid").find(".k-pager-refresh").click();
            // refreshe rest
            $("#searchCreateDateBox").addClass('hidden');
            $("#searchHumanIdBox").removeClass('hidden');
            $("#DivFromAndtoCreateDate").addClass("hidden");
        }
        else {
            // refreshe rest
            $('#periodCreateDate-id').attr('data-Value', 5);
            $("#search-human-guid").attr('data-Value', "@ViewBag.HumanGuid");
            $("#kendoHumanSalaryGrid").find(".k-pager-refresh").click();
            // refreshe rest
            $("#searchCreateDateBox").addClass('hidden');
            $("#searchHumanIdBox").addClass('hidden');
            $("#DivFromAndtoCreateDate").addClass("hidden");
        }
    }


    function searchGetHumanName(e) {
        var humaGuiddataItem = this.dataItem(e.item);
        $("#search-human-guid").attr('data-Value', humaGuiddataItem.Gu.Guid);
        $("#kendoHumanSalaryGrid").find(".k-pager-refresh").click();
    }


    function SelectGridHuman(e) {
        /*var selectedCells = this.select();*/
        var Id = e.getAttribute("data-id");
        $("#search-human-guid").attr('data-Value', Id);
        $("#kendoHumanSalaryGrid").find(".k-pager-refresh").click();
    }
        var link4 = "/HumanResource/SearchHumanSalary";
        $(".loader").removeClass("hidden");
        $('#searchHumanSalary').load(link4, function () {
            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        });
    var link8 = "/HumanResource/SearchHumanBeginEnd";
    $(".loader").removeClass("hidden");
    $('#searchHuman').load(link8, function () {
        $(".loader").fadeIn("slow");
        $(".loader").addClass("hidden");
    });

    function btnSearchCreateDateClick() {
        $("#kendoHumanSalaryGrid").find(".k-pager-refresh").click();
    }
    function btnSearchBeginEndDateClick() {
        $("#kendoDoctorGrid").find(".k-pager-refresh").click();
    }
    //SEARCH


    $('#MdName').on('keypress', function (e) {

        if (e.which === 9 || e.which === 13) {

            $('#gph').focus();
        }
    });

    $("#VisitPatientName").on('focus', function (e) {

        let value = nameAuto.value();
        nameAuto.search(value);
    });

</script>