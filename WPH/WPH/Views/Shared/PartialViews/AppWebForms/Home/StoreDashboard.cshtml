@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject WPH.Resources.SharedViewLocalizer Localizer

<script src="~/Content/assets/js/apexcharts.min.js"></script>

<style>

    .storeDashboardBack {
        border-radius: 0.5rem;
        background-color: #fff;
        padding: 2rem;
        border: 1px solid rgba(0, 0, 0, .125);
        background-clip: border-box;
        box-shadow: rgba(146, 168, 209,0.7) 0px 0px 5px 0.1px;
    }
</style>

<div id="store-dashboard" class="col-sm-12" style="direction:ltr;padding:0.5rem;margin:1rem 0 0 0;background-color:rgb(242, 247, 251);border-radius:1rem">

    <div class=" col-sm-6 col-lg-2 MyFont-Sarchia-grid" style="text-align:center;padding:0.1rem;margin:0;">
        @*box-shadow:rgba(146, 168, 209,0.7) 0px 0px 5px 0.1px;*@
        <div class="col-sm-12 storeDashboardBack">


            @if ((bool)ViewBag.AccessSaleInvoiceDetails)
            {
                <div class="col-sm-12" style="padding:0;margin:0">

                    @(Html.Kendo().Button()
                                .Name("btn-Sale")
                                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;width:100%", type = "button", @class = "btn btn-primary  ", onclick = "GoToSaleInvoiceDetail()" })
                                .Content(Localizer["SaleInvoice"] + " " + Localizer["New"]))

                </div>
            }

            @if ((bool)ViewBag.AccessReturnSaleInvoiceDetails)
            {
                <div class="col-sm-12" style="padding:0;margin:0">

                    @(Html.Kendo().Button()
                                    .Name("btn-ReturnSale")
                                    .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;width:100%", type = "button", @class = "btn btn-primary  ", onclick = "GoToReturnSale()" })
                                    .Content(Localizer["ReturnSale"] + " " + Localizer["New"]))

                </div>
            }

            @if ((bool)ViewBag.AccessPurchaseInvoiceDetails)
            {
                <div class="col-sm-12" style="padding:0;margin:0">

                    @(Html.Kendo().Button()
                                    .Name("btn-Purchase")
                                    .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;width:100%", type = "button", @class = "btn btn-primary  ", onclick = "GoToPurchaseInvoiceDetail()" })
                                    .Content(Localizer["PurchaseInvoice"] + " " + Localizer["New"]))

                </div>
            }

            @if ((bool)ViewBag.AccessReturnPurchaseInvoiceDetails)
            {
                <div class="col-sm-12" style="padding:0;margin:0">

                    @(Html.Kendo().Button()
                                    .Name("btn-ReturnPurchase")
                                    .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;width:100%", type = "button", @class = "btn btn-primary  ", onclick = "GoToReturnPurchase()" })
                                    .Content(Localizer["ReturnPurchase"] + " " + Localizer["New"]))

                </div>
            }


            @if ((bool)ViewBag.AccessDamageDetails)
            {
                <div class="col-sm-12" style="padding:0;margin:0">

                    @(Html.Kendo().Button()
                                    .Name("btn-Damage")
                                    .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;width:100%", type = "button", @class = "btn btn-primary  ", onclick = "GoToDamage()" })
                                    .Content(Localizer["Damage"] + " " + Localizer["New"]))

                </div>
            }


            @if ((bool)ViewBag.AccessTransferDetail)
            {
                <div class="col-sm-12" style="padding:0;margin:0">

                    @(Html.Kendo().Button()
                                    .Name("btn-Transfer")
                                    .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;width:100%", type = "button", @class = "btn btn-primary  ", onclick = "GoToTransfer()" })
                                    .Content(Localizer["Transfer"] + " " + Localizer["New"]))

                </div>
            }



        </div>

        <div id="expired-products" class="col-sm-12 storeDashboardBack" style="margin-top:1rem">



        </div>


        <div id="returned-products" class="col-sm-12 storeDashboardBack" style="margin:1rem 0;text-align:center;padding-top:1rem">




        </div>



    </div>

    <div class="col-sm-6 col-lg-4" style="margin: 0 0 1rem 0;padding:0">

        <div class="col-sm-12 storeDashboardBack" >

            <div id="pieChart">
            </div>

        </div>



    </div>

    <div class="col-sm-6 col-lg-6" style="padding:0">

        <div class="col-sm-12 storeDashboardBack">



            <div id="chart-income">
            </div>

            <div class="MyFont-Sarchia-grid">

                @(Html.Kendo().Button()
                            .Name("btn-incomeDay")
                            .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "btn btn-primary MyFont-Sarchia-grid ", onclick = "GetIncome('day')" })
                            .Content(Localizer["Day"]))
                @(Html.Kendo().Button()
                            .Name("btn-incomeMonth")
                            .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "btn btn-primary MyFont-Sarchia-grid ", onclick = "GetIncome('month')" })
                            .Content(Localizer["Month"]))
                @(Html.Kendo().Button()
                            .Name("btn-incomeYear")
                            .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "btn btn-primary MyFont-Sarchia-grid ", onclick = "GetIncome('year')" })
                            .Content(Localizer["Year"]))

            </div>


        </div>

        <div class="col-sm-12 storeDashboardBack" style="margin-top:1rem">



            <div id="treeChart">
            </div>



        </div>


    </div>

</div>

@{
    string font = "", pull = "", dir = "";
    if (HttpContextAccessor.HttpContext.Session.GetString("culture") == "en")
    {
        font = " MyFont-Roboto-grid ";
        pull = " pull-left ";
        dir = "  ";
        <h3 id="newSaleInvoiceText" class="hidden">@Localizer["New"] @Localizer["SaleInvoice"]</h3>
    }
    else
    {
        font = " MyFont-Sarchia-grid ";
        pull = " pull-right ";
        dir = " direction:rtl; ";
        <h3 id="newSaleInvoiceText" class="hidden">@Localizer["SaleInvoice"] @Localizer["New"]</h3>
    }
    <h3 id="editSaleInvoiceText" class="hidden">@Localizer["Edit"] @Localizer["SaleInvoice"]</h3>
}

<div id="SaleInvoiceDetailModal" class="modal fade @font" data-backdrop="static" data-keyboard="false" style="z-index:999;@dir">
    <div class="modal-dialog" style="width:100%">
        <div class="modal-content">
            <div class="modal-header" style="padding:5px">
                <button type="button" class="close" onclick="closeSaleInvoiceDetailModal()" aria-hidden="true">&times;</button>
                <div class="col-sm-3">
                    <h4 id="SaleInvoiceDetailModal-header" class="smaller lighter blue no-margin @font">
                        @Localizer["SaleInvoice"]
                    </h4>

                </div>

            </div>

            <div id="SaleInvoiceDetailModal-body" class="modal-body" style="overflow:auto">
            </div>

            <div class="modal-footer">

                @(Html.Kendo().Button()
                .Name("btn-SaleInvoiceDetailModal-ok")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right k-primary", onclick= "SaleInvoiceDetailsSaveChanges()" })
                .Content(Localizer["Ok"]))
                @(Html.Kendo().Button()
                .Name("btn-SaleInvoiceDetailModal-okandnew")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right k-primary hidden", onclick= "okAndNew()" })
                .Content(Localizer["OkAndNew"]))
                @(Html.Kendo().Button()
                .Name("btn-SaleInvoiceDetailModal-close")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right", onclick= "closeSaleInvoiceDetailModal()" })
                .Content(Localizer["Exit"]))
            </div>
        </div> @*.modal-content*@
    </div> @*.modal-dialog*@
</div>

<div id="ExpiredProductListModal" class="modal fade @font" data-backdrop="static" data-keyboard="false" style="@dir">
    <div class="modal-dialog" style="width:100%">
        <div class="modal-content">
            <div class="modal-header" style="padding:5px">
                <button type="button" class="close" onclick="closeExpiredProductListModal()" aria-hidden="true">&times;</button>
                <div class="col-sm-3">
                    <h4 id="ExpiredProductListModal-header" class="smaller lighter blue no-margin @font">
                        @Localizer["Expired"]
                    </h4>

                </div>

            </div>

            <div id="ExpiredProductListModal-body" class="modal-body" style="overflow:auto">
            </div>

            <div class="modal-footer">

                @(Html.Kendo().Button()
                .Name("btn-ExpiredProductListModal-close")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right", onclick= "closeExpiredProductListModal()" })
                .Content(Localizer["Exit"]))
            </div>
        </div> @*.modal-content*@
    </div> @*.modal-dialog*@
</div>


<script>


    var options = {
        chart: {
            type: 'bar',
            //height: 320
        },
        series: [{
            name: 'IQD',
            data: [300, 400, 450, 500, 490, 600, 700]
        }, {
            name: '$',
            data: [30, 40, 45, 60, 70]
        }],
        xaxis: {
            categories: ['sat', 'sun', 'mon', 'thi', 'the', 'wen', 'fri']
        },
        title: {
            text: 'Income',
            align: 'left',
            margin: 20,
            offsetX: 0,
            offsetY: 0,
            floating: false,
            style: {
                fontSize: '1.5rem',
                fontWeight: 'bold',
                fontFamily: 'Roboto',
                color: '#34568B'
            }
        },
    }

    var chart = new ApexCharts(document.querySelector("#chart-inme"), options);

    chart.render();

    $(document).ready(() => {
        GetIncome('day');
    })


    function GetIncome(type) {

        $("#chart-income").empty();

        $.ajax({

            url: "/Dashboard/GetAllStoreInCome?Type=" + type,
            success: function (response) {
                //if (response != 0) {
                if (response != null) {
                    
                    let ser = [];
                    let date = [];

                    for (let i = 0; i < response.length; i++) {
                        ser.push({ name: response[i].CurrencyName, data: response[i].Value})
                    }
                    for (let i = 0; i < response[0].Date.length; i++) {
                        date.push( response[0].Date[i] );
                    }


                    var options = {
                        chart: {
                            type: 'bar',
                            height: 320
                        },
                        series: ser,
                        xaxis: {
                            categories: date
                        },
                        title: {
                            text: 'Income',
                            align: 'left',
                            margin: 20,
                            offsetX: 0,
                            offsetY: 0,
                            floating: false,
                            style: {
                                fontSize: '1.5rem',
                                fontWeight: 'bold',
                                fontFamily: 'Roboto',
                                color: '#34568B'
                            }
                        },
                    }

                    var chart = new ApexCharts(document.querySelector("#chart-income"), options);

                    chart.render();
                }

            }
        });

    }





    $.ajax({

        url: "/Dashboard/GetMostReturnedProducts",
        success: function (response) {
            //if (response != 0) {
            if (response != null) {
                let ht = "<div class='col-sm-12' style='margin:0 0 1rem 0;padding:0'>" +
                    "<h4 class='MyFont-Roboto-header' style = 'float:left;margin:0;font-size: 1.5rem;color:black ' > Most Returned Products</h4 > </div > ";

                for (let i = 0; i < response.Labels.length; i++) {

                    ht += "<div class='col-sm-12' style='border-bottom:solid 2px rgb(146, 168, 209);padding:0;margin:0.5rem'><div class='col-sm-12' style='display:flex;justify-content:space-between'>" +
                        "<h5 class='MyFont-Roboto' style = 'font-size:1.5rem;color:#34568B;font-weight: bold' >" + response.Labels[i] + "</h5 >" +
                        "<h5 class='MyFont-Roboto' style = 'font-size:1.5rem;color:#34568B;font-weight: bold' >" + response.Value[i] + "</h5 ></div ></div > ";
                }
                $("#returned-products").html(ht);

            }

        }
    });




    $.ajax({

        url: "/Dashboard/GetMostSaledProducts",
        success: function (response) {
            //if (response != 0) {
            if (response != null) {

                console.log(response);
                var pieOptions = {
                    series: response.Value,
                    chart: {
                        type: 'pie',

                    },
                    labels: response.Labels,
                    stroke: {
                        colors: ['#fff']
                    },
                    fill: {
                        opacity: 0.8
                    },
                    title: {
                        text: 'Most Saled Products',
                        align: 'left',
                        margin: 20,
                        offsetX: 0,
                        offsetY: 0,
                        floating: false,
                        style: {
                            fontSize: '1.5rem',
                            fontWeight: 'bold',
                            fontFamily: 'Roboto',
                            color: '#34568B'
                        }
                    },

                };

                var pieChart = new ApexCharts(document.querySelector("#pieChart"), pieOptions);

                pieChart.render();
            }

        }
    });



    $.ajax({

        url: "/Dashboard/GetProductStocks",
        success: function (response) {
            //if (response != 0) {
            if (response != null) {

                let value = [];

                for (let i = 0; i < response.Labels.length; i++) {

                    value.push({ x: response.Labels[i], y: response.Value[i] })

                }
                console.log(value);
                var treeOptions = {
                    series: [
                        {
                            data: value

                        }
                    ],
                    legend: {
                        show: false,
                        position: 'bottom'
                    },
                    chart: {
                        height: 320,
                        type: 'treemap'
                    },
                    title: {
                        text: 'Products Stock',
                        align: 'left',
                        margin: 20,
                        offsetX: 0,
                        offsetY: 0,
                        floating: false,
                        style: {
                            fontSize: '1.5rem',
                            fontWeight: 'bold',
                            fontFamily: 'Roboto',
                            color: '#34568B'
                        }
                    },
                    plotOptions: {
                        treemap: {
                            //enableShades: true,
                            //shadeIntensity: 0.1,
                            colorScale: {
                                ranges: [
                                    {
                                        from: 0,
                                        to: 50,
                                        color: '#BC243C',
                                        foreColor: '#BC243C'
                                    },
                                    {
                                        from: 51,
                                        to: 100,
                                        color: '#88B04B'
                                    }
                                ]
                            }
                        }
                    },
                    dataLabels: {
                        enabled: true,
                        style: {
                            fontSize: '15px',
                            fontFamily: 'Roboto',
                            colors: ['#000']
                        },
                        formatter: function (text, op) {
                            return [text + " (" + op.value + ")"]
                        },
                        offsetY: -4
                    },
                };

                var treeChart = new ApexCharts(document.querySelector("#treeChart"), treeOptions);
                treeChart.render();
            }

        }
    });



    $.ajax({

        url: "/Dashboard/GetExpiredProducts",
        success: function (response) {
            //if (response != 0) {
            if (response != null) {

                let ht = "";

                const st = ["Expired", "Expired In 3 Months", "Expired In 6 Months", "Expired In 1 Year"]

                for (let i = 0; i < response.length; i++) {

                    ht += "<div class='col-sm-12' style='border-bottom: solid 2px rgb(146, 168, 209); padding: 0; display: flex; align-items: center;margin-top:1rem'>" +
                        "<div class='col-sm-2' style='width:4rem;height:4rem;padding:0;margin:0;display:flex;align-items:center'>" +
                        "<img src='../Content/Images/to-do-list.png' style='height:inherit;cursor:pointer' onclick='GetExpireList(" + i + ")' />" +
                        "</div > " +
                        "<div class='col-sm-8' style = '' >" +
                        " <h5 class='MyFont-Roboto' style='font-size:1.5rem;color:rgb(52, 86, 139)'>" + st[i] + "</h5>" +
                        "</div > " +
                        "<div class='col-sm-2' style='padding: 0; '>" +
                        " <h4 class='MyFont-Roboto' style = 'color:rgb(52, 86, 139)' > " + response[i] + "</h4 ></div ></div >";

                }
                $("#expired-products").html(ht);


            }

        }
    });



    function GetExpireList(type) {
        $(".loader").removeClass("hidden");
        $('#ExpiredProductListModal').modal('toggle');

        let stat = "";

        if (type == 0)
            stat = "expired"
        else if(type == 1)
            stat = "3month"
        else if (type == 2)
            stat = "6month"
        else
            stat = "year"


        var link = "/Dashboard/GetExpiredList?Type=" + stat;

        $(".loader").removeClass("hidden");
        $('#ExpiredProductListModal-body').load(link + '', function () {
            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");

        });
    }

    function closeExpiredProductListModal() {
        $('#ExpiredProductListModal').modal('hide');
        $('#ExpiredProductListModal-body').empty();
        $(".modal-backdrop:last").remove();
    }


    function closeSaleInvoiceDetailModal() {
        $('#SaleInvoiceDetailModal').modal('hide');
        $('#SaleInvoiceDetailModal-body').empty();
        $(".modal-backdrop:last").remove();
    }

    function GoToSaleInvoiceDetail() {

        $(".loader").removeClass("hidden");
        $('#SaleInvoiceDetailModal').modal('toggle');

        var link = "/SaleInvoice/AddAndNewModal";

        $(".loader").removeClass("hidden");
        $('#SaleInvoiceDetailModal-body').load(link + '', function () {
            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");

        });

    }

    function GoToReturnSale() {

        $(".loader").removeClass("hidden");
        $(".page-content").load("/ReturnSaleInvoice/AddAndNewModal", function (responce) {

            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        })

    }

    function GoToPurchaseInvoiceDetail() {

        $(".loader").removeClass("hidden");
        $(".page-content").load("/PurchaseInvoice/AddAndNewModal",{ PurchaseType: 'Medicine' }, function (responce) {

            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        })

    }

    function GoToReturnPurchase() {

        $(".loader").removeClass("hidden");
        $(".page-content").load("/ReturnPurchaseInvoice/AddAndNewModal", function (responce) {

            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        })

    }

    function GoToDamage() {

        $(".loader").removeClass("hidden");
        $(".page-content").load("/Damage/AddAndNewModal", function (responce) {

            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        })

    }

    function GoToTransfer() {

        $(".loader").removeClass("hidden");
        $(".page-content").load("/Transfer/AddAndNewModal", function (responce) {

            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        })

    }



</script>