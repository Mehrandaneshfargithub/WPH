
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject WPH.Resources.SharedViewLocalizer Localizer


<div style=" width: 100%;">
    <div class="col-sm-12">
        <div class="col-sm-6 hidden" id="multiReasonContainer">
            <label class="block clearfix ">
                <label for="form-field-8">@Localizer["Reason"]: </label>
                <span class="block input-icon input-icon-right">
                    @(Html.Kendo().AutoComplete()
                    .Name("MultiReason")
                    .DataTextField("Name")
                    .Filter("contains")
                    .HighlightFirst(true)
                    .ClearButton(false)
                    .DataSource(source =>
                    {
                        source.Read(read =>
                        {
                            read.Action("GetAllReasons", "BaseInfo");
                        })
                        .ServerFiltering(false);
                    })
                    .HtmlAttributes(new { style = "width:100%;"})
                    )
                </span>
                <span id="MultiReason-box" class="emptybox hidden" data-isEssential="true" style="color:red;">
                    @Localizer["ThisFieldIsEmptyPleaseFillIt"]
                </span>
            </label>
        </div>
    </div>

    <div style="clear:both;">

        @(Html.Kendo().Grid<WPH.Models.ReturnPurchaseInvoiceDetail.ReturnPurchaseInvoiceDetailSelectViewModel>()
        .Name("purchaseHistoryKendoGrid")
        .Columns(columns =>
        {

            if (HttpContextAccessor.HttpContext.Session.GetString("culture") != "en")
            {

                columns.Bound("").Title("").Filterable(false).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).ClientTemplate("#= CheckBox_Databound(Guid,TransferDetailId,RemainingNum,PurchasePrice,Currency,InvoiceNum,InvoiceDateTxt,ExpireDateTxt)#");

                columns.Bound(x => x.Consideration).Title(Localizer["Consideration"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.RemainingNum).Title(Localizer["Rem"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.SellingPriceCurrency).Title(Localizer["SalePrice"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.TotalAfterDiscount).Title(Localizer["TotalAfterDiscount"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" }).ClientTemplate("#= TotalAfterDiscount_Databound(TotalAfterDiscount,Currency)#");
                columns.Bound(x => x.Discount).Title(Localizer["Discount"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" }).ClientTemplate("#= Discount_Databound(Discount,Currency)#");
                columns.Bound(x => x.Total).Title(Localizer["Total"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" }).ClientTemplate("#= TotalCurrency_Databound(Total,Currency)#");
                columns.Bound(x => x.PurchaseCurrency).Title(Localizer["PurchasePrice"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.FreeNum).Format("{0:#,#.##}").Title(Localizer["FreeNum"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.Num).Format("{0:#,#.##}").Title(Localizer["Num"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.ExpireDate).Title(Localizer["ExpDate"]).Format("{0: dd/MM/yyyy}").Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.BujNumber).Title(Localizer["BujNumber"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.MainInvoiceNum).Title(Localizer["MainInvoiceNum"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.InvoiceDate).Title(Localizer["Date"]).Format("{0: dd/MM/yyyy}").Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.InvoiceNum).Title(Localizer["InvoiceNum"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.ReturnType).Title(Localizer["Type"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.Index).Filterable(false).Width(20).Title("#").HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.ExpireDateTxt).Hidden();
                columns.Bound(x => x.InvoiceDateTxt).Hidden();
                columns.Bound(x => x.PurchasePrice).Hidden();
                columns.Bound(x => x.Currency).Hidden();
                columns.Bound(x => x.TransferDetailId).Hidden();
                columns.Bound(x => x.Guid).Hidden();
            }
            else
            {
                columns.Bound(x => x.Guid).Hidden();
                columns.Bound(x => x.TransferDetailId).Hidden();
                columns.Bound(x => x.PurchasePrice).Hidden();
                columns.Bound(x => x.Currency).Hidden();
                columns.Bound(x => x.InvoiceDateTxt).Hidden();
                columns.Bound(x => x.ExpireDateTxt).Hidden();
                columns.Bound(x => x.Index).Filterable(false).Width(20).Title("#").HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.ReturnType).Title(Localizer["Type"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.InvoiceNum).Title(Localizer["InvoiceNum"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.InvoiceDate).Title(Localizer["Date"]).Format("{0: dd/MM/yyyy}").Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.MainInvoiceNum).Title(Localizer["MainInvoiceNum"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.BujNumber).Title(Localizer["BujNumber"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.ExpireDate).Title(Localizer["ExpDate"]).Format("{0: dd/MM/yyyy}").Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.Num).Format("{0:#,#.##}").Title(Localizer["Num"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.FreeNum).Format("{0:#,#.##}").Title(Localizer["FreeNum"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.PurchaseCurrency).Title(Localizer["PurchasePrice"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.Total).Title(Localizer["Total"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" }).ClientTemplate("#= TotalCurrency_Databound(Total,Currency)#");
                columns.Bound(x => x.Discount).Title(Localizer["Discount"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" }).ClientTemplate("#= Discount_Databound(Discount,Currency)#");
                columns.Bound(x => x.TotalAfterDiscount).Title(Localizer["TotalAfterDiscount"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" }).ClientTemplate("#= TotalAfterDiscount_Databound(TotalAfterDiscount,Currency)#");
                columns.Bound(x => x.SellingPriceCurrency).Title(Localizer["SalePrice"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.RemainingNum).Title(Localizer["Rem"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.Consideration).Title(Localizer["Consideration"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });

                columns.Bound("").Title("").Filterable(false).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).ClientTemplate("#= CheckBox_Databound(Guid,TransferDetailId,RemainingNum,PurchasePrice,Currency,InvoiceNum,InvoiceDateTxt,ExpireDateTxt)#");

            }
        })

            .DataSource(dataSource => dataSource
            .Ajax()
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.Index);
            })
            .PageSize(10)
            .Read(read => read.Action("GetDetailsForReturn", "PurchaseInvoiceDetail").Data("GetParametersForSelectReturn"))
            )
            .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
            .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
            .Pageable(pageable => pageable
            .Input(true)
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5)
            .Numeric(true)) // Enable paging
            .Sortable().HtmlAttributes(new { @style = "direction:ltr;" }) // Enable sorting
        )
    </div>
</div>


<script>
    var set_show = 0;

    function TotalCurrency_Databound(Total, CurrencyName) {

        if (Total == 0)
            return 0;

        return `<div style="white-space: nowrap;margin: 0px 2px;"> ${CurrencyName} ${parseFloat(Total).toLocaleString('en')} </div>`;
    }

    function Discount_Databound(Discount, CurrencyName) {

        if (Discount == 0)
            return 0;

        return `<div style="white-space: nowrap;margin: 0px 2px;"> ${CurrencyName} ${parseFloat(Discount).toLocaleString('en')} </div>`;
    }

    function TotalAfterDiscount_Databound(TotalAfterDiscount, CurrencyName) {

        if (TotalAfterDiscount == 0)
            return 0;

        return `<div style="white-space: nowrap;"> ${CurrencyName} ${parseFloat(TotalAfterDiscount).toLocaleString('en')} </div>`;
    }

    function SelectReturnChange(element) {
        
        if (element.checked == true) {
            set_show++;
        } else {
            set_show--;
        }


        if (set_show > 1)
            $("#multiReasonContainer").removeClass("hidden");
        else
            $("#multiReasonContainer").addClass("hidden");
    }


    $("#MultiReason").on("focus", function (e) {
        let reason = $('#MultiReason').data("kendoAutoComplete");
        let value = reason.value();
        reason.search(value);
    });

    function CheckBox_Databound(Guid, TransferDetailId, RemainingNum, PurchasePrice, Currency, InvoiceNum, InvoiceDate, ExpireDateTxt) {

        return `<div style=''> <input type="checkbox" class="k-checkbox select_return" style="" data-txt="${InvoiceNum} | ${InvoiceDate} | ${ExpireDateTxt}" data-currency="${Currency}"  data-rem="${RemainingNum}" data-price="${PurchasePrice}" data-id="${Guid}" data-transfer="${TransferDetailId}" onchange="SelectReturnChange(this)" /> </div>`;
    }

    $(document).ready(function () {

        //$("#purchaseHistoryKendoGrid").on("dblclick", "tr.k-state-selected", function (element) {

        //    $("#purchaseHistoryKendoGrid").find("tr.k-state-selected td a.edit").click();

        //});

    })

</script>