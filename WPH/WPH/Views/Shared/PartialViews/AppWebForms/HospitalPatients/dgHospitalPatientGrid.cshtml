@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject WPH.Resources.SharedViewLocalizer Localizer


@{
    string edit_title = Localizer["EditInformation"];
}


<div>
    @(Html.Kendo().Grid<WPH.Models.HospitalPatients.HospitalPatientReportResultViewModel>()
    .Name("kendoHospitalPatientGrid")
    .HtmlAttributes(new { Class = "k-grid-header" })
    .Columns(columns =>
    {

        if (HttpContextAccessor.HttpContext.Session.GetString("culture") != "en")
        {

            if ((bool)ViewBag.AccessEditHospitalPatient)
            {
                columns.Bound("").Title(" ").Width(30)
                .ClientTemplate(
                   $@"<a class='tooltip-success grid-btn edit' onClick='EditHospitalPatient(this);' data-id='#=Guid#' data-rel='tooltip' title='{edit_title}' data-original-title='Edit'>
                        <span class='green'>
                            <i class='ace-icon fa fa-pencil bigger-120'></i>
                        </span>
                    </a>
                ");

            }


            columns.Bound(x => x.ReceptionDate).Filterable(false).Format("{0: dd/MM/yyyy HH:mm}").Title(Localizer["EntranceTime"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.RoomId).Filterable(false).Title(Localizer["RoomId"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.DoctorName).Filterable(false).Title(Localizer["SurgeryDoctorName"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.Kind).Filterable(false).Title(Localizer["Operation"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.Age).Filterable(false).Title(Localizer["Age"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.PatientName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["PatientName"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.Index).Filterable(false).Width(5).Title("#").HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" }).Width(30);
            columns.Bound(x => x.Guid).Hidden();
        }
        else
        {
            columns.Bound(x => x.Guid).Hidden();
            columns.Bound(x => x.Index).Filterable(false).Title("#").HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).Width(30);
            columns.Bound(x => x.PatientName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["PatientName"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.Age).Filterable(false).Title(Localizer["Age"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.Kind).Filterable(false).Title(Localizer["Operation"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.DoctorName).Filterable(false).Title(Localizer["SurgeryDoctorName"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.RoomId).Filterable(false).Title(Localizer["RoomId"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.ReceptionDate).Format("{0: dd/MM/yyyy HH:mm}").Filterable(false).Title(Localizer["EntranceTime"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });



            if ((bool)ViewBag.AccessEditHospitalPatient)
            {
                columns.Bound("").Title(" ").Width(30)
                .ClientTemplate(
                   $@"<a class='tooltip-success grid-btn edit' onClick='EditHospitalPatient(this);' data-id='#=Guid#' data-rel='tooltip' title='{edit_title}' data-original-title='Edit'>
                        <span class='green'>
                            <i class='ace-icon fa fa-pencil bigger-120'></i>
                        </span>
                    </a>
                ");

            }


        }


    })

    .DataSource(dataSource => dataSource
    .Ajax()
    .ServerOperation(false)
    .Model(model =>
    {
        model.Id(p => p.Guid);
    })
    //.Sort(sort => sort.Add("InvoiceDate").Descending())
    .PageSize(10)
    .Read(read => read.Action("GetAll", "HospitalPatient").Data("GetPeriodAndStatusForHospitalPatients"))
    )
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
    .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
    .Pageable(pageable => pageable
    .Input(true)
    .Refresh(true)
    .PageSizes(true)
    .ButtonCount(5)
    .Numeric(true)) // Enable paging
    .Sortable().HtmlAttributes(new { @style = "direction: ltr;margin-top:2rem;overflow:auto" }) // Enable sorting

    )
</div>






<h3 id="AreYouSure" class="hidden">@Localizer["AreYouSure"]</h3>
<h3 id="AreYouSureOk" class="hidden">@Localizer["Ok"]</h3>
<h3 id="AreYouSureExit" class="hidden">@Localizer["Exit"]</h3>
<h3 id="CanNotDelete" class="hidden">@Localizer["CanNotDelete"]</h3>


<script>
    function LineItems_Databound(status) {
        if (status == 'Paid') {
            return "<div style='background:lightgreen;border-radius: 5px;'>" + status + " </div>";
        } else {
            return "<div style='background:pink;border-radius: 5px;'>" + status + " </div>";
        }
    }


    $(document).ready(function () {

        $("#kendoHospitalPatientGrid").on("dblclick", "tr.k-state-selected", function (element) {

            $("#kendoHospitalPatientGrid").find("tr.k-state-selected td a.edit").click();

        });

    })


    function EditPatientReception(element) {
        $(".loader").removeClass("hidden");
        let id = $(element).attr("data-id");

        let link = "";

        let clinicSectionlist = $("#sections").data("kendoDropDownList");

        if (clinicSectionlist.text() === "Surgery") {
            link = "/Reception/Edit?Id="
        }
        else if (clinicSectionlist.text() === "Emergency") {
            link = "/EmergencyReception/Edit?Id="
        }
        else {
            link = "/PatientReceptionAnalysis/EditModal?Id="
        }

        $(".page-content").load(link + id, function (responce) {


            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        })
    }

    function EditHospitalPatient(element) {
        $(".loader").removeClass("hidden");
        let id = $(element).attr("data-id");

        let link = "/HospitalPatient/Edit?Id=";

        $(".page-content").load(link + id, function (responce) {

            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        })
    }


    function RemoveReception(element) {

        if (!$("#ERROR_ThisRecordHasDependencyOnItInAnotherEntity").hasClass("hidden")) {
            $("#ERROR_ThisRecordHasDependencyOnItInAnotherEntity").addClass("hidden");
        }
        if (!$("#ERROR_SomeThingWentWrong").hasClass("hidden")) {
            $("#ERROR_SomeThingWentWrong").addClass("hidden");
        }
        $(".loader").removeClass("hidden");
        $('#my-modal-deleteReception').modal('toggle');
        var Id = $(element).attr('data-id');
        $('#btn-deleteReception-accept').attr('data-id', Id);
        $(".loader").fadeIn("slow");
        $(".loader").addClass("hidden");

    }

    $('#btn-deleteReception-accept').on("click", function () {
        $(this).attr("disabled", true);

        $("#ERROR_ThisRecordHasDependencyOnItInAnotherEntity").addClass("hidden");
        $("#ERROR_SomeThingWentWrong").addClass("hidden");

        var Id = $(this).attr('data-id');
        let link = "";

        let clinicSectionlist = $("#sections").data("kendoDropDownList");

        if (clinicSectionlist.text() === "Surgery") {
            link = "/Reception/Remove"
        }
        else if (clinicSectionlist.text() === "Emergency") {
            link = "/EmergencyReception/Remove"
        }
        else {
            link = "/PatientReception/RemoveWithReceives"
        }
        var GridRefreshLink = $("#GridRefreshLink").attr("data-Value");
        if (!IfUserCheckPass(GridRefreshLink)) {
            $('#btn-deleteReception-accept').removeAttr("disabled");
            return;
        }
        var token = $(':input:hidden[name*="RequestVerificationToken"]');
        $(".loader").removeClass("hidden");
        $.ajax({
            type: "Post",
            url: link,
            data: {
                __RequestVerificationToken: token.attr('value'),
                Id: Id
            },
            success: function (response) {
                $('#btn-deleteReception-accept').removeAttr("disabled");

                if (response === "SUCCESSFUL") {
                    $('#my-modal-deleteReception').modal('hide');
                    $(".modal-backdrop:last").remove();
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                    $(".k-pager-refresh")[0].click();
                }
                else if (response === "ERROR_ThisRecordHasDependencyOnItInAnotherEntity") {
                    $("#ERROR_ThisRecordHasDependencyOnItInAnotherEntity").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                }
                else if (response === "ERROR_SomeThingWentWrong") {
                    $("#ERROR_SomeThingWentWrong").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                }
                else if (response === "AreYouSure") {
                    AskForDelete(Id);
                }
                else if (response === "CanNotDelete") {
                    CanNotDelete();
                }
            }
        });
    });




    function AskForDelete(Id) {

        $('#my-modal-delete').modal('hide');
        $(".modal-backdrop:last").remove();
        $(".loader").fadeIn("slow");
        $(".loader").addClass("hidden");

        let AreYouSure = $('#AreYouSure').text();
        let ok = $('#AreYouSureOk').text();
        let exit = $('#AreYouSureExit').text();

        bootbox.confirm({
            message: AreYouSure,
            className: 'bootbox-class',
            buttons: {
                confirm: {
                    label: ok,
                    className: 'btn-success'
                },
                cancel: {
                    label: exit,
                    className: 'btn-danger'
                }
            },
            callback: function (result) {

                if (result) {

                    $(".loader").removeClass("hidden");

                    if (clinicSectionlist.text() === "Surgery") {
                        link = "/Reception/Remove"
                    }
                    else if (clinicSectionlist.text() === "Emergency") {
                        link = "/EmergencyReception/Remove"
                    }
                    else {
                        link = "/PatientReception/RemoveWithReceives"
                    }


                    var token = $(':input:hidden[name*="RequestVerificationToken"]');
                    $(".loader").removeClass("hidden");
                    $.ajax({
                        type: "Post",
                        url: link,
                        data: {
                            __RequestVerificationToken: token.attr('value'),
                            Id: Id
                        },
                        success: function (response) {
                            $(".k-pager-refresh")[0].click();
                            $(".loader").fadeIn("slow");
                            $(".loader").addClass("hidden");
                        }
                    });

                }

            }
        })
    }

    function CanNotDelete() {

        let CanNotDelete = $('#CanNotDelete').text();

        $('#my-modal-delete').modal('hide');
        $(".modal-backdrop:last").remove();
        $(".loader").fadeIn("slow");
        $(".loader").addClass("hidden");
        bootbox.alert({
            message: CanNotDelete,
            className: 'bootbox-class'

        });
    }

    var receptionId;

    function AddNewReceived(element) {
        receptionId = $(element).attr('data-id');
        let amount = $(element).attr('data-amount');
        var link = "/PatientReceptionReceived/AddNewModal";
        $(".loader").removeClass("hidden");
        $('#PatientReceptionReceivedModal').modal('toggle');
        $('#PatientReceptionReceivedModal-body').load(link, function () {
            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
            $("#PatientReceptionReceivedAmount").val(amount);
        });

    }

    function addNewPatientReceptionReceived() {

        let amount = parseFloat($("#PatientReceptionReceivedAmount").val());


        if (amount === 0 || amount === null || amount === undefined || Number.isNaN(amount)) {
            $("#PatientReceptionReceivedAmount-box").removeClass('hidden');
            return;
        }


        var data = { PatientReceptionId: receptionId, Amount: amount, AmountCurrencyId: $("#PatientReceptionReceivedAmountCorrencyId").val() };
        $(".loader").removeClass("hidden");

        $.ajax({
            type: "Post",
            url: "/PatientReceptionReceived/AddOrUpdate",
            data: data,
            success: function (response) {
                if (response !== 0) {

                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                    $(".k-pager-refresh")[0].click();
                }
            }
        });


        $('#PatientReceptionReceivedModal').modal('toggle');
        $('#PatientReceptionReceivedModal-body').empty();

    }


    function closePatientReceptionReceivedModal() {
        $('#PatientReceptionReceivedModal').modal('toggle');
        $('#PatientReceptionReceivedModal-body').empty();
    }


</script>