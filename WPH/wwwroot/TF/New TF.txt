



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'User' AND COLUMN_NAME = 'IsUser') 
BEGIN
	ALTER TABLE [User]
	ADD IsUser bit null
END
Go


IF NOT EXISTS(SELECT [Name] FROM   Access WHERE  [Name] = 'View') 
BEGIN
	Insert into Access([Name])values('View')
END
Go


IF NOT EXISTS(SELECT EName FROM   BaseInfoGeneralType WHERE  EName = 'ClearanceType') 
BEGIN
	Insert into BaseInfoGeneralType(EName,FName)values('ClearanceType',N'نوع ترخیص')
END
GO


IF NOT EXISTS(SELECT EName FROM   BaseInfoGeneralType WHERE  EName = 'AttachmentType') 
BEGIN
	Insert into BaseInfoGeneralType(EName,FName)values('AttachmentType',N'نوع پیوست')
END
GO


IF NOT EXISTS(SELECT EName FROM   BaseInfoGeneralType WHERE  EName = 'PaymentStatus') 
BEGIN
	Insert into BaseInfoGeneralType(EName,FName)values('PaymentStatus',N'وضعیت پرداخت')
END
GO


IF NOT EXISTS(SELECT EName FROM   BaseInfoGeneralType WHERE  EName = 'SalaryType') 
BEGIN
	Insert into BaseInfoGeneralType(EName,FName)values('SalaryType',N'نوع دستمزد')
END
GO


IF NOT EXISTS(SELECT EName FROM   BaseInfoGeneralType WHERE  EName = 'PurposeType') 
BEGIN
	Insert into BaseInfoGeneralType(EName,FName)values('PurposeType',N'نوع هدف')
END
GO


IF NOT EXISTS(SELECT EName FROM   BaseInfoGeneralType WHERE  EName = 'VariableType') 
BEGIN
	Insert into BaseInfoGeneralType(EName,FName)values('VariableType',N'نوع متغییر')
END
GO


IF NOT EXISTS(SELECT EName FROM   BaseInfoGeneralType WHERE  EName = 'AnesthesiologistionType') 
BEGIN
	Insert into BaseInfoGeneralType(EName,FName)values('AnesthesiologistionType',N'نوع بیهوشی')
END
GO


IF NOT EXISTS(SELECT EName FROM   BaseInfoGeneralType WHERE  EName = 'ClassificationType') 
BEGIN
	Insert into BaseInfoGeneralType(EName,FName)values('ClassificationType',N'نوع طبقه بندی')
END
GO


IF NOT EXISTS(SELECT EName FROM   BaseInfoGeneralType WHERE  EName = 'InvoiceType') 
BEGIN
	Insert into BaseInfoGeneralType(EName,FName)values('InvoiceType',N'نوع فاکتور')
END
GO



IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'Clearance') 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'ClearanceType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Clearance',1,@id)

END
Go


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'MainAttachment' ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'AttachmentType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('MainAttachment',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'OtherAttachment' ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'AttachmentType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('OtherAttachment',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'PoliceReport') 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'AttachmentType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('PoliceReport',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'Paid' ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'PaymentStatus')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Paid',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'Unpaid') 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'PaymentStatus')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Unpaid',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'Salary' ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'SalaryType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Salary',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'Reward') 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'SalaryType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Reward',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'Wage' ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'SalaryType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Wage',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'Operation' ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'ServiceType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Operation',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'Main' ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'SectionType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Main',1,@id)
END
Go

IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'Store' ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'SectionType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Store',5,@id)
END
Go


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'Surgery' ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'PurposeType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Surgery',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'Observation' ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'PurposeType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Observation',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'Service') 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'PurposeType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Service',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'Serum') 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'ServiceType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Serum',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'Other') 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'ServiceType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Other',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'Stitch') 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'ServiceType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Stitch',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name]
          FROM   BaseInfoGeneral
          WHERE  [Name] = 'Text'
                 ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'VariableType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Text',1,@id)
END
GO


IF NOT EXISTS(SELECT [Name]
          FROM   BaseInfoGeneral
          WHERE  [Name] = N'عام'
                 ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'AnesthesiologistionType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values(N'عام',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name]
          FROM   BaseInfoGeneral
          WHERE  [Name] = N'نصفی'
                 ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'AnesthesiologistionType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values(N'نصفی',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name]
          FROM   BaseInfoGeneral
          WHERE  [Name] = N'موضعی'
                 ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'AnesthesiologistionType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values(N'موضعی',1,@id)
END
Go


IF NOT EXISTS(SELECT [Name]
          FROM   BaseInfoGeneral
          WHERE  [Name] = N'کبری'
                 ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'ClassificationType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values(N'کبری',1,@id)
END
GO


IF NOT EXISTS(SELECT [Name]
          FROM   BaseInfoGeneral
          WHERE  [Name] = N'فوق کبری'
                 ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'ClassificationType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values(N'فوق کبری',1,@id)
END
GO


IF NOT EXISTS(SELECT [Name]
          FROM   BaseInfoGeneral
          WHERE  [Name] = N'خاصه'
                 ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'ClassificationType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values(N'خاصه',1,@id)
END
GO


IF NOT EXISTS(SELECT [Name]
          FROM   BaseInfoGeneral
          WHERE  [Name] = 'NotClearance'
                 ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'ClearanceType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('NotClearance',1,@id)
END
GO


IF NOT EXISTS(SELECT [Name]
          FROM   BaseInfoGeneral
          WHERE  [Name] = 'Add'
                 ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'InvoiceType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Add',1,@id)
END
GO


IF NOT EXISTS(SELECT [Name]
          FROM   BaseInfoGeneral
          WHERE  [Name] = 'Use'
                 ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'InvoiceType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Use',1,@id)
END
GO


IF NOT EXISTS(SELECT [Name]
          FROM   BaseInfoGeneral
          WHERE  [Name] = 'Return'
                 ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'InvoiceType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Return',1,@id)
END
GO


IF NOT EXISTS(SELECT [Name]
          FROM   BaseInfoGeneral
          WHERE  [Name] = 'Damage'
                 ) 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'InvoiceType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('Damage',1,@id)
END
GO


IF NOT EXISTS(SELECT [Name] FROM   BaseInfoGeneral WHERE  [Name] = 'SectionUse') 
BEGIN
DECLARE @id INT;
		  SET @id =  (SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  EName = 'InvoiceType')
	Insert into BaseInfoGeneral([Name],Priority,TypeId)values('SectionUse',1,@id)
END
GO


IF NOT EXISTS(SELECT [EName] FROM   BaseInfoType WHERE  [EName] = 'ProductType') 
BEGIN

	Insert into BaseInfoType([EName],[FName])values('ProductType',N'نوع محصول')
END
GO


IF EXISTS(SELECT [EName]
          FROM   BaseInfoType
          WHERE  [EName] = 'Classification'
                 ) 
BEGIN

DECLARE @id uniqueidentifier;
		  SET @id = (
SELECT GUID
          FROM   BaseInfoType
          WHERE  [EName] = 'Classification')
		  delete from BaseInfo where TypeId = @id
		  delete from BaseInfoSectionType where BaseInfoTypeId = @id
    delete from BaseInfoType where [EName] = 'Classification'
END
GO


IF EXISTS(SELECT [EName]
          FROM   BaseInfoType
          WHERE  [EName] = 'RoomType'
                 ) 
BEGIN
DECLARE @id uniqueidentifier;
		  SET @id = (
SELECT GUID
          FROM   BaseInfoType
          WHERE  [EName] = 'RoomType')
		  delete from BaseInfo where TypeId = @id
		  delete from BaseInfoSectionType where BaseInfoTypeId = @id
    delete from BaseInfoType where [EName] = 'RoomType'
END
GO


IF EXISTS(SELECT [EName]
          FROM   BaseInfoType
          WHERE  [EName] = 'AnesthesiologistionType'
                 ) 
BEGIN
DECLARE @id uniqueidentifier;
		  SET @id = (
SELECT GUID
          FROM   BaseInfoType
          WHERE  [EName] = 'AnesthesiologistionType')
		  delete from BaseInfo where TypeId = @id
		  delete from BaseInfoSectionType where BaseInfoTypeId = @id
    delete from BaseInfoType where [EName] = 'AnesthesiologistionType'
END
GO


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Surgery'
                 AND COLUMN_NAME = 'ClinicSectionId') 
BEGIN
	ALTER TABLE Surgery
	ADD ClinicSectionId uniqueidentifier null

	ALTER TABLE [dbo].[Surgery]  WITH CHECK ADD  CONSTRAINT [FK_Surgery_ClinicSection] FOREIGN KEY([ClinicSectionId])
REFERENCES [dbo].[ClinicSection] ([GUID])


ALTER TABLE [dbo].[Surgery] CHECK CONSTRAINT [FK_Surgery_ClinicSection]

END
Go


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Surgery'
                 AND COLUMN_NAME = 'SurgeryDate') 
BEGIN
	ALTER TABLE Surgery
	ADD SurgeryDate datetime null


END
Go


IF EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Surgery'
                 AND COLUMN_NAME = 'AnesthesiologistId') 
BEGIN

	ALTER TABLE Surgery
	DROP CONSTRAINT [FK_Surgery_Doctor];

	ALTER TABLE Surgery
	DROP COLUMN AnesthesiologistId;
END
Go


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'PatientImage'
          ) 
BEGIN
	
CREATE TABLE [dbo].[PatientImage](
	[GUID] [uniqueidentifier] NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [uniqueidentifier] NULL,
	[ImageAddress] [nvarchar](500) NULL,
	[FileName] [nvarchar](200) NULL,
	[VisitId] [uniqueidentifier] NULL,
	[ImageDateTime] [datetime] NULL,
 CONSTRAINT [PK_PatientImage] PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[PatientImage]  WITH CHECK ADD  CONSTRAINT [FK_PatientImage_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[Patient] ([GUID])


ALTER TABLE [dbo].[PatientImage] CHECK CONSTRAINT [FK_PatientImage_Patient]
END
GO


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'HumanResourceSalaryPayment'
          ) 
BEGIN
	
CREATE TABLE [dbo].[HumanResourceSalaryPayment](
	[GUID] [uniqueidentifier] NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[HumanResourceSalaryId] [uniqueidentifier] NULL,
	[Amount] [numeric](20, 7) NULL,
	[CreatedUserId] [uniqueidentifier] NULL,
	[CreatedDate] [datetime] NULL,
	[Description] [nvarchar](max) NULL,
	[CurrencyId] [int] NULL,
	[ModifiedUserId] [uniqueidentifier] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_HumanResourceSalaryPayment] PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]


ALTER TABLE [dbo].[HumanResourceSalaryPayment] ADD  CONSTRAINT [DF_HumanResourceSalaryPayment_GUID]  DEFAULT (newsequentialid()) FOR [GUID]

ALTER TABLE [dbo].[HumanResourceSalaryPayment]  WITH CHECK ADD  CONSTRAINT [FK_HumanResourceSalaryPayment_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[HumanResourceSalaryPayment] CHECK CONSTRAINT [FK_HumanResourceSalaryPayment_BaseInfoGeneral]

ALTER TABLE [dbo].[HumanResourceSalaryPayment]  WITH CHECK ADD  CONSTRAINT [FK_HumanResourceSalaryPayment_HumanResourceSalary] FOREIGN KEY([HumanResourceSalaryId])
REFERENCES [dbo].[HumanResourceSalary] ([GUID])

ALTER TABLE [dbo].[HumanResourceSalaryPayment] CHECK CONSTRAINT [FK_HumanResourceSalaryPayment_HumanResourceSalary]

ALTER TABLE [dbo].[HumanResourceSalaryPayment]  WITH CHECK ADD  CONSTRAINT [FK_HumanResourceSalaryPayment_User] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[HumanResourceSalaryPayment] CHECK CONSTRAINT [FK_HumanResourceSalaryPayment_User]


ALTER TABLE [dbo].[HumanResourceSalaryPayment]  WITH CHECK ADD  CONSTRAINT [FK_HumanResourceSalaryPayment_UserModify] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[HumanResourceSalaryPayment] CHECK CONSTRAINT [FK_HumanResourceSalaryPayment_UserModify]
END
GO



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Product') 
BEGIN
	
CREATE TABLE [dbo].[Product](
	[GUID] [uniqueidentifier] NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](150) NULL,
	[ProducerId] [uniqueidentifier] NULL,
	[Barcode] [nvarchar](50) NULL,
	[ProductTypeId] [uniqueidentifier] NULL,
	[CreatedDate] [datetime] NOT NULL,
	[CreateUserId] [uniqueidentifier] NOT NULL,
	[ModifiedDate] [datetime] NULL,
	[ModifiedUserId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_Product] PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[Product] ADD  CONSTRAINT [DF_Product_GUID]  DEFAULT (newsequentialid()) FOR [GUID]


ALTER TABLE [dbo].[Product]  WITH CHECK ADD  CONSTRAINT [FK_Producer_BaseInfo] FOREIGN KEY([ProducerId])
REFERENCES [dbo].[BaseInfo] ([GUID])


ALTER TABLE [dbo].[Product] CHECK CONSTRAINT [FK_Producer_BaseInfo]


ALTER TABLE [dbo].[Product]  WITH CHECK ADD  CONSTRAINT [FK_ProductCreateUser_User] FOREIGN KEY([CreateUserId])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[Product] CHECK CONSTRAINT [FK_ProductCreateUser_User]


ALTER TABLE [dbo].[Product]  WITH CHECK ADD  CONSTRAINT [FK_ProductModifiedUser_User] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[Product] CHECK CONSTRAINT [FK_ProductModifiedUser_User]


ALTER TABLE [dbo].[Product]  WITH CHECK ADD  CONSTRAINT [FK_ProductType_BaseInfo] FOREIGN KEY([ProductTypeId])
REFERENCES [dbo].[BaseInfo] ([GUID])

ALTER TABLE [dbo].[Product] CHECK CONSTRAINT [FK_ProductType_BaseInfo]

END
GO



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'InvoiceDetail') 
BEGIN
	
CREATE TABLE [dbo].[InvoiceDetail](
	[GUID] [uniqueidentifier] NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ProductIdDMS] [int] NULL,
	[ProductIdWPH] [uniqueidentifier] NULL,
	[Number] [numeric](20, 7) NULL,
	[Price] [numeric](20, 7) NULL,
	[ExpDate] [datetime] NULL,
	[ClinicSectionId] [uniqueidentifier] NULL,
	[InvoiceTypeId] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[InvoiceDate] [datetime] NULL,
	[CreateUserId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_InvoiceDetail] PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[InvoiceDetail] ADD  CONSTRAINT [DF_InvoiceDetail_GUID]  DEFAULT (newsequentialid()) FOR [GUID]


ALTER TABLE [dbo].[InvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_ClinicSectionId_ClinicSection] FOREIGN KEY([ClinicSectionId])
REFERENCES [dbo].[ClinicSection] ([GUID])


ALTER TABLE [dbo].[InvoiceDetail] CHECK CONSTRAINT [FK_ClinicSectionId_ClinicSection]


ALTER TABLE [dbo].[InvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_InvoiceDetail_User] FOREIGN KEY([CreateUserId])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[InvoiceDetail] CHECK CONSTRAINT [FK_InvoiceDetail_User]


ALTER TABLE [dbo].[InvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_InvoiceType_BaseInfoGeneral] FOREIGN KEY([InvoiceTypeId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])


ALTER TABLE [dbo].[InvoiceDetail] CHECK CONSTRAINT [FK_InvoiceType_BaseInfoGeneral]


ALTER TABLE [dbo].[InvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_WPH_Product] FOREIGN KEY([ProductIdWPH])
REFERENCES [dbo].[Product] ([GUID])


ALTER TABLE [dbo].[InvoiceDetail] CHECK CONSTRAINT [FK_WPH_Product]

END
GO


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Item' AND COLUMN_NAME = 'ClinicSectionId') 
BEGIN
	ALTER TABLE Item
	ADD ClinicSectionId uniqueidentifier null

	ALTER TABLE [dbo].[Item]  WITH CHECK ADD  CONSTRAINT [FK_Item_ClinicSection] FOREIGN KEY([ClinicSectionId])
REFERENCES [dbo].[ClinicSection] ([GUID])

ALTER TABLE [dbo].[Item] CHECK CONSTRAINT [FK_Item_ClinicSection]

END
Go


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Reception' AND COLUMN_NAME = 'ReceptionInvoiceNum') 
BEGIN
	ALTER TABLE Reception
	ADD ReceptionInvoiceNum nvarchar(50) null
END
Go


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Reception'
                 AND COLUMN_NAME = 'HospitalReception') 
BEGIN
	ALTER TABLE Reception
	ADD HospitalReception bit null
END
Go


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'ReceptionClinicSection'
                 AND COLUMN_NAME = 'Description') 
BEGIN
	ALTER TABLE ReceptionClinicSection
	ADD Description nvarchar(500) null
END
Go


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'ReceptionClinicSection'
                 AND COLUMN_NAME = 'DestinationReceptionId') 
BEGIN
	ALTER TABLE ReceptionClinicSection
	ADD DestinationReceptionId uniqueidentifier null

	ALTER TABLE [dbo].[ReceptionClinicSection]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionClinicSection_Reception1] FOREIGN KEY([DestinationReceptionId])
REFERENCES [dbo].[Reception] ([GUID])


ALTER TABLE [dbo].[ReceptionClinicSection] CHECK CONSTRAINT [FK_ReceptionClinicSection_Reception1]

END
Go



IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionService' AND COLUMN_NAME = 'PayerName') 
BEGIN
	ALTER TABLE ReceptionService
	DROP COLUMN PayerName;
END
Go


IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionService' AND COLUMN_NAME = 'ReceivedAmount') 
BEGIN
	ALTER TABLE ReceptionService
	DROP COLUMN ReceivedAmount;
END
Go


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionService' AND COLUMN_NAME = 'Discount') 
BEGIN
	ALTER TABLE ReceptionService
	ADD Discount numeric(20, 7) null
END
Go


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionService' AND COLUMN_NAME = 'DiscountCurrencyId') 
BEGIN
	ALTER TABLE ReceptionService
	ADD DiscountCurrencyId int null

	ALTER TABLE [dbo].[ReceptionService]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionService_BaseInfoGeneral] FOREIGN KEY([DiscountCurrencyId])
 REFERENCES [dbo].[BaseInfoGeneral] ([Id])


ALTER TABLE [dbo].[ReceptionService] CHECK CONSTRAINT [FK_ReceptionService_BaseInfoGeneral]
END
Go

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'ReceptionService'
                 AND COLUMN_NAME = 'CreatedUserId') 
BEGIN
	ALTER TABLE ReceptionService
	ADD CreatedUserId uniqueidentifier null
	ALTER TABLE [dbo].[ReceptionService]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionService_User] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[ReceptionService] CHECK CONSTRAINT [FK_ReceptionService_User]

END
Go


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionService' AND COLUMN_NAME = 'CreatedDate') 
BEGIN
	ALTER TABLE ReceptionService
	ADD CreatedDate datetime null
END
Go


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionService' AND COLUMN_NAME = 'ServiceDate') 
BEGIN
	ALTER TABLE ReceptionService
	ADD ServiceDate datetime null
END
Go


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionService' AND COLUMN_NAME = 'ProductId') 
BEGIN
	ALTER TABLE ReceptionService
	ADD ProductId uniqueidentifier null
	ALTER TABLE [dbo].[ReceptionService]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionService_Product] FOREIGN KEY([ProductId])
REFERENCES [dbo].[Product] ([GUID])

ALTER TABLE [dbo].[ReceptionService] CHECK CONSTRAINT [FK_ReceptionService_Product]
END
Go


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionService' AND COLUMN_NAME = 'ProductIdDMS') 
BEGIN
	ALTER TABLE ReceptionService
	ADD ProductIdDMS int null
END
Go


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionServiceReceived' ) 
BEGIN
	
CREATE TABLE [dbo].[ReceptionServiceReceived](
	[GUID] [uniqueidentifier] NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReceptionServiceId] [uniqueidentifier] NULL,
	[PayerName] [nvarchar](250) NULL,
	[Amount] [numeric](20, 7) NULL,
	[CurrencyId] [int] NULL,
	[CreatedUserId] [uniqueidentifier] NULL,
	[CreatedDate] [datetime] NULL,
	[AmountStatus] [bit] NULL,
 CONSTRAINT [PK_ReceptionServiceReceived] PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[ReceptionServiceReceived] ADD  CONSTRAINT [DF_ReceptionServiceReceived_GUID]  DEFAULT (newsequentialid()) FOR [GUID]


ALTER TABLE [dbo].[ReceptionServiceReceived]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionServiceReceived_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])


ALTER TABLE [dbo].[ReceptionServiceReceived] CHECK CONSTRAINT [FK_ReceptionServiceReceived_BaseInfoGeneral]


ALTER TABLE [dbo].[ReceptionServiceReceived]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionServiceReceived_ReceptionService] FOREIGN KEY([ReceptionServiceId])
REFERENCES [dbo].[ReceptionService] ([GUID])


ALTER TABLE [dbo].[ReceptionServiceReceived] CHECK CONSTRAINT [FK_ReceptionServiceReceived_ReceptionService]


ALTER TABLE [dbo].[ReceptionServiceReceived]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionServiceReceived_User] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[ReceptionServiceReceived] CHECK CONSTRAINT [FK_ReceptionServiceReceived_User]

END
GO


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionTemperature' ) 
BEGIN
	
CREATE TABLE [dbo].[ReceptionTemperature](
	[GUID] [uniqueidentifier] NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReceptionId] [uniqueidentifier] NULL,
	[Temperature] [numeric](6, 2) NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedUserId] [uniqueidentifier] NULL,
	[TemperatureDate] [datetime] NULL,
 CONSTRAINT [PK_ReceptionTemperature] PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[ReceptionTemperature] ADD  CONSTRAINT [DF_ReceptionTemperature_GUID]  DEFAULT (newsequentialid()) FOR [GUID]


ALTER TABLE [dbo].[ReceptionTemperature]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionTemperature_Reception] FOREIGN KEY([ReceptionId])
REFERENCES [dbo].[Reception] ([GUID])


ALTER TABLE [dbo].[ReceptionTemperature] CHECK CONSTRAINT [FK_ReceptionTemperature_Reception]

END
GO


IF NOT EXISTS(SELECT *  FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Service' AND COLUMN_NAME = 'TypeId') 
BEGIN
	ALTER TABLE Service
	ADD TypeId int null

	ALTER TABLE [dbo].[Service]  WITH CHECK ADD  CONSTRAINT [FK_TypeId_BaseInfoGeneral] FOREIGN KEY([TypeId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])


ALTER TABLE [dbo].[Service] CHECK CONSTRAINT [FK_TypeId_BaseInfoGeneral]

END
Go


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Service' AND COLUMN_NAME = 'DoctorWage') 
BEGIN
	ALTER TABLE Service
	ADD DoctorWage numeric(20, 7) null

END
Go


IF NOT EXISTS(SELECT [Name] FROM   SubSystem WHERE  [Name] = 'Service') 
BEGIN
DECLARE @id int;
		  SET @id = (
SELECT Id
          FROM   SubSystem
          WHERE  [Name] = 'BaseInfo')
	Insert into SubSystem(Name,Active,Icon,Link,Parent,Priority,ShowName)values('Service',1,'','/Service/Form',@id,5,'Service')
END
GO


IF NOT EXISTS(SELECT [Name] FROM   SubSystem WHERE  [Name] = 'SubDoctor' ) 
BEGIN
DECLARE @id int;
		  SET @id = (
SELECT Id
          FROM   SubSystem
          WHERE  [Name] = 'Doctor')
	Insert into SubSystem(Name,Active,Icon,Link,Parent,Priority,ShowName)values('SubDoctor',1,'','/Doctor/Form',@id,1,'Doctors')
END
GO


IF NOT EXISTS(SELECT [Name]
          FROM   SubSystem
          WHERE  [Name] = 'Cash'
                 ) 
BEGIN

	Insert into SubSystem(Name,Active,Icon,Link,Parent,Priority,ShowName)values('Cash',1,'fa fa-credit-card','/Cash/Form',0,12,'Cash')
END
GO

IF NOT EXISTS(SELECT [Name]
          FROM   SubSystem
          WHERE  [Name] = 'HospitalPatient'
                 ) 
BEGIN

	Insert into SubSystem(Name,Active,Icon,Link,Parent,Priority,ShowName)values('HospitalPatient',1,'fa-book','/HospitalPatient/Form',0,13,'HospitalPatient')
END
GO

IF NOT EXISTS(SELECT [Name]
          FROM   SubSystem
          WHERE  [Name] = 'Storeroom'
                 ) 
BEGIN

	Insert into SubSystem(Name,Active,Icon,Link,Parent,Priority,ShowName)values('Storeroom',1,'fa fa-institution','/Product/Form',0,14,'Storeroom')
END
GO

IF NOT EXISTS(SELECT [Name]
          FROM   SubSystem
          WHERE  [Name] = 'RoomBed'
                 ) 
BEGIN
DECLARE @id int;
		  SET @id = (
SELECT Id
          FROM   SubSystem
          WHERE  [Name] = 'RoomManagement')
	Insert into SubSystem(Name,Active,Parent,Priority,ShowName)values('RoomBed',0,@id,2,'Room Beds')
END
GO

IF NOT EXISTS(SELECT [Name]
          FROM   SubSystem
          WHERE  [Name] = 'RoomItem'
                 ) 
BEGIN
DECLARE @id int;
		  SET @id = (
SELECT Id
          FROM   SubSystem
          WHERE  [Name] = 'RoomManagement')
	Insert into SubSystem(Name,Active,Parent,Priority,ShowName)values('RoomItem',0,@id,2,'Room Items')
END
GO

IF NOT EXISTS(SELECT [Name]
          FROM   SubSystem
          WHERE  [Name] = 'UserAccess'
                 ) 
BEGIN

	Insert into SubSystem(Name,Active,Parent,Priority,ShowName)values('UserAccess',0,0,2,'User Access')
END
GO

IF NOT EXISTS(SELECT [Name]
          FROM   SubSystem
          WHERE  [Name] = 'HumanResourceSalary'
                 ) 
BEGIN
DECLARE @id int;
		  SET @id = (
SELECT Id
          FROM   SubSystem
          WHERE  [Name] = 'Human Resource')
	Insert into SubSystem(Name,Active,Parent,Priority,ShowName)values('HumanResourceSalary',0,@id,11,'Human Resource Salary')
END
GO

IF NOT EXISTS(SELECT [Name]
          FROM   SubSystem
          WHERE  [Name] = 'HumanResourceSalaryPayment'
                 ) 
BEGIN
DECLARE @id int;
		  SET @id = (
SELECT Id
          FROM   SubSystem
          WHERE  [Name] = 'Human Resource')
	Insert into SubSystem(Name,Active,Parent,Priority,ShowName)values('HumanResourceSalaryPayment',0,@id,11,'Human Resource Salary Payment')
END
GO

IF NOT EXISTS(SELECT [Name]
          FROM   SubSystem
          WHERE  [Name] = 'InvoiceDetails'
                 ) 
BEGIN

	Insert into SubSystem(Name,Active,Parent,Priority,ShowName)values('InvoiceDetails',0,0,15,'InvoiceDetails')
END
GO


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'InvoiceDetail'
                 AND COLUMN_NAME = 'ReceptionServiceId') 
BEGIN
	ALTER TABLE InvoiceDetail
	ADD ReceptionServiceId uniqueidentifier null

	ALTER TABLE [dbo].[InvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_InvoiceDetail_ReceptionService] FOREIGN KEY([ReceptionServiceId])
REFERENCES [dbo].[ReceptionService] ([GUID])


ALTER TABLE [dbo].[InvoiceDetail] CHECK CONSTRAINT [FK_InvoiceDetail_ReceptionService]


END
Go


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionService' AND COLUMN_NAME = 'Explanation') 
BEGIN
	ALTER TABLE ReceptionService
	ADD Explanation nvarchar(100) null

	
END
Go


IF NOT EXISTS(SELECT [Name]
          FROM   BaseInfoGeneral
          WHERE  [Name] = 'DispatcherDoctor'
                 ) 
BEGIN

DECLARE @id int;
		  SET @id = (
SELECT Id
          FROM   BaseInfoGeneralType
          WHERE  [EName] = 'DoctorRole')


	Insert into BaseInfoGeneral(Name,Priority,TypeId)values('DispatcherDoctor',4,@id)
END
GO


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'ClinicSection'
                 AND COLUMN_NAME = 'Priority') 
BEGIN
	ALTER TABLE ClinicSection
	ADD Priority int null

	
END
Go

ALTER TABLE Service
ALTER COLUMN ClinicSectionId uniqueidentifier NULL

Go



IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='SalaryReport')
   BEGIN
       INSERT INTO dbo.SubSystem ( Name, Priority, Parent,  Link, ShowName, Active, Icon ) VALUES ( N'SalaryReport', 3, (SELECT Id FROM dbo.SubSystem WHERE Name='Reports'), N'/HumanResource/ShowReport', N'Salary Report', 1, NULL )
   END

GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SalaryReport') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SalaryReport'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SalaryReport') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SalaryReport'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SalaryReport') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Main' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SalaryReport'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Main' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SalaryReport') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Print'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SalaryReport'),(SELECT Id FROM dbo.Access WHERE Name='Print'))
   END
GO

IF NOT EXISTS(SELECT COLUMNPROPERTY(OBJECT_ID('dbo.service', 'U'), 'ClinicSectionId', 'AllowsNull'))
BEGIN
	ALTER TABLE dbo.Service ALTER COLUMN ClinicSectionId UNIQUEIDENTIFIER NULL
END

GO

IF NOT EXISTS (select * from sys.objects where object_id = OBJECT_ID(N'[FK_Doctor_ClinicSection]') AND parent_object_id = OBJECT_ID('Doctor'))
BEGIN
	ALTER TABLE dbo.Doctor
	ADD CONSTRAINT FK_Doctor_ClinicSection
	FOREIGN KEY (ClinicSectionId) REFERENCES dbo.ClinicSection(GUID);
END

GO

IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Item' AND COLUMN_NAME = 'ClinicSectionId') 
BEGIN
	ALTER TABLE dbo.Item ADD ClinicSectionId UNIQUEIDENTIFIER NULL;
	ALTER TABLE dbo.Item
	ADD CONSTRAINT FK_Item_ClinicSection
	FOREIGN KEY (ClinicSectionId) REFERENCES dbo.ClinicSection(GUID);
END
GO
IF EXISTS(SELECT Name
          FROM   BaseInfoGeneral
          WHERE  Name = 'ECG'
                 ) 
BEGIN


	delete From BaseInfoGeneral where Name = 'ECG'
END
GO

IF EXISTS(SELECT Name
          FROM   BaseInfoGeneral
          WHERE  Name = 'Serum'
                 ) 
BEGIN


	delete From BaseInfoGeneral where Name = 'Serum'
END
GO

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'ClinicSectionSetting'
                 AND COLUMN_NAME = 'InputType') 
BEGIN
	ALTER TABLE ClinicSectionSetting
	ADD InputType nvarchar(250) null


END
Go



IF NOT EXISTS(SELECT *
          FROM   ClinicSectionSetting
          WHERE  SName = 'UseDMS'
                 ) 
BEGIN
	INSERT INTO ClinicSectionSetting(SName,SectionTypeId,InputType)values('UseDMS',38,'bool')

END
Go



IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'PatientImage'
                 AND COLUMN_NAME = 'ThumbNailAddress') 
BEGIN
	ALTER TABLE PatientImage
	ADD ThumbNailAddress nvarchar(500) null


END
Go


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'HumanResourceSalaryPayment'
                 AND COLUMN_NAME = 'ModifiedUserId') 
BEGIN
	ALTER TABLE HumanResourceSalaryPayment
	ADD ModifiedUserId uniqueidentifier null
ALTER TABLE [dbo].[HumanResourceSalaryPayment]  WITH CHECK ADD  CONSTRAINT [FK_HumanResourceSalaryPayment_UserModify] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[HumanResourceSalaryPayment] CHECK CONSTRAINT [FK_HumanResourceSalaryPayment_UserModify]

END
Go

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'HumanResourceSalaryPayment'
                 AND COLUMN_NAME = 'ModifiedDate') 
BEGIN
	ALTER TABLE HumanResourceSalaryPayment
	ADD ModifiedDate datetime null


END
Go

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Patient'
                 AND COLUMN_NAME = 'IdentityNumber') 
BEGIN
	ALTER TABLE Patient
	ADD IdentityNumber nvarchar(50) null


END
Go

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Reception'
                 AND COLUMN_NAME = 'PurposeId') 
BEGIN
	ALTER TABLE Reception
	ADD PurposeId int null
ALTER TABLE [dbo].[Reception]  WITH CHECK ADD  CONSTRAINT [FK_Reception_BaseInfoGeneral4] FOREIGN KEY([PurposeId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])


ALTER TABLE [dbo].[Reception] CHECK CONSTRAINT [FK_Reception_BaseInfoGeneral4]


END
Go

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Reception'
                 AND COLUMN_NAME = 'ChiefComplaint') 
BEGIN
	ALTER TABLE Reception
	ADD ChiefComplaint nvarchar(250) null


END
Go

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Reception'
                 AND COLUMN_NAME = 'Examination') 
BEGIN
	ALTER TABLE Reception
	ADD Examination nvarchar(250) null


END
Go

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Reception'
                 AND COLUMN_NAME = 'Discharge') 
BEGIN
	ALTER TABLE Reception
	ADD Discharge bit null


END
Go

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Reception'
                 AND COLUMN_NAME = 'PaymentStatusId') 
BEGIN
	ALTER TABLE Reception
	ADD PaymentStatusId int null
ALTER TABLE [dbo].[Reception]  WITH CHECK ADD  CONSTRAINT [FK_Reception_BaseInfoGeneral5] FOREIGN KEY([PaymentStatusId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])


ALTER TABLE [dbo].[Reception] CHECK CONSTRAINT [FK_Reception_BaseInfoGeneral5]

END
Go



IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'ReceptionTemperature'
                 AND COLUMN_NAME = 'PulseRate') 
BEGIN
	ALTER TABLE ReceptionTemperature
	ADD PulseRate numeric(6, 2) null


END
Go

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'ReceptionTemperature'
                 AND COLUMN_NAME = 'SYSBloodPressure') 
BEGIN
	ALTER TABLE ReceptionTemperature
	ADD SYSBloodPressure numeric(6, 2) null


END
Go

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'ReceptionTemperature'
                 AND COLUMN_NAME = 'DIABloodPressure') 
BEGIN
	ALTER TABLE ReceptionTemperature
	ADD DIABloodPressure numeric(6, 2) null


END
Go

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'ReceptionTemperature'
                 AND COLUMN_NAME = 'RespirationRate') 
BEGIN
	ALTER TABLE ReceptionTemperature
	ADD RespirationRate numeric(6, 2) null


END
Go

IF EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'ReceptionTemperature'
                 AND COLUMN_NAME = 'TemperatureDate') 
BEGIN
	EXEC sp_RENAME 'ReceptionTemperature.TemperatureDate', 'InsertedDate', 'COLUMN'

END
Go









IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SubSystem' AND COLUMN_NAME = 'ParentRelationId') 
BEGIN
	ALTER TABLE dbo.SubSystem ADD ParentRelationId INT;
	ALTER TABLE dbo.SubSystem
	ADD CONSTRAINT FK_SubSystem_SubSystem
	FOREIGN KEY (ParentRelationId) REFERENCES dbo.SubSystem(Id);
END
GO


UPDATE dbo.SubSystem SET ParentRelationId=Parent WHERE Parent<>0
GO


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Child'
          ) 
BEGIN
CREATE TABLE [dbo].[Child](
	[Guid] [uniqueidentifier] NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BirthDate] [datetime] NULL,
	[ChildStatus] [int] NULL,
	[VitalActivities] [nvarchar](500) NULL,
	[CongenitalAnomalies] [nvarchar](500) NULL,
	[Weight] [numeric](6, 3) NULL,
	[NeedOperation] [bit] NULL,
	[OperationOrder] [nvarchar](500) NULL,
	[CreateDate] [datetime] NULL,
	[CreateUserId] [uniqueidentifier] NULL,
	[ModifiedUserId] [uniqueidentifier] NULL,
	[ModifiedDate] [datetime] NULL,
	[ReceptionId] [uniqueidentifier] NULL,
	[ReceptionDate] [datetime] NULL,
	[DoctorId] [uniqueidentifier] NULL,
	[RoomId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_Child] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[Child] ADD  CONSTRAINT [DF_Child_Guid]  DEFAULT (newsequentialid()) FOR [Guid]


ALTER TABLE [dbo].[Child] ADD  CONSTRAINT [DF_Child_Weight]  DEFAULT ((0)) FOR [Weight]


ALTER TABLE [dbo].[Child] ADD  CONSTRAINT [DF_Child_NeedOperation]  DEFAULT ((0)) FOR [NeedOperation]


ALTER TABLE [dbo].[Child]  WITH CHECK ADD  CONSTRAINT [FK_Child_BaseInfoGeneral] FOREIGN KEY([ChildStatus])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])


ALTER TABLE [dbo].[Child] CHECK CONSTRAINT [FK_Child_BaseInfoGeneral]


ALTER TABLE [dbo].[Child]  WITH CHECK ADD  CONSTRAINT [FK_Child_Doctor] FOREIGN KEY([DoctorId])
REFERENCES [dbo].[Doctor] ([GUID])


ALTER TABLE [dbo].[Child] CHECK CONSTRAINT [FK_Child_Doctor]


ALTER TABLE [dbo].[Child]  WITH CHECK ADD  CONSTRAINT [FK_Child_Reception] FOREIGN KEY([ReceptionId])
REFERENCES [dbo].[Reception] ([GUID])


ALTER TABLE [dbo].[Child] CHECK CONSTRAINT [FK_Child_Reception]


ALTER TABLE [dbo].[Child]  WITH CHECK ADD  CONSTRAINT [FK_Child_Room] FOREIGN KEY([RoomId])
REFERENCES [dbo].[Room] ([GUID])


ALTER TABLE [dbo].[Child] CHECK CONSTRAINT [FK_Child_Room]


ALTER TABLE [dbo].[Child]  WITH CHECK ADD  CONSTRAINT [FK_Child_User] FOREIGN KEY([Guid])
REFERENCES [dbo].[User] ([GUID])
ON DELETE CASCADE


ALTER TABLE [dbo].[Child] CHECK CONSTRAINT [FK_Child_User]


ALTER TABLE [dbo].[Child]  WITH CHECK ADD  CONSTRAINT [FK_Child_UserCreate] FOREIGN KEY([CreateUserId])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[Child] CHECK CONSTRAINT [FK_Child_UserCreate]


ALTER TABLE [dbo].[Child]  WITH CHECK ADD  CONSTRAINT [FK_Child_UserModify] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[Child] CHECK CONSTRAINT [FK_Child_UserModify]
END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='AnalysisResultTemplate') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='AnalysisResultTemplate'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='AnalysisResultTemplate') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='AnalysisResultTemplate'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='AnalysisResultTemplate') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='AnalysisResultTemplate'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='Children')
   BEGIN
       INSERT INTO dbo.SubSystem ( Name, Priority, Parent,  Link, ShowName, Active, Icon ) VALUES ( N'Children', 9, 0, N'/Child/Form', N'NewbornBabies', 1, N'fa fa-child' )
   END
   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Children') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Children'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Children') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Children'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Children') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Children'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Children') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Children'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Children') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Print'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Children'),(SELECT Id FROM dbo.Access WHERE Name='Print'))
   END
   GO

IF NOT EXISTS(SELECT EName FROM  BaseInfoGeneralType WHERE  EName = 'CadreType') 
BEGIN
	Insert into BaseInfoGeneralType(EName,FName)values('CadreType',N'نوع کادر')
END
GO

IF NOT EXISTS(SELECT * FROM  BaseInfoGeneral WHERE  Name = 'TreatmentStaff') 
BEGIN
	Insert into BaseInfoGeneral(Name,Priority,TypeId)values('TreatmentStaff',1,(SELECT id FROM  BaseInfoGeneralType WHERE  EName = 'CadreType'))
END
GO


IF NOT EXISTS(SELECT * FROM  BaseInfoGeneral WHERE  Name = 'SentinelCadre') 
BEGIN
	Insert into BaseInfoGeneral(Name,Priority,TypeId)values('SentinelCadre',2,(SELECT id FROM  BaseInfoGeneralType WHERE  EName = 'CadreType'))
END
GO


IF NOT EXISTS(SELECT * FROM  BaseInfoGeneral WHERE  Name = 'PrematureCadre') 
BEGIN
	Insert into BaseInfoGeneral(Name,Priority,TypeId)values('PrematureCadre',3,(SELECT id FROM  BaseInfoGeneralType WHERE  EName = 'CadreType'))
END
GO


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'HumanResourceSalary' AND COLUMN_NAME = 'CadreTypeId') 
BEGIN
	ALTER TABLE dbo.HumanResourceSalary ADD CadreTypeId int;
	ALTER TABLE dbo.HumanResourceSalary
	ADD CONSTRAINT FK_CadreType_BaseInfoGeneral
	FOREIGN KEY (CadreTypeId) REFERENCES dbo.BaseInfoGeneral(Id);
END
GO


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'LicenceKeys'
          ) 
BEGIN
	
CREATE TABLE [dbo].[LicenceKeys](
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[SerialKey] [NVARCHAR](MAX) NOT NULL,
 CONSTRAINT [PK_LicenceKeys] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]


END
GO



IF NOT EXISTS(SELECT EName
          FROM   BaseInfoType
          WHERE  EName = 'Section'
                 ) 
BEGIN


	Insert into BaseInfoType(EName,FName)values('Section',N'بخش')
END

GO

DECLARE @id uniqueidentifier;

SET @id = (SELECT GUID
          FROM   BaseInfoType
          WHERE  EName = 'Section')

IF NOT EXISTS(SELECT BaseInfoTypeId
				FROM   BaseInfoSectionType
				WHERE  BaseInfoTypeId = @id
                 ) 
BEGIN


	Insert into BaseInfoSectionType(BaseInfoTypeId,SectionTypeId)values(@id,38)
END

GO

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Item'
                 AND COLUMN_NAME = 'SectionId') 
BEGIN

	ALTER TABLE [Item]
	ADD SectionId uniqueidentifier null

	ALTER TABLE [dbo].[Item]  WITH CHECK ADD  CONSTRAINT [FK_Item_BaseInfo1] FOREIGN KEY([SectionId])
	REFERENCES [dbo].[BaseInfo] ([GUID])


	ALTER TABLE [dbo].[Item] CHECK CONSTRAINT [FK_Item_BaseInfo1]
END
Go


IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='Discharge')
BEGIN
    INSERT INTO dbo.SubSystem ( Name, Priority, Parent,  Link, ShowName, Active, Icon ) VALUES ( N'Discharge', 1, (SELECT Id FROM dbo.SubSystem WHERE Name='HospitalPatient'), NULL, N'Discharge', 0, NULL )
END
Go


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Discharge') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
BEGIN
    INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Discharge'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
END
Go


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Discharge') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
BEGIN
    INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Discharge'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
END
Go


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'LicenceKeys' AND COLUMN_NAME = 'ComputerSerial') 
BEGIN
	ALTER TABLE dbo.LicenceKeys ADD ComputerSerial NVARCHAR(450);
END
Go

IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionDoctor' AND COLUMN_NAME = 'DoctorRoleId') 
BEGIN
	ALTER TABLE dbo.ReceptionDoctor ADD DoctorRoleId int NULL;
	ALTER TABLE dbo.ReceptionDoctor
	ADD CONSTRAINT FK_ReceptionDoctor_BaseInfoGeneral
	FOREIGN KEY (DoctorRoleId) REFERENCES dbo.BaseInfoGeneral(Id);
END
Go

--UPDATE dbo.ReceptionDoctor SET	DoctorRoleId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name=N'DispatcherDoctor') WHERE DoctorRoleId IS NULL


IF NOT EXISTS(SELECT * FROM dbo.BaseInfoGeneral WHERE Name='RadiologyDoctor' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='DoctorRole')) 
BEGIN
	INSERT INTO dbo.BaseInfoGeneral (Name,Priority,Description,TypeId) VALUES (N'RadiologyDoctor',4,NULL,(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='DoctorRole'))
END

GO

IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Product' AND COLUMN_NAME = 'ClinicSectionId') 
BEGIN
	ALTER TABLE dbo.Product ADD ClinicSectionId UNIQUEIDENTIFIER;
	ALTER TABLE dbo.Product
	ADD CONSTRAINT FK_Product_ClinicSection
	FOREIGN KEY (ClinicSectionId) REFERENCES dbo.ClinicSection(GUID);
END

GO

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Reminder'
          ) 
BEGIN
	
CREATE TABLE [dbo].[Reminder](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[Explanation] [NVARCHAR](MAX) NULL,
	[ClinicSectionId] [UNIQUEIDENTIFIER] NULL,
	[ReminderDate] [DATETIME] NULL,
	[Active] [BIT] NULL,
	[CreateDate] [DATETIME] NULL,
	[CreateUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
 CONSTRAINT [PK_Reminder] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]


ALTER TABLE [dbo].[Reminder] ADD  CONSTRAINT [DF_Reminder_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]


ALTER TABLE [dbo].[Reminder]  WITH CHECK ADD  CONSTRAINT [FK_Reminder_ClinicSection] FOREIGN KEY([ClinicSectionId])
REFERENCES [dbo].[ClinicSection] ([GUID])


ALTER TABLE [dbo].[Reminder] CHECK CONSTRAINT [FK_Reminder_ClinicSection]


ALTER TABLE [dbo].[Reminder]  WITH CHECK ADD  CONSTRAINT [FK_Reminder_UserCreate] FOREIGN KEY([CreateUserId])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[Reminder] CHECK CONSTRAINT [FK_Reminder_UserCreate]


ALTER TABLE [dbo].[Reminder]  WITH CHECK ADD  CONSTRAINT [FK_Reminder_UserModify] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[Reminder] CHECK CONSTRAINT [FK_Reminder_UserModify]

END
GO




IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='Reminder')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon) VALUES (N'Reminder',16,0,N'/Reminder/Form',N'Reminder',1,N'fa fa-bell-o')
   END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Reminder') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Reminder'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO



   IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Reminder') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Reminder'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Reminder') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Reminder'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END

   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Reminder') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Reminder'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END

   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Reminder') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='View'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Reminder'),(SELECT Id FROM dbo.Access WHERE Name='View'))
   END

   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='FundReportFromSections')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon) VALUES (N'FundReportFromSections',3,45,N'/HospitalPatient/ShowReport',N'FundReportFromSections',1,NULL)
   END
   GO

   IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='FundReportFromSections') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='FundReportFromSections'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
   GO


      IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='FundReportFromSections') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Print'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='FundReportFromSections'),(SELECT Id FROM dbo.Access WHERE Name='Print'))
   END
   GO

UPDATE dbo.BaseInfoGeneral SET TypeId=NULL WHERE Name='Observation'





GO


IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'FK_ClinicSection_ClinicSection') AND parent_object_id = OBJECT_ID(N'dbo.ClinicSection'))
BEGIN
	ALTER TABLE dbo.ClinicSection
	ADD CONSTRAINT FK_ClinicSection_ClinicSection
	FOREIGN KEY (ParentId) REFERENCES dbo.ClinicSection(GUID);
END
GO

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Supplier'
          ) 
BEGIN
	
CREATE TABLE [dbo].[Supplier](
	[GUID] [uniqueidentifier] NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SupplierTypeId] [uniqueidentifier] NULL,
	[CityId] [uniqueidentifier] NULL,
	[CountryId] [uniqueidentifier] NULL,
	[Address] [nvarchar](250) NULL,
	[Description] [nvarchar](500) NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedDate] [datetime] NULL,
	[CreatedUserId] [uniqueidentifier] NULL,
	[ModifiedUserId] [uniqueidentifier] NULL,
	[ClinicSectionId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_Supplier] PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[Supplier] ADD  CONSTRAINT [DF_Supplier_GUID]  DEFAULT (newsequentialid()) FOR [GUID]

ALTER TABLE [dbo].[Supplier]  WITH CHECK ADD  CONSTRAINT [FK_Supplier_BaseInfo] FOREIGN KEY([CityId])
REFERENCES [dbo].[BaseInfo] ([GUID])


ALTER TABLE [dbo].[Supplier] CHECK CONSTRAINT [FK_Supplier_BaseInfo]


ALTER TABLE [dbo].[Supplier]  WITH CHECK ADD  CONSTRAINT [FK_Supplier_BaseInfo1] FOREIGN KEY([CountryId])
REFERENCES [dbo].[BaseInfo] ([GUID])


ALTER TABLE [dbo].[Supplier] CHECK CONSTRAINT [FK_Supplier_BaseInfo1]


ALTER TABLE [dbo].[Supplier]  WITH CHECK ADD  CONSTRAINT [FK_Supplier_BaseInfo2] FOREIGN KEY([SupplierTypeId])
REFERENCES [dbo].[BaseInfo] ([GUID])


ALTER TABLE [dbo].[Supplier] CHECK CONSTRAINT [FK_Supplier_BaseInfo2]


ALTER TABLE [dbo].[Supplier]  WITH CHECK ADD  CONSTRAINT [FK_Supplier_ClinicSection] FOREIGN KEY([ClinicSectionId])
REFERENCES [dbo].[ClinicSection] ([GUID])


ALTER TABLE [dbo].[Supplier] CHECK CONSTRAINT [FK_Supplier_ClinicSection]


ALTER TABLE [dbo].[Supplier]  WITH CHECK ADD  CONSTRAINT [FK_Supplier_User] FOREIGN KEY([GUID])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[Supplier] CHECK CONSTRAINT [FK_Supplier_User]


ALTER TABLE [dbo].[Supplier]  WITH CHECK ADD  CONSTRAINT [FK_Supplier_User1] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[Supplier] CHECK CONSTRAINT [FK_Supplier_User1]


ALTER TABLE [dbo].[Supplier]  WITH CHECK ADD  CONSTRAINT [FK_Supplier_User2] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[Supplier] CHECK CONSTRAINT [FK_Supplier_User2]
END
GO


IF NOT EXISTS(SELECT EName
          FROM   BaseInfoType
          WHERE  EName = 'City'
                 ) 
BEGIN
	Insert into BaseInfoType(EName,FName)values('City',N'شهر')
END
GO


IF NOT EXISTS(SELECT EName
          FROM   BaseInfoType
          WHERE  EName = 'Country'
                 ) 
BEGIN
	Insert into BaseInfoType(EName,FName)values('Country',N'کشور')
END
GO


IF NOT EXISTS(SELECT EName
          FROM   BaseInfoType
          WHERE  EName = 'SupplierType'
                 ) 
BEGIN
	Insert into BaseInfoType(EName,FName)values('SupplierType',N'نوع تهیه کننده')
END
GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='Supplier')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon) VALUES (N'Supplier',11,20,N'/Supplier/Form',N'Supplier',1,NULL)
   END

   GO
   IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Supplier') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Supplier'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
   GO


      IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Supplier') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Supplier'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
   GO
   IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Supplier') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Supplier'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
   GO

   IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Supplier') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Supplier'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
   GO

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'ReceptionInsurance'
          ) 
BEGIN
	
CREATE TABLE [dbo].[ReceptionInsurance](
	[GUID] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[ReceptionId] [UNIQUEIDENTIFIER] NULL,
	[CreatedUserId] [UNIQUEIDENTIFIER] NULL,
	[CreatedDate] [DATETIME] NULL,
 CONSTRAINT [PK_ReceptionInsurance] PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[ReceptionInsurance] ADD  CONSTRAINT [DF_ReceptionInsurance_GUID]  DEFAULT (NEWSEQUENTIALID()) FOR [GUID]


ALTER TABLE [dbo].[ReceptionInsurance]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionInsurance_Reception] FOREIGN KEY([ReceptionId])
REFERENCES [dbo].[Reception] ([GUID])


ALTER TABLE [dbo].[ReceptionInsurance] CHECK CONSTRAINT [FK_ReceptionInsurance_Reception]


ALTER TABLE [dbo].[ReceptionInsurance]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionInsurance_User] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[ReceptionInsurance] CHECK CONSTRAINT [FK_ReceptionInsurance_User]
END
GO


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionServiceReceived' AND COLUMN_NAME = 'ReceptionInsuranceId') 
BEGIN
	ALTER TABLE ReceptionServiceReceived ADD ReceptionInsuranceId UNIQUEIDENTIFIER;
END
Go


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'ReceptionInsurance'
          ) 
BEGIN
	
CREATE TABLE [dbo].[ReceptionInsurance](
	[GUID] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[ReceptionId] [UNIQUEIDENTIFIER] NULL,
	[CreatedUserId] [UNIQUEIDENTIFIER] NULL,
	[CreatedDate] [DATETIME] NULL,
 CONSTRAINT [PK_ReceptionInsurance] PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[ReceptionInsurance] ADD  CONSTRAINT [DF_ReceptionInsurance_GUID]  DEFAULT (NEWSEQUENTIALID()) FOR [GUID]


ALTER TABLE [dbo].[ReceptionInsurance]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionInsurance_Reception] FOREIGN KEY([ReceptionId])
REFERENCES [dbo].[Reception] ([GUID])


ALTER TABLE [dbo].[ReceptionInsurance] CHECK CONSTRAINT [FK_ReceptionInsurance_Reception]


ALTER TABLE [dbo].[ReceptionInsurance]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionInsurance_User] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[ReceptionInsurance] CHECK CONSTRAINT [FK_ReceptionInsurance_User]
END
GO

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'ReceptionInsuranceReceived'
          ) 
BEGIN
CREATE TABLE [dbo].[ReceptionInsuranceReceived](
	[GUID] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[ReceptionInsuranceId] [UNIQUEIDENTIFIER] NULL,
	[PayerName] [NVARCHAR](250) NULL,
	[Amount] [NUMERIC](20, 7) NULL,
	[CurrencyId] [INT] NULL,
	[CreatedUserId] [UNIQUEIDENTIFIER] NULL,
	[CreatedDate] [DATETIME] NULL,
	[AmountStatus] [BIT] NULL,
 CONSTRAINT [PK_ReceptionInsuranceReceived] PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[ReceptionInsuranceReceived] ADD  CONSTRAINT [DF_ReceptionInsuranceReceived_GUID]  DEFAULT (NEWSEQUENTIALID()) FOR [GUID]


ALTER TABLE [dbo].[ReceptionInsuranceReceived]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionInsuranceReceived_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])


ALTER TABLE [dbo].[ReceptionInsuranceReceived] CHECK CONSTRAINT [FK_ReceptionInsuranceReceived_BaseInfoGeneral]


ALTER TABLE [dbo].[ReceptionInsuranceReceived]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionInsuranceReceived_ReceptionInsurance] FOREIGN KEY([ReceptionInsuranceId])
REFERENCES [dbo].[ReceptionInsurance] ([GUID])


ALTER TABLE [dbo].[ReceptionInsuranceReceived] CHECK CONSTRAINT [FK_ReceptionInsuranceReceived_ReceptionInsurance]


ALTER TABLE [dbo].[ReceptionInsuranceReceived]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionInsuranceReceived_User] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[ReceptionInsuranceReceived] CHECK CONSTRAINT [FK_ReceptionInsuranceReceived_User]
END
GO


------mohammad


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Product' AND COLUMN_NAME = 'UnitId') 
BEGIN
	ALTER TABLE dbo.Product ADD UnitId uniqueidentifier;
	ALTER TABLE dbo.Product
	ADD CONSTRAINT FK_Unit_BaseInfo
	FOREIGN KEY (UnitId) REFERENCES dbo.BaseInfo(GUID);
END

GO
IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Product' AND COLUMN_NAME = 'Code') 
BEGIN
	ALTER TABLE dbo.Product ADD Code NVARCHAR(30);
END
GO


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Product' AND COLUMN_NAME = 'ScientificName') 
BEGIN
	ALTER TABLE dbo.Product ADD ScientificName NVARCHAR(200);
END
GO


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Product' AND COLUMN_NAME = 'Description') 
BEGIN
	ALTER TABLE dbo.Product ADD Description NVARCHAR(MAX);
END

GO



IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'PurchaseInvoice'
          ) 
BEGIN

CREATE TABLE [dbo].[PurchaseInvoice](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[InvoiceNum] [NVARCHAR](10) NULL UNIQUE,
	[InvoiceDate] [DATETIME] NULL,
	[SupplierId] [UNIQUEIDENTIFIER] NULL,
	[Description] [NVARCHAR](500) NULL,
	[MainInvoiceNum] [NVARCHAR](500) NULL,
	[Discount] [NUMERIC](20, 7) NULL,
	[CreatedUserId] [UNIQUEIDENTIFIER] NULL,
	[CreateDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
	[ClinicSectionId] [UNIQUEIDENTIFIER] NULL,
	[CurrencyId] [INT] NULL,
 CONSTRAINT [PK_PurchaseInvoice] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[PurchaseInvoice] ADD  CONSTRAINT [DF_PurchaseInvoice_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[PurchaseInvoice]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoice_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[PurchaseInvoice] CHECK CONSTRAINT [FK_PurchaseInvoice_BaseInfoGeneral]

ALTER TABLE [dbo].[PurchaseInvoice]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoice_ClinicSection] FOREIGN KEY([ClinicSectionId])
REFERENCES [dbo].[ClinicSection] ([GUID])

ALTER TABLE [dbo].[PurchaseInvoice] CHECK CONSTRAINT [FK_PurchaseInvoice_ClinicSection]

ALTER TABLE [dbo].[PurchaseInvoice]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoice_CreateUser] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[PurchaseInvoice] CHECK CONSTRAINT [FK_PurchaseInvoice_CreateUser]

ALTER TABLE [dbo].[PurchaseInvoice]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoice_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[PurchaseInvoice] CHECK CONSTRAINT [FK_PurchaseInvoice_ModifiedUser]

ALTER TABLE [dbo].[PurchaseInvoice]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoice_Supplier] FOREIGN KEY([SupplierId])
REFERENCES [dbo].[Supplier] ([GUID])

ALTER TABLE [dbo].[PurchaseInvoice] CHECK CONSTRAINT [FK_PurchaseInvoice_Supplier]

END

GO


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'PurchaseInvoiceDetails'
          ) 
BEGIN

CREATE TABLE [dbo].[PurchaseInvoiceDetails](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[MasterId] [UNIQUEIDENTIFIER] NULL,
	[ProductId] [UNIQUEIDENTIFIER] NULL,
	[ExpireDate] [DATETIME] NULL,
	[Num] [NUMERIC](20, 7) NULL,
	[PurchasePrice] [NUMERIC](20, 7) NULL,
	[SellingPrice] [NUMERIC](20, 7) NULL,
	[Consideration] [NVARCHAR](MAX) NULL,
	[Priority] [INT] NULL,
	[Discount] [NUMERIC](20, 7) NULL,
	[FreeNum] [NUMERIC](20, 7) NULL,
	[WholePurchasePrice] [NUMERIC](20, 7) NULL,
	[CreatedUserId] [UNIQUEIDENTIFIER] NULL,
	[CreateDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
	[Profit] [NUMERIC](20, 7) NULL,
 CONSTRAINT [PK_PurchaseInvoiceDetails] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]


ALTER TABLE [dbo].[PurchaseInvoiceDetails] ADD  CONSTRAINT [DF_PurchaseInvoiceDetails_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]


ALTER TABLE [dbo].[PurchaseInvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoiceDetails_CreateUser] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[PurchaseInvoiceDetails] CHECK CONSTRAINT [FK_PurchaseInvoiceDetails_CreateUser]


ALTER TABLE [dbo].[PurchaseInvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoiceDetails_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[PurchaseInvoiceDetails] CHECK CONSTRAINT [FK_PurchaseInvoiceDetails_ModifiedUser]


ALTER TABLE [dbo].[PurchaseInvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoiceDetails_Product] FOREIGN KEY([ProductId])
REFERENCES [dbo].[Product] ([GUID])


ALTER TABLE [dbo].[PurchaseInvoiceDetails] CHECK CONSTRAINT [FK_PurchaseInvoiceDetails_Product]


ALTER TABLE [dbo].[PurchaseInvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoiceDetails_PurchaseInvoice] FOREIGN KEY([MasterId])
REFERENCES [dbo].[PurchaseInvoice] ([Guid])


ALTER TABLE [dbo].[PurchaseInvoiceDetails] CHECK CONSTRAINT [FK_PurchaseInvoiceDetails_PurchaseInvoice]

END

GO
UPDATE dbo.SubSystem SET Link=NULL WHERE Name=N'Storeroom'
GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='SubStoreroom')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId) VALUES (N'SubStoreroom',1,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'),N'/Product/Form',N'Storeroom',1,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'))
   END
   GO


UPDATE dbo.SubSystemAccess SET SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SubStoreroom') WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom') 
GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SubStoreroom') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SubStoreroom'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='PurchaseInvoice')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId) VALUES (N'PurchaseInvoice',2,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'),N'/PurchaseInvoice/Form',N'PurchaseInvoice',1,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoice') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoice'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetails')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId) VALUES (N'PurchaseInvoiceDetails',3,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'),NULL,N'PurchaseInvoiceDetails',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetails') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetails'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoice'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoice'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoice'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetails') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetails'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetails') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetails'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetails') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetails'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
   GO


IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='PurchaseInvoiceNumberStartFrom' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab'))
BEGIN
INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES ('PurchaseInvoiceNumberStartFrom',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab'),NULL)
END
GO

IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='PurchaseInvoiceNumberStartFrom' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital'))
BEGIN
INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'PurchaseInvoiceNumberStartFrom',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital'),NULL)
END






go




IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'SaleInvoice'
          ) 
BEGIN

CREATE TABLE [dbo].[SaleInvoice](
	[GUID] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[InvoiceNum] [NVARCHAR](10) NULL UNIQUE,
	[InvoiceDate] [DATETIME] NULL,
	[Description] [NVARCHAR](500) NULL,
	[SaleTypeId] [INT] NULL,
	[CreatedUserId] [UNIQUEIDENTIFIER] NULL,
	[CreatedDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
	[ClinicSectionId] [UNIQUEIDENTIFIER] NULL,
 CONSTRAINT [PK_SaleInvoice] PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[SaleInvoice] ADD  CONSTRAINT [DF_SaleInvoice_GUID]  DEFAULT (NEWSEQUENTIALID()) FOR [GUID]

ALTER TABLE [dbo].[SaleInvoice]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoice_BaseInfoGeneral] FOREIGN KEY([SaleTypeId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[SaleInvoice] CHECK CONSTRAINT [FK_SaleInvoice_BaseInfoGeneral]

ALTER TABLE [dbo].[SaleInvoice]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoice_ClinicSection] FOREIGN KEY([ClinicSectionId])
REFERENCES [dbo].[ClinicSection] ([GUID])

ALTER TABLE [dbo].[SaleInvoice] CHECK CONSTRAINT [FK_SaleInvoice_ClinicSection]

ALTER TABLE [dbo].[SaleInvoice]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoice_CreateUser] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[SaleInvoice] CHECK CONSTRAINT [FK_SaleInvoice_CreateUser]

ALTER TABLE [dbo].[SaleInvoice]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoice_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[SaleInvoice] CHECK CONSTRAINT [FK_SaleInvoice_ModifiedUser]

END

GO


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'SaleInvoiceDetails'
          ) 
BEGIN

CREATE TABLE [dbo].[SaleInvoiceDetails](
	[GUID] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[SaleInvoiceId] [UNIQUEIDENTIFIER] NULL,
	[Num] [NUMERIC](20, 7) NULL,
	[SalePrice] [NUMERIC](20, 7) NULL,
	[PurchaseInvoiceDetailId] [UNIQUEIDENTIFIER] NULL,
	[Consideration] [NVARCHAR](500) NULL,
	[Description] [NVARCHAR](500) NULL,
	[CreatedUserId] [UNIQUEIDENTIFIER] NULL,
	[CreatedDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
 CONSTRAINT [PK_SaleInvoiceDetails] PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[SaleInvoiceDetails] ADD  CONSTRAINT [DF_SaleInvoiceDetails_GUID]  DEFAULT (NEWSEQUENTIALID()) FOR [GUID]

ALTER TABLE [dbo].[SaleInvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoiceDetails_CreateUser] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[SaleInvoiceDetails] CHECK CONSTRAINT [FK_SaleInvoiceDetails_CreateUser]

ALTER TABLE [dbo].[SaleInvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoiceDetails_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[SaleInvoiceDetails] CHECK CONSTRAINT [FK_SaleInvoiceDetails_ModifiedUser]

ALTER TABLE [dbo].[SaleInvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoiceDetails_PurchaseInvoiceDetails] FOREIGN KEY([PurchaseInvoiceDetailId])
REFERENCES [dbo].[PurchaseInvoiceDetails] ([Guid])

ALTER TABLE [dbo].[SaleInvoiceDetails] CHECK CONSTRAINT [FK_SaleInvoiceDetails_PurchaseInvoiceDetails]

ALTER TABLE [dbo].[SaleInvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoiceDetails_SaleInvoice] FOREIGN KEY([SaleInvoiceId])
REFERENCES [dbo].[SaleInvoice] ([GUID])

ALTER TABLE [dbo].[SaleInvoiceDetails] CHECK CONSTRAINT [FK_SaleInvoiceDetails_SaleInvoice]

END




go


IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='SaleInvoiceNumberStartFrom' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital'))
BEGIN
INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'SaleInvoiceNumberStartFrom',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital'),NULL)
END
GO

IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='SaleInvoiceNumberStartFrom' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab'))
BEGIN
INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'SaleInvoiceNumberStartFrom',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab'),NULL)
END
GO





--------------------------



IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Pay'
          ) 
BEGIN
CREATE TABLE [dbo].[Pay](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[SupplierId] [UNIQUEIDENTIFIER] NULL,
	[PayDate] [DATETIME] NULL,
	[Amount] [NUMERIC](20, 7) NULL,
	[Discount] [NUMERIC](20, 7) NULL,
	[ExchangeAmount] [NUMERIC](20, 7) NULL,
	[Description] [NVARCHAR](500) NULL,
	[CurrencyId] [INT] NULL,
	[CreatedUserId] [UNIQUEIDENTIFIER] NULL,
	[CreatedDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
	[ClinicSectionId] [UNIQUEIDENTIFIER] NULL,
	[BaseCurrencyId] [INT] NULL,
 CONSTRAINT [PK_Pay] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[Pay] ADD  CONSTRAINT [DF_Pay_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]


ALTER TABLE [dbo].[Pay]  WITH CHECK ADD  CONSTRAINT [FK_Pay_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[Pay] CHECK CONSTRAINT [FK_Pay_BaseInfoGeneral]

ALTER TABLE [dbo].[Pay]  WITH CHECK ADD  CONSTRAINT [FK_Pay_ClinicSection] FOREIGN KEY([ClinicSectionId])
REFERENCES [dbo].[ClinicSection] ([GUID])

ALTER TABLE [dbo].[Pay] CHECK CONSTRAINT [FK_Pay_ClinicSection]

ALTER TABLE [dbo].[Pay]  WITH CHECK ADD  CONSTRAINT [FK_Pay_CreateUser] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[Pay] CHECK CONSTRAINT [FK_Pay_CreateUser]

ALTER TABLE [dbo].[Pay]  WITH CHECK ADD  CONSTRAINT [FK_Pay_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[Pay] CHECK CONSTRAINT [FK_Pay_ModifiedUser]

ALTER TABLE [dbo].[Pay]  WITH CHECK ADD  CONSTRAINT [FK_Pay_Supplier] FOREIGN KEY([SupplierId])
REFERENCES [dbo].[Supplier] ([GUID])

ALTER TABLE [dbo].[Pay] CHECK CONSTRAINT [FK_Pay_Supplier]

ALTER TABLE [dbo].[Pay]  WITH CHECK ADD  CONSTRAINT [FK_Pay_BaseInfoGeneral1] FOREIGN KEY([BaseCurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])


ALTER TABLE [dbo].[Pay] CHECK CONSTRAINT [FK_Pay_BaseInfoGeneral1]

END

GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='SupplierAccount')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'SupplierAccount',3,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'),N'/SupplierAccount/Form',N'AccountInSuppliers', 1,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'))
   END

   GO
IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SupplierAccount') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SupplierAccount'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END

   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SupplierAccount') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SupplierAccount'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SupplierAccount') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SupplierAccount'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
   
   GO
IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SupplierAccount') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SupplierAccount'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END

   GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='Pay')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'Pay',3,0,NULL,N'Pay', 1,NULL,NULL)
   END

   GO
IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Pay') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Pay'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END

   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Pay') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Pay'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Pay') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Pay'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
   
   GO
IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Pay') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Pay'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END

   GO




IF NOT EXISTS(SELECT *
          FROM   ClinicSectionSetting
          WHERE  SName = N'UseAnalysisInClinic') 
BEGIN
	INSERT INTO dbo.ClinicSectionSetting
  (
      SName,
      SectionTypeId,
	InputType
      
  )
  VALUES
  (   N'UseAnalysisInClinic', -- SName - nvarchar(250)
      (SELECT Id FROM dbo.BaseInfoGeneral WHERE Name = 'Hospital'),   -- SectionTypeId - int
      'bool'
      )

	  INSERT INTO dbo.ClinicSectionSettingValue
	  (
	      
	      ClinicSectionId,
	      SettingId,
	      SValue
	  )
	  VALUES
	  (   
	      (SELECT GUID FROM dbo.ClinicSection WHERE SectionTypeId IN (SELECT Id FROM dbo.BaseInfoGeneral WHERE Name = 'Hospital') AND ClinicSectionTypeId IS NULL), -- ClinicSectionId - uniqueidentifier
	      (SELECT Id FROM dbo.ClinicSectionSetting WHERE SName = 'UseAnalysisInClinic'),    -- SettingId - int
	      N'false'   -- SValue - nvarchar(250)
	      )

END



GO




IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'PrescriptionTestDetail'
                 AND COLUMN_NAME = 'AnalysisName') 
BEGIN
	ALTER TABLE PrescriptionTestDetail
	ADD AnalysisName nvarchar(100) null


END
Go

UPDATE dbo.SubSystem SET Priority = 99 WHERE Name = 'LabSetting'

GO

IF NOT EXISTS (select * from sys.objects where object_id = OBJECT_ID(N'[FK_ReceptionTemperature_User]') AND parent_object_id = OBJECT_ID('ReceptionTemperature'))
BEGIN

ALTER TABLE [dbo].[ReceptionTemperature]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionTemperature_User] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[ReceptionTemperature] CHECK CONSTRAINT [FK_ReceptionTemperature_User]

END
Go




IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Transfer'
          ) 
BEGIN

CREATE TABLE [dbo].[Transfer](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[InvoiceNum] [INT] IDENTITY(1,1) NOT NULL,
	[InvoiceDate] [DATETIME] NULL,
	[SourceClinicSectionId] [UNIQUEIDENTIFIER] NULL,
	[DestinationClinicSectionId] [UNIQUEIDENTIFIER] NULL,
	[Description] [NVARCHAR](500) NULL,
	[ReceiverName] [NVARCHAR](150) NULL,
	[CreatedUserId] [UNIQUEIDENTIFIER] NULL,
	[CreatedDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
	[ReceiverUserId] [UNIQUEIDENTIFIER] NULL,
	[ReceiverDate] [DATETIME] NULL,
 CONSTRAINT [PK_Transfer] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[Transfer] ADD  CONSTRAINT [DF_Transfer_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[Transfer]  WITH CHECK ADD  CONSTRAINT [FK_Transfer_CreateUser] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[Transfer] CHECK CONSTRAINT [FK_Transfer_CreateUser]

ALTER TABLE [dbo].[Transfer]  WITH CHECK ADD  CONSTRAINT [FK_Transfer_DestinationClinicSection] FOREIGN KEY([DestinationClinicSectionId])
REFERENCES [dbo].[ClinicSection] ([GUID])

ALTER TABLE [dbo].[Transfer] CHECK CONSTRAINT [FK_Transfer_DestinationClinicSection]

ALTER TABLE [dbo].[Transfer]  WITH CHECK ADD  CONSTRAINT [FK_Transfer_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[Transfer] CHECK CONSTRAINT [FK_Transfer_ModifiedUser]


ALTER TABLE [dbo].[Transfer]  WITH CHECK ADD  CONSTRAINT [FK_Transfer_ReceiverUser] FOREIGN KEY([ReceiverUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[Transfer] CHECK CONSTRAINT [FK_Transfer_ReceiverUser]

ALTER TABLE [dbo].[Transfer]  WITH CHECK ADD  CONSTRAINT [FK_Transfer_SourceClinicSection] FOREIGN KEY([SourceClinicSectionId])
REFERENCES [dbo].[ClinicSection] ([GUID])

ALTER TABLE [dbo].[Transfer] CHECK CONSTRAINT [FK_Transfer_SourceClinicSection]


END
GO 




IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='Transfer')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'Transfer',4,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'),N'/Transfer/Form',N'Transfer', 1,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Transfer') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Transfer'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Transfer') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Transfer'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO 
   

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Transfer') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Transfer'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO 
   

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Transfer') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Transfer'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO 





IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'TransferDetail'
          ) 
BEGIN

CREATE TABLE [dbo].[TransferDetail](
	[Guid] [uniqueidentifier] NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [uniqueidentifier] NULL,
	[Num] [numeric](20, 7) NULL,
	[Consideration] [nvarchar](500) NULL,
	[PurchaseInvoiceDetailId] [uniqueidentifier] NULL,
	[CreatedUserId] [uniqueidentifier] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedUserId] [uniqueidentifier] NULL,
	[ModifiedDate] [datetime] NULL,
	[ProductId] [uniqueidentifier] NULL,
	[DestinationProductId] [uniqueidentifier] NULL,
	[ExpireDate] [datetime] NULL,
	[PurchasePrice] [numeric](20, 7) NULL,
	[SellingPrice] [numeric](20, 7) NULL,
	[TransferDetailId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_TransferDetail] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[TransferDetail] ADD  CONSTRAINT [DF_TransferDetail_Guid]  DEFAULT (newsequentialid()) FOR [Guid]

ALTER TABLE [dbo].[TransferDetail]  WITH CHECK ADD  CONSTRAINT [FK_TransferDetail_CreateUser] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[TransferDetail] CHECK CONSTRAINT [FK_TransferDetail_CreateUser]

ALTER TABLE [dbo].[TransferDetail]  WITH CHECK ADD  CONSTRAINT [FK_TransferDetail_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[TransferDetail] CHECK CONSTRAINT [FK_TransferDetail_ModifiedUser]

ALTER TABLE [dbo].[TransferDetail]  WITH CHECK ADD  CONSTRAINT [FK_TransferDetail_Product] FOREIGN KEY([ProductId])
REFERENCES [dbo].[Product] ([GUID])

ALTER TABLE [dbo].[TransferDetail] CHECK CONSTRAINT [FK_TransferDetail_Product]

ALTER TABLE [dbo].[TransferDetail]  WITH CHECK ADD  CONSTRAINT [FK_TransferDetail_Product1] FOREIGN KEY([DestinationProductId])
REFERENCES [dbo].[Product] ([GUID])

ALTER TABLE [dbo].[TransferDetail] CHECK CONSTRAINT [FK_TransferDetail_Product1]

ALTER TABLE [dbo].[TransferDetail]  WITH CHECK ADD  CONSTRAINT [FK_TransferDetail_PurchaseInvoiceDetails] FOREIGN KEY([PurchaseInvoiceDetailId])
REFERENCES [dbo].[PurchaseInvoiceDetails] ([Guid])

ALTER TABLE [dbo].[TransferDetail] CHECK CONSTRAINT [FK_TransferDetail_PurchaseInvoiceDetails]

ALTER TABLE [dbo].[TransferDetail]  WITH CHECK ADD  CONSTRAINT [FK_TransferDetail_Transfer] FOREIGN KEY([MasterId])
REFERENCES [dbo].[Transfer] ([Guid])

ALTER TABLE [dbo].[TransferDetail] CHECK CONSTRAINT [FK_TransferDetail_Transfer]

ALTER TABLE [dbo].[TransferDetail]  WITH CHECK ADD  CONSTRAINT [FK_TransferDetail_TransferDetail] FOREIGN KEY([TransferDetailId])
REFERENCES [dbo].[TransferDetail] ([Guid])

ALTER TABLE [dbo].[TransferDetail] CHECK CONSTRAINT [FK_TransferDetail_TransferDetail]

END
GO 




IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='TransferDetail')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'TransferDetail',5,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'),N'/TransferDetail/Form',N'TransferDetail', 0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='TransferDetail') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='TransferDetail'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='TransferDetail') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='TransferDetail'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO 
   

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='TransferDetail') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='TransferDetail'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO 
   

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='TransferDetail') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='TransferDetail'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='ParentStoreAccess')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'ParentStoreAccess',6,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'),NULL,N'ParentStoreAccess',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='ClinicSectionStoreAccess')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'ClinicSectionStoreAccess',7,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'),NULL,N'ClinicSectionStoreAccess',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ParentStoreAccess') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ParentStoreAccess'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ParentStoreAccess') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ParentStoreAccess'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ClinicSectionStoreAccess') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ClinicSectionStoreAccess'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 


IF EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='SubStoreroom' AND ShowName='Storeroom')
   BEGIN
          UPDATE dbo.SubSystem SET ShowName='MedicineStoreroom' WHERE Name='SubStoreroom' AND ShowName='Storeroom'
   END
GO 




IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='MaterialStoreroom')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'MaterialStoreroom',5,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'),N'/MaterialStoreroom/Form',N'MaterialStoreroom', 1,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'))
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='MaterialStoreroom') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='MaterialStoreroom'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='MaterialStoreroom') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='MaterialStoreroom'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO 
   


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='MaterialStoreroom') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='MaterialStoreroom'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO 
   


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='MaterialStoreroom') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='MaterialStoreroom'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Product' AND COLUMN_NAME = 'MaterialTypeId') 
BEGIN
	ALTER TABLE dbo.Product ADD MaterialTypeId int;
	ALTER TABLE dbo.Product
	ADD CONSTRAINT FK_MaterialType_BaseInfoGeneral
	FOREIGN KEY (MaterialTypeId) REFERENCES dbo.BaseInfoGeneral(Id);
END
GO 


IF NOT EXISTS (SELECT * FROM dbo.BaseInfoGeneralType WHERE EName='MaterialType')
   BEGIN
          INSERT INTO dbo.BaseInfoGeneralType (EName,FName)VALUES( N'MaterialType', N'نوع کالا')
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.BaseInfoGeneral WHERE Name='Medicine' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='MaterialType'))
   BEGIN
          INSERT INTO dbo.BaseInfoGeneral (Name,Priority,Description,TypeId)VALUES(N'Medicine',1,NULL,(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='MaterialType'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.BaseInfoGeneral WHERE Name='Material' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='MaterialType'))
   BEGIN
          INSERT INTO dbo.BaseInfoGeneral (Name,Priority,Description,TypeId)VALUES(N'Material',2,NULL,(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='MaterialType'))
   END
GO 



IF EXISTS (SELECT TOP(1) 1 FROM dbo.Product WHERE MaterialTypeId IS NULL)
   BEGIN
          UPDATE dbo.Product SET MaterialTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Medicine' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='MaterialType')) WHERE MaterialTypeId IS NULL
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='HospitalAnalysisResult')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'HospitalAnalysisResult',3,(SELECT Id FROM dbo.SubSystem WHERE Name='Doctor'),'/Patient/GetPatientsAnalysisResults',N'AnalysisResult', 1,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Doctor'))
   END

   GO
IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='HospitalAnalysisResult') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='HospitalAnalysisResult'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END

   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='HospitalAnalysisResult') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='View'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='HospitalAnalysisResult'),(SELECT Id FROM dbo.Access WHERE Name='View'))
   END
   GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Transfer') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Print'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Transfer'),(SELECT Id FROM dbo.Access WHERE Name='Print'))
   END
GO 



IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Customer'
          ) 
BEGIN
	
CREATE TABLE [dbo].[Customer](
	[GUID] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[CustomerTypeId] [UNIQUEIDENTIFIER] NULL,
	[Address] [NVARCHAR](500) NULL,
	[CityId] [UNIQUEIDENTIFIER] NULL,
	[Description] [NVARCHAR](MAX) NULL,
 CONSTRAINT [PK_Customer] PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

ALTER TABLE [dbo].[Customer] ADD  CONSTRAINT [DF_Customer_GUID]  DEFAULT (NEWSEQUENTIALID()) FOR [GUID]


ALTER TABLE [dbo].[Customer]  WITH CHECK ADD  CONSTRAINT [FK_Customer_BaseInfo] FOREIGN KEY([CustomerTypeId])
REFERENCES [dbo].[BaseInfo] ([GUID])


ALTER TABLE [dbo].[Customer] CHECK CONSTRAINT [FK_Customer_BaseInfo]


ALTER TABLE [dbo].[Customer]  WITH CHECK ADD  CONSTRAINT [FK_Customer_BaseInfo1] FOREIGN KEY([CityId])
REFERENCES [dbo].[BaseInfo] ([GUID])


ALTER TABLE [dbo].[Customer] CHECK CONSTRAINT [FK_Customer_BaseInfo1]


ALTER TABLE [dbo].[Customer]  WITH CHECK ADD  CONSTRAINT [FK_Customer_User] FOREIGN KEY([GUID])
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[Customer] CHECK CONSTRAINT [FK_Customer_User]

END
GO

IF NOT EXISTS(SELECT * FROM dbo.BaseInfoType WHERE EName = 'CustomerType')
  BEGIN
	INSERT INTO dbo.BaseInfoType (EName,FName) VALUES (N'CustomerType',N'نوع مشتری')
END
GO

IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoice' AND COLUMN_NAME = 'CustomerId') 
BEGIN
	ALTER TABLE dbo.SaleInvoice ADD CustomerId UNIQUEIDENTIFIER NULL;
	
	ALTER TABLE [dbo].[SaleInvoice]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoice_Customer] FOREIGN KEY([CustomerId])
	REFERENCES [dbo].[Customer] ([GUID])

	ALTER TABLE [dbo].[SaleInvoice] CHECK CONSTRAINT [FK_SaleInvoice_Customer]

END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionService' AND COLUMN_NAME = 'PurchaseInvoiceDetailId') 
BEGIN
	ALTER TABLE dbo.ReceptionService ADD PurchaseInvoiceDetailId UNIQUEIDENTIFIER NULL;
	
	ALTER TABLE [dbo].[ReceptionService]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionService_PurchaseInvoiceDetail] FOREIGN KEY([PurchaseInvoiceDetailId])
	REFERENCES [dbo].[PurchaseInvoiceDetails] ([GUID])


	ALTER TABLE [dbo].[ReceptionService] CHECK CONSTRAINT [FK_ReceptionService_PurchaseInvoiceDetail]

END
GO 

IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionService' AND COLUMN_NAME = 'TransferDetailId') 
BEGIN
	ALTER TABLE dbo.ReceptionService ADD TransferDetailId UNIQUEIDENTIFIER NULL;
	
	ALTER TABLE [dbo].[ReceptionService]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionService_TransferDetail] FOREIGN KEY([TransferDetailId])
	REFERENCES [dbo].[TransferDetail] ([GUID])


	ALTER TABLE [dbo].[ReceptionService] CHECK CONSTRAINT [FK_ReceptionService_TransferDetail]

END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ClinicSection' AND COLUMN_NAME = 'ClinicSectionShowTypeId') 
BEGIN
	ALTER TABLE dbo.ClinicSection ADD ClinicSectionShowTypeId INT NULL;
	
	ALTER TABLE [dbo].[ClinicSection]  WITH CHECK ADD CONSTRAINT [FK_ClinicSection_ClinicSectionShowType] FOREIGN KEY([ClinicSectionShowTypeId])
	REFERENCES [dbo].[BaseInfoGeneral] ([Id])


	ALTER TABLE [dbo].[ClinicSection] CHECK CONSTRAINT [FK_ClinicSection_ClinicSectionShowType]

END
GO 

IF NOT EXISTS (SELECT * FROM dbo.BaseInfoGeneralType WHERE EName='ClinicSectionShowType')
   BEGIN
          INSERT INTO dbo.BaseInfoGeneralType (EName,FName)VALUES(N'ClinicSectionShowType',N'مکان نشان دادن بخش')
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.BaseInfoGeneral WHERE Name='AllSubSystems' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='ClinicSectionShowType'))
   BEGIN
          INSERT INTO dbo.BaseInfoGeneral (Name,Priority,Description,TypeId)VALUES(N'AllSubSystems',1,NULL,(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='ClinicSectionShowType'))
   END
GO 

IF NOT EXISTS (SELECT * FROM dbo.BaseInfoGeneral WHERE Name='StoreRoom' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='ClinicSectionShowType'))
   BEGIN
          INSERT INTO dbo.BaseInfoGeneral (Name,Priority,Description,TypeId)VALUES(N'StoreRoom',1,NULL,(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='ClinicSectionShowType'))
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='ProductRecive')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'ProductRecive',8,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'),N'/ProductRecive/Form',N'ProductRecive', 1,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'))
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ProductRecive') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ProductRecive'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ProductRecive') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ProductRecive'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO 
   


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ProductRecive') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ProductRecive'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO 
   


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ProductRecive') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ProductRecive'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO 




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Reception' AND COLUMN_NAME = 'VisitNum') 
BEGIN
	ALTER TABLE dbo.Reception ADD VisitNum int;
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Reception' AND COLUMN_NAME = 'ReserveDetailId') 
BEGIN
	ALTER TABLE dbo.Reception ADD ReserveDetailId uniqueidentifier;
	ALTER TABLE dbo.Reception
	ADD CONSTRAINT FK_Reception_ReserveDetail
	FOREIGN KEY (ReserveDetailId) REFERENCES dbo.ReserveDetail(GUID);
END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Reception' AND COLUMN_NAME = 'StatusId') 
BEGIN
	ALTER TABLE dbo.Reception ADD StatusId int;
	ALTER TABLE dbo.Reception
	ADD CONSTRAINT FK_Status_BaseInfoGeneral
	FOREIGN KEY (StatusId) REFERENCES dbo.BaseInfoGeneral(Id);
END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Reception' AND COLUMN_NAME = 'ServerVisitNum') 
BEGIN
	ALTER TABLE dbo.Reception ADD ServerVisitNum BIGINT;
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PrescriptionDetail' AND COLUMN_NAME = 'ReceptionId') 
BEGIN
	ALTER TABLE dbo.PrescriptionDetail ADD ReceptionId uniqueidentifier;
	ALTER TABLE dbo.PrescriptionDetail
	ADD CONSTRAINT FK_PrescriptionDetail_Reception
	FOREIGN KEY (ReceptionId) REFERENCES dbo.Reception(GUID);
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PrescriptionTestDetail' AND COLUMN_NAME = 'ReceptionId') 
BEGIN
	ALTER TABLE dbo.PrescriptionTestDetail ADD ReceptionId uniqueidentifier;
	ALTER TABLE dbo.PrescriptionTestDetail
	ADD CONSTRAINT FK_PrescriptionTestDetail_Reception
	FOREIGN KEY (ReceptionId) REFERENCES dbo.Reception(GUID);
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Visit_Patient_Disease' AND COLUMN_NAME = 'ReceptionId') 
BEGIN
	ALTER TABLE dbo.Visit_Patient_Disease ADD ReceptionId uniqueidentifier;
	ALTER TABLE dbo.Visit_Patient_Disease
	ADD CONSTRAINT FK_Visit_Patient_Disease_Reception
	FOREIGN KEY (ReceptionId) REFERENCES dbo.Reception(GUID);
END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Visit_Symptom' AND COLUMN_NAME = 'ReceptionId') 
BEGIN
	ALTER TABLE dbo.Visit_Symptom ADD ReceptionId uniqueidentifier;
	ALTER TABLE dbo.Visit_Symptom
	ADD CONSTRAINT FK_Visit_Symptom_Reception
	FOREIGN KEY (ReceptionId) REFERENCES dbo.Reception(GUID);
END
GO 




CREATE OR ALTER PROCEDURE [dbo].[DSP_RefreshReceptionNums] @DoctorId UNIQUEIDENTIFIER
AS
BEGIN	
	DECLARE @guid UNIQUEIDENTIFIER
	DECLARE @ConvertedDate TIME
	DECLARE @ReceptionNum INT = 1
	DECLARE TodayVisits CURSOR FOR
	SELECT GUID, ConvertedDate
	FROM
	(
	SELECT Reception.GUID, CONVERT(TIME,ReserveDetail.ReserveStartTime, 126) AS ConvertedDate  
	FROM Reception 
	INNER JOIN ReserveDetail ON Reception.ReserveDetailId = ReserveDetail.GUID 
	WHERE CAST(Reception.ReceptionDate AS DATE) = CAST(GETDATE() AS DATE) AND ReserveDetail.DoctorId = @DoctorId
	)
	TEMP 
	ORDER BY ConvertedDate
	OPEN TodayVisits
	FETCH NEXT FROM TodayVisits INTO @guid, @ConvertedDate
	WHILE @@FETCH_STATUS = 0
		BEGIN
			
			UPDATE Reception
			SET VisitNum = @ReceptionNum
			WHERE GUID = @guid

			SET @ReceptionNum = @ReceptionNum + 1

			FETCH NEXT FROM TodayVisits INTO  @guid, @ConvertedDate
		END
	CLOSE TodayVisits
	DEALLOCATE TodayVisits

END
GO



IF NOT EXISTS(SELECT EName FROM   BaseInfoGeneralType WHERE  EName = 'ReceptionType') 
BEGIN
	Insert into BaseInfoGeneralType(EName,FName)values('ReceptionType',N'نوع پذیرش')
END
GO


IF NOT EXISTS (SELECT * FROM dbo.BaseInfoGeneral WHERE Name='Reception' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='ReceptionType'))
   BEGIN
          INSERT INTO dbo.BaseInfoGeneral (Name,Priority,Description,TypeId)VALUES(N'Reception',1,NULL,(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='ReceptionType'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.BaseInfoGeneral WHERE Name='VisitReception' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='ReceptionType'))
   BEGIN
          INSERT INTO dbo.BaseInfoGeneral (Name,Priority,Description,TypeId)VALUES(N'VisitReception',2,NULL,(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='ReceptionType'))
   END
GO 


UPDATE dbo.ClinicSectionSetting SET SectionTypeId = (SELECT Id FROM dbo.BaseInfoGeneral WHERE Name = 'Clinic') WHERE SName = 'UseFormNumber'


GO 

IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'RemainingNum') 

BEGIN

	ALTER TABLE dbo.PurchaseInvoiceDetails ADD RemainingNum numeric(20, 2) NULL;
	
END
GO 

IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'TransferDetail' AND COLUMN_NAME = 'RemainingNum') 

BEGIN

	ALTER TABLE dbo.TransferDetail ADD RemainingNum numeric(20, 2) NULL;
	
END
GO 




IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Visit_Patient_Disease' AND COLUMN_NAME = 'VisitId') 
BEGIN

	ALTER TABLE dbo.Visit_Patient_Disease DROP CONSTRAINT [FK_Visit_Patient_Disease_Visit];

	ALTER TABLE dbo.Visit_Patient_Disease DROP COLUMN VisitId;

END
Go


IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Visit_Symptom' AND COLUMN_NAME = 'VisitId') 
BEGIN

	ALTER TABLE dbo.Visit_Symptom DROP CONSTRAINT [FK_Visit_Symptom_Visit];

	ALTER TABLE dbo.Visit_Symptom DROP COLUMN VisitId;

END
Go



IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PrescriptionDetail' AND COLUMN_NAME = 'VisitId') 
BEGIN

	ALTER TABLE dbo.PrescriptionDetail DROP CONSTRAINT [FK_PrescriptionDetail_Visit];

	ALTER TABLE dbo.PrescriptionDetail DROP COLUMN VisitId;

END
Go


IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PrescriptionTestDetail' AND COLUMN_NAME = 'VisitId') 
BEGIN

	ALTER TABLE dbo.PrescriptionTestDetail DROP CONSTRAINT [FK_PrescriptionTestDetail_Visit];

	ALTER TABLE dbo.PrescriptionTestDetail DROP COLUMN VisitId;

END
Go


IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Visit' AND COLUMN_NAME = 'ReceptionId') 
BEGIN

	ALTER TABLE dbo.Visit DROP CONSTRAINT [FK_Visit_Reception];

	ALTER TABLE dbo.Visit DROP COLUMN ReceptionId;

END
Go


IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Visit_PatientVariables' AND COLUMN_NAME = 'VisitId') 
BEGIN

	ALTER TABLE dbo.Visit_PatientVariables DROP CONSTRAINT [FK_VisitPatientVariables_Visit];

	ALTER TABLE dbo.Visit_PatientVariables DROP COLUMN VisitId;

END
Go


IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Visit_PatientVariables' AND COLUMN_NAME = 'VisitId') 
BEGIN

	ALTER TABLE dbo.Visit_PatientVariables DROP CONSTRAINT [FK_VisitPatientVariables_Visit];

	ALTER TABLE dbo.Visit_PatientVariables DROP COLUMN VisitId;

END
Go

IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Visit_PatientVariables') 
BEGIN

	DROP TABLE dbo.Visit_PatientVariables

END
Go


IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ServiceDetail') 
BEGIN

	DROP TABLE dbo.ServiceDetail

END
Go


IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Received') 
BEGIN

	DROP TABLE dbo.Received

END
Go


IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PatientVariablesValue' AND COLUMN_NAME = 'VisitId') 
BEGIN

	ALTER TABLE dbo.PatientVariablesValue DROP CONSTRAINT [FK_PatientVariablesValue_Visit];

	ALTER TABLE dbo.PatientVariablesValue DROP COLUMN VisitId;

END
Go

IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionService' AND COLUMN_NAME = 'VisitId') 
BEGIN

	ALTER TABLE dbo.ReceptionService DROP CONSTRAINT [FK_ReceptionService_Visit];

	ALTER TABLE dbo.ReceptionService DROP COLUMN VisitId;

END
GO

IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoice' AND COLUMN_NAME = 'VisitId') 
BEGIN

	ALTER TABLE dbo.SaleInvoice DROP CONSTRAINT [FK_SaleInvoice_Visit];

	ALTER TABLE dbo.SaleInvoice DROP COLUMN VisitId;

END
Go



IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Visit') 
BEGIN

DELETE FROM dbo.Visit
	DROP TABLE dbo.Visit

END

GO


IF EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'TransferDetail'
                 AND COLUMN_NAME = 'SourceTransferDetailId') 
BEGIN
	

	EXEC sp_RENAME 'TransferDetail.SourceTransferDetailId' , 'TransferDetailId', 'COLUMN'


END
Go


ALTER function [dbo].[FN_GetAllSubSystemsWithAccess]
(
	@UserId UNIQUEIDENTIFIER,
	@SectionTypeId INT ,
	@ClinicSectionId UNIQUEIDENTIFIER,
	@LanguageId int = 0,
	@ParentUserId UNIQUEIDENTIFIER
)
RETURNS TABLE 
AS
RETURN
	(	

	--DECLARE @UserId UNIQUEIDENTIFIER = 'FE7D6A0F-13EB-4973-B040-DF069243235B';
	--DECLARE @SectionTypeId INT = 1116 ;
	--DECLARE @ClinicSectionId UNIQUEIDENTIFIER = '4801535B-755E-ED11-B2E7-68172993A336';
	--DECLARE @LanguageId int = 0;
	--DECLARE @ParentUserId UNIQUEIDENTIFIER = '9551d520-7447-43fa-8799-6f504343f380';

	SELECT DISTINCT 
		SubSystem.Id, 
		SubSystem.Parent As ParentId , 
		[Name], 
		SubSystem.ShowName,
		CONVERT(bit, 0) AS Checked  
	FROM 
		SubSystem 
		INNER JOIN SubSystemSection ON SubSystem.Id = SubSystemSection.SubSystemId AND SubSystemSection.SectionTypeId = @SectionTypeId
		INNER JOIN dbo.SubSystemAccess ON SubSystemAccess.SubSystemId = SubSystem.Id
		INNER JOIN dbo.UserSubSystemAccess ON UserSubSystemAccess.SubSystemAccessId = SubSystemAccess.Id AND dbo.UserSubSystemAccess.UserId = @ParentUserId
		
	UNION
	SELECT 
		SubSystemAccess.Id, 
		SubSystemAccess.SubSystemId ParentId, 
		Access.[Name],
		Access.[Name] As ShowName,
		CASE 
			WHEN UserSubSystemAccess.GUID IS NULL
				THEN CONVERT(bit, 0)
			ELSE CONVERT(bit, 1) 
			END AS Checked
	FROM 
		SubSystemAccess
		INNER JOIN Access ON SubSystemAccess.AccessId = Access.Id
		LEFT JOIN UserSubSystemAccess ON SubSystemAccess.Id = UserSubSystemAccess.SubSystemAccessId AND UserSubSystemAccess.UserId = @UserId AND UserSubSystemAccess.ClinicSectionId = @ClinicSectionId 
		WHERE SubSystemAccess.Id IN (SELECT SubSystemAccessId FROM dbo.UserSubSystemAccess WHERE UserId = @ParentUserId AND ClinicSectionId = @ClinicSectionId)
		

)



Go




IF NOT EXISTS (SELECT * FROM dbo.Service WHERE Name='Ambulance' AND	TypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Other' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='ServiceType')))
BEGIN
	INSERT INTO dbo.Service	(Name,Price,TypeId)	VALUES	(N'Ambulance',1,(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Other' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='ServiceType')))
END
GO

IF NOT EXISTS (SELECT * FROM dbo.Service WHERE Name='DoctorVisit' AND	TypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Other' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='ServiceType')))
BEGIN
	INSERT INTO dbo.Service	(Name,Price,TypeId)	VALUES	(N'DoctorVisit',1,(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Other' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='ServiceType')))
END
GO



CREATE OR ALTER  FUNCTION [dbo].[FN_GetAllEventsForCalendar]
(
	@ClinicSectionId UNIQUEIDENTIFIER,
	@FromDate DATE,
	@ToDate DATE,
	@DoctorId UNIQUEIDENTIFIER
	
)
RETURNS @returnList TABLE ([GUID] UNIQUEIDENTIFIER, [Name] NVARCHAR(50), FileNum NVARCHAR(50), FormNumber NVARCHAR(50), PhoneNumber NVARCHAR(50), ReserveStartTime NVARCHAR(50)
	, ReserveEndTime NVARCHAR(50), StatusName NVARCHAR(50), OldVisit BIT, LastVisit BIT, Amount NUMERIC(20,2), Remain NUMERIC(20,2), UseFormNum BIT) 
AS

	BEGIN	
	--DECLARE @reserveDtoToday TABLE ([GUID] uniqueidentifier, [Name] NVARCHAR(50), FileNum NVARCHAR(50), FormNum[dbo].[FN_GetAllEventsForCalendar1]ber NVARCHAR(50), PhoneNumber NVARCHAR(50), ReserveStartTime NVARCHAR(50)
	--, ReserveEndTime NVARCHAR(50), StatusName NVARCHAR(50), OldVisit bit, LastVisit bit, ReserveDate date)
	
	--INSERT INTO @returnList
		DECLARE @UseFormNum NVARCHAR(50) = ISNULL((
			SELECT TOP 1 SValue
			FROM ClinicSectionSettingValue 
			INNER JOIN ClinicSectionSetting ON ClinicSectionSettingValue.SettingId = ClinicSectionSetting.Id 
			AND ClinicSectionSetting.SName = 'UseFormNumber'
			AND ClinicSectionId = @ClinicSectionId
		), '')
		
	INSERT INTO @returnList

	SELECT 
		Temp.GUID,
		Temp.Name,
		Temp.FileNum,
		Temp.FormNumber,
		Temp.PhoneNumber,
		Temp.ReserveStartTime,
		Temp.ReserveEndTime,
		Temp.statusName,
		Temp.OldVisit,
		Temp.LastVisit,
		Temp.amount,
		temp.pay - Temp.amount Remain,
		CASE
			WHEN UPPER(@UseFormNum) = 'FALSE' THEN 0
			WHEN UPPER(@UseFormNum) = 'TRUE' THEN 1
			ELSE 0 
		END UseFormNum
	FROM
	(
SELECT
		ReserveDetail.[GUID], 
		[User].[Name] AS Name, 
		Patient.FileNum AS FileNum,
		Patient.FormNumber AS FormNumber, 
		[User].PhoneNumber PhoneNumber, 
		ReserveDetail.ReserveStartTime, 
		ReserveDetail.ReserveEndTime, 
		BaseInfoGeneral.[Name] statusName, 
		ReserveDetail.OldVisit, 
		ReserveDetail.LastVisit, 
		ISNULL(CASE WHEN CONVERT(DATE, Reception.ReceptionDate) = CONVERT(DATE, GETDATE()) THEN Received.Amount ELSE 0 END, 0) amount,
		ISNULL(CASE WHEN CONVERT(DATE, Reception.ReceptionDate) = CONVERT(DATE, GETDATE()) THEN Received.pay ELSE 0 END, 0) pay
		
	FROM ReserveDetail
		INNER JOIN Reserve ON ReserveDetail.MasterId = Reserve.[GUID]
		AND Reserve.ClinicSectionId = @ClinicSectionId 
		AND ReserveDetail.ReserveDate >= @FromDate AND ReserveDetail.ReserveDate <= @ToDate
		AND ReserveDetail.DoctorId = @DoctorId
		INNER JOIN BaseInfoGeneral ON BaseInfoGeneral.Id = ReserveDetail.StatusId
		INNER JOIN Patient ON Patient.[GUID] = ReserveDetail.PatientId
		INNER JOIN [User] ON [User].[GUID] = Patient.[GUID]
		LEFT JOIN dbo.Reception ON Reception.ReserveDetailId = ReserveDetail.[GUID] 
		LEFT JOIN (SELECT rs.ReceptionId,SUM(ISNULL(rsr.Amount,0)) pay,SUM((ISNULL(rs.Number,0)*ISNULL(rs.Price,0))-ISNULL(rs.Discount,0)) amount FROM dbo.ReceptionService rs
		LEFT JOIN dbo.ReceptionServiceReceived rsr ON rs.GUID = rsr.ReceptionServiceId GROUP BY rs.ReceptionId) Received ON Received.ReceptionId = Reception.GUID
	) Temp
	RETURN
	END

GO

IF NOT EXISTS(SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId = (SELECT Id FROM dbo.SubSystem WHERE Name = 'BaseInfo'))
  BEGIN

  INSERT INTO dbo.SubSystemAccess
  (
      SubSystemId,
      AccessId
  )
  VALUES
  (   (SELECT Id FROM dbo.SubSystem WHERE Name = 'BaseInfo'), -- SubSystemId - int
      1  -- AccessId - int
      )

  END

  GO


  IF NOT EXISTS(SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId = (SELECT Id FROM dbo.SubSystem WHERE Name = 'Analysis' AND Parent = 0))
  BEGIN

  INSERT INTO dbo.SubSystemAccess
  (
      SubSystemId,
      AccessId
  )
  VALUES
  (   (SELECT Id FROM dbo.SubSystem WHERE Name = 'Analysis' AND Parent=0), -- SubSystemId - int
      1  -- AccessId - int
      )

  END

  GO

  IF NOT EXISTS(SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId = (SELECT Id FROM dbo.SubSystem WHERE Name = 'Storeroom'))
  BEGIN

  INSERT INTO dbo.SubSystemAccess
  (
      SubSystemId,
      AccessId
  )
  VALUES
  (   (SELECT Id FROM dbo.SubSystem WHERE Name = 'Storeroom'), -- SubSystemId - int
      1  -- AccessId - int
      )

  END

   GO

  IF NOT EXISTS(SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId = (SELECT Id FROM dbo.SubSystem WHERE Name = 'ClinicSectionStoreAccess'))
  BEGIN

  INSERT INTO dbo.SubSystemAccess
  (
      SubSystemId,
      AccessId
  )
  VALUES
  (   (SELECT Id FROM dbo.SubSystem WHERE Name = 'ClinicSectionStoreAccess'), -- SubSystemId - int
      1  -- AccessId - int
      )

  END

	
	GO
	
	CREATE OR ALTER PROCEDURE ResetRemainingNums
	AS
	BEGIN
	
	
	DECLARE @ToneId UNIQUEIDENTIFIER
	DECLARE @ToneNum NUMERIC(20,7)
	DECLARE @ToneRemain NUMERIC(20,7)
	DECLARE @TtwoId UNIQUEIDENTIFIER
	DECLARE @TtwoNum NUMERIC(20,7)
	DECLARE @TtwoRemain NUMERIC(20,7)
	DECLARE @PId UNIQUEIDENTIFIER
	DECLARE @Pnum NUMERIC(20,7)
	DECLARE @PFreenum NUMERIC(20,7)
	DECLARE @PRemain NUMERIC(20,7)
	
	


	--UPDATE dbo.TransferDetail SET RemainingNum = ISNULL(Num,0)
	--UPDATE dbo.PurchaseInvoiceDetails SET RemainingNum = ISNULL(Num,0) + ISNULL(FreeNum,0)

	

DECLARE AllTransfer CURSOR FOR
	SELECT * --ToneId, ToneNum, ToneRemain, TtwoId, TtwoNum,TtwoRemain, PId ,Pnum, PFnum ,PRemain
	FROM
	(
	SELECT transferOne.Guid ToneId, transferOne.Num ToneNum,transferOne.RemainingNum ToneRemain ,  NULL TtwoId,NULL TtwoNum,NULL TtwoRemain,purchase.Guid PId , purchase.Num Pnum, purchase.FreeNum PFnum, purchase.RemainingNum PRemain
	FROM dbo.TransferDetail transferOne
	INNER JOIN dbo.PurchaseInvoiceDetails purchase ON purchase.Guid = transferOne.PurchaseInvoiceDetailId
	
	UNION

	SELECT transferOne.Guid ToneId,transferOne.Num ToneNum,transferOne.RemainingNum ToneRemain,  transferTwo.Guid TtwoId , transferTwo.Num TtwoNum,transferTwo.RemainingNum TtwoRemain,NULL PId, NULL Pnum, NULL PFnum, NULL PRemain
	FROM dbo.TransferDetail transferOne
	INNER JOIN dbo.TransferDetail transferTwo ON transferOne.TransferDetailId = transferTwo.Guid

	)
	TEMP 
	
	OPEN AllTransfer
	FETCH NEXT FROM AllTransfer INTO @ToneId,@ToneNum,@ToneRemain,@TtwoId, @TtwoNum,@TtwoRemain, @PId , @Pnum, @PFreenum,@PRemain
	WHILE @@FETCH_STATUS = 0
		BEGIN
			
			IF @TtwoId IS NOT NULL
				BEGIN

				
					UPDATE dbo.TransferDetail SET RemainingNum = (SELECT RemainingNum FROM dbo.TransferDetail WHERE Guid = @TtwoId) - @ToneRemain WHERE Guid = @TtwoId

				END
			ELSE
				BEGIN

					UPDATE dbo.PurchaseInvoiceDetails SET RemainingNum = (SELECT RemainingNum FROM dbo.PurchaseInvoiceDetails WHERE Guid = @PId) - @ToneRemain WHERE Guid = @PId
			
				END
			
			FETCH NEXT FROM AllTransfer INTO  @ToneId,@ToneNum,@ToneRemain,@TtwoId, @TtwoNum,@TtwoRemain, @PId , @Pnum, @PFreenum,@PRemain
		END
	CLOSE AllTransfer
	DEALLOCATE AllTransfer
	END
GO







IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PayVisit') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PayVisit'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 

IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PayVisit') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PayVisit'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PayVisit') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PayVisit'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PayVisit') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PayVisit'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO 


IF NOT EXISTS(SELECT * FROM ClinicSectionSetting WHERE SName='MaxDaysBetweenTwoVisit' AND SectionTypeId=(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Hospital'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting(SName, SectionTypeId,InputType)VALUES(N'MaxDaysBetweenTwoVisit',(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Hospital'),N'int')
END
GO



IF NOT EXISTS(SELECT * FROM ClinicSectionSetting WHERE SName='MaxDaysBetweenTwoVisit' AND SectionTypeId=(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting(SName, SectionTypeId,InputType)VALUES(N'MaxDaysBetweenTwoVisit',(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'),N'int')
END
GO


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'PrescriptionDetail'
                 AND COLUMN_NAME = 'CreatedUserId') 
BEGIN
	ALTER TABLE dbo.PrescriptionDetail
	ADD CreatedUserId uniqueidentifier NULL
    
	ALTER TABLE dbo.PrescriptionDetail
	ADD CreatedDate DATETIME NULL
    


	ALTER TABLE [dbo].[PrescriptionDetail]  WITH CHECK ADD  CONSTRAINT [FK_PrescriptionDetail_CreatedUser] FOREIGN KEY(CreatedUserId)
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[PrescriptionDetail] CHECK CONSTRAINT [FK_PrescriptionDetail_CreatedUser]

END
GO


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'PrescriptionDetail'
                 AND COLUMN_NAME = 'ModifiedUserId') 
BEGIN
	ALTER TABLE dbo.PrescriptionDetail
	ADD ModifiedUserId uniqueidentifier NULL
    
	ALTER TABLE dbo.PrescriptionDetail
	ADD ModifiedDate DATETIME NULL
    


	ALTER TABLE [dbo].[PrescriptionDetail]  WITH CHECK ADD  CONSTRAINT [FK_PrescriptionDetail_ModifiedUser] FOREIGN KEY(ModifiedUserId)
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].[PrescriptionDetail] CHECK CONSTRAINT [FK_PrescriptionDetail_ModifiedUser]

END
GO


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'PrescriptionTestDetail'
                 AND COLUMN_NAME = 'CreatedUserId') 
BEGIN
	ALTER TABLE dbo.PrescriptionTestDetail
	ADD CreatedUserId uniqueidentifier NULL
    
	ALTER TABLE dbo.PrescriptionTestDetail
	ADD CreatedDate DATETIME NULL
    


	ALTER TABLE [dbo].PrescriptionTestDetail  WITH CHECK ADD  CONSTRAINT [FK_PrescriptionTestDetail_CreatedUser] FOREIGN KEY(CreatedUserId)
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].PrescriptionTestDetail CHECK CONSTRAINT [FK_PrescriptionTestDetail_CreatedUser]

END
GO


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'PrescriptionTestDetail'
                 AND COLUMN_NAME = 'ModifiedUserId') 
BEGIN
	ALTER TABLE dbo.PrescriptionTestDetail
	ADD ModifiedUserId uniqueidentifier NULL
    
	ALTER TABLE dbo.PrescriptionTestDetail
	ADD ModifiedDate DATETIME NULL
    


	ALTER TABLE [dbo].PrescriptionTestDetail  WITH CHECK ADD  CONSTRAINT [FK_PrescriptionTestDetail_ModifiedUser] FOREIGN KEY(ModifiedUserId)
REFERENCES [dbo].[User] ([GUID])


ALTER TABLE [dbo].PrescriptionTestDetail CHECK CONSTRAINT [FK_PrescriptionTestDetail_ModifiedUser]

END
Go


UPDATE dbo.SubSystem SET ShowName = 'UserAccess' WHERE ShowName = 'User Access'




IF EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName=N'AnalysReportBannerUrl')
   BEGIN
          UPDATE dbo.ClinicSectionSetting SET SName=N'ReportHeaderBanner' WHERE SName=N'AnalysReportBannerUrl'
   END
GO 





IF NOT EXISTS(SELECT * FROM ClinicSectionSetting WHERE SName='ReportFooterBanner' AND SectionTypeId=(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting(SName, SectionTypeId,InputType)VALUES(N'ReportFooterBanner',(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'),N'image')
END
GO



IF NOT EXISTS(SELECT * FROM ClinicSectionSetting WHERE SName='ReportLogo_8cm' AND SectionTypeId=(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting(SName, SectionTypeId,InputType)VALUES(N'ReportLogo_8cm',(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'),N'image')
END
GO



IF NOT EXISTS(SELECT * FROM ClinicSectionSetting WHERE SName='RadiologyReportHeader_8cm' AND SectionTypeId=(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting(SName, SectionTypeId,InputType)VALUES(N'RadiologyReportHeader_8cm',(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'),NULL)
END
GO


IF NOT EXISTS(SELECT * FROM ClinicSectionSetting WHERE SName='LabratoryReportHeader_8cm' AND SectionTypeId=(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting(SName, SectionTypeId,InputType)VALUES(N'LabratoryReportHeader_8cm',(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'),NULL)
END
GO


IF NOT EXISTS(SELECT * FROM ClinicSectionSetting WHERE SName='UseRadiologyReportNewDesign_8cm' AND SectionTypeId=(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting(SName, SectionTypeId,InputType)VALUES(N'UseRadiologyReportNewDesign_8cm',(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'),N'bool')
END
GO


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'AnalysisResultMaster'
                 AND COLUMN_NAME = 'ServerNumber') 
BEGIN
	ALTER TABLE AnalysisResultMaster
	ADD ServerNumber INT null


END
Go




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'AnalysisItem' AND COLUMN_NAME = 'ShowChart') 
BEGIN
	ALTER TABLE dbo.AnalysisItem
	ADD ShowChart bit null
END
Go



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'AnalysisResult' AND COLUMN_NAME = 'ShowChart') 
BEGIN
	ALTER TABLE dbo.AnalysisResult
	ADD ShowChart bit null
END
Go

IF NOT EXISTS(SELECT * FROM   ClinicSectionSetting WHERE  SName = N'UseOnlineResult') 
BEGIN
	INSERT INTO dbo.ClinicSectionSetting(SName,SectionTypeId,InputType)VALUES(N'UseOnlineResult',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name = 'Lab'),'bool')
	INSERT INTO dbo.ClinicSectionSetting(SName,SectionTypeId,InputType)VALUES(N'UseOnlineResult',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name = 'Rad'),'bool')
END




IF NOT EXISTS(SELECT * FROM ClinicSectionSetting WHERE SName='LabPhoneNumber' AND SectionTypeId=(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting(SName, SectionTypeId,InputType)VALUES(N'LabPhoneNumber',(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'),NULL)
END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='CanConsumeProduct')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'CanConsumeProduct',17,0,NULL,N'CanConsumeProduct',0,NULL,NULL)
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='CanConsumeService')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'CanConsumeService',18,0,NULL,N'CanConsumeService',0,NULL,NULL)
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeProduct') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeProduct'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeService') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeService'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeService') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeService'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 

IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeService') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeService'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 

IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeService') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Rad' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeService'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Rad' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 

IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeService') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeService'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeProduct') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeProduct'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 

IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeProduct') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeProduct'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 

IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeProduct') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Rad' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeProduct'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Rad' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 

IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeProduct') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanConsumeProduct'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'AnalysisResultMaster'
                 AND COLUMN_NAME = 'UploadDate') 
BEGIN
	ALTER TABLE dbo.AnalysisResultMaster
	ADD UploadDate DATETIME null

END
Go



UPDATE dbo.[User] SET Pass1='C78EFDBA452910967261226B8638D62F' WHERE Name='mehran'



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Reception' AND COLUMN_NAME = 'AnalysisServerVisitNum') 
BEGIN
	ALTER TABLE dbo.Reception
	ADD AnalysisServerVisitNum BIGINT NULL
    
END
Go

IF NOT EXISTS(SELECT * FROM ClinicSectionSetting WHERE SName='UseOnlinePrescriptionTest' AND SectionTypeId=(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting(SName, SectionTypeId,InputType)VALUES(N'UseOnlinePrescriptionTest',(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'),N'bool')
END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='Variables')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'Variables',18,(SELECT Id FROM dbo.SubSystem WHERE Name='BaseInfo'),'/PatientVariable/Form',N'Variables',1,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='BaseInfo'))
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Variables') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Variables'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Variables') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Variables'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Variables') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Variables'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Variables') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Variables'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'PatientVariables'
                 AND COLUMN_NAME = 'DoctorId') 
BEGIN
	ALTER TABLE PatientVariables
	ADD DoctorId uniqueidentifier null

	ALTER TABLE [dbo].[PatientVariables]  WITH CHECK ADD  CONSTRAINT [FK_PatientVariables_Doctor] FOREIGN KEY([DoctorId])
REFERENCES [dbo].[Doctor] ([GUID])


ALTER TABLE [dbo].[PatientVariables] CHECK CONSTRAINT [FK_PatientVariables_Doctor]


END
Go



UPDATE dbo.BaseInfoGeneral SET Name = 'FillBySecretery' WHERE Name = 'ShowInSecretery'

Go

UPDATE dbo.BaseInfoGeneral SET Name = 'FillByDoctorAndSecretery' WHERE Name = 'ShowInVisitAndSecretery'

Go

UPDATE dbo.BaseInfoGeneral SET Name = 'FillByDoctor' WHERE Name = 'ShowInVisit'

Go

UPDATE dbo.BaseInfoGeneral SET Name = 'Constant' WHERE Name = 'VariableValueIsConstant'

Go

UPDATE dbo.BaseInfoGeneral SET Name = 'Variable' WHERE Name = 'VariableValueIsVariable'

Go

IF NOT EXISTS(SELECT * FROM dbo.BaseInfoGeneral WHERE Name='Numerical' AND TypeId=(SELECT Id  FROM dbo.BaseInfoGeneralType WHERE EName='VariableType'))
BEGIN
 INSERT INTO dbo.BaseInfoGeneral(Name, TypeId)VALUES('Numerical',(SELECT Id  FROM dbo.BaseInfoGeneralType WHERE EName='VariableType'))
END
GO

IF NOT EXISTS(SELECT * FROM dbo.BaseInfoGeneral WHERE Name='CheckBox' AND TypeId=(SELECT Id  FROM dbo.BaseInfoGeneralType WHERE EName='VariableType'))
BEGIN
 INSERT INTO dbo.BaseInfoGeneral(Name, TypeId)VALUES('CheckBox',(SELECT Id  FROM dbo.BaseInfoGeneralType WHERE EName='VariableType'))
END
GO

IF NOT EXISTS(SELECT * FROM ClinicSectionSetting WHERE SName='AutoPay' AND SectionTypeId=(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting(SName, SectionTypeId,InputType)VALUES(N'AutoPay',(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'),N'bool')
END
GO


IF NOT EXISTS(SELECT * FROM ClinicSectionSetting WHERE SName='InvoiceNumAndPayerNameRequired' AND SectionTypeId=(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting(SName, SectionTypeId,InputType)VALUES(N'InvoiceNumAndPayerNameRequired',(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Lab'),N'bool')
END
GO

IF NOT EXISTS(SELECT * FROM ClinicSectionSetting WHERE SName='InvoiceNumAndPayerNameRequired' AND SectionTypeId=(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Hospital'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting(SName, SectionTypeId,InputType)VALUES(N'InvoiceNumAndPayerNameRequired',(SELECT Id  FROM dbo.BaseInfoGeneral WHERE Name='Hospital'),N'Hospital')
END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='AccessParentFund')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,ShowName,Active,Icon)VALUES(N'AccessParentFund',18,0,N'AccessParentFund',0,NULL)
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='AccessParentFund') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='AccessParentFund'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='AccessParentFund') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='AccessParentFund'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='AccessParentFund') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='AccessParentFund'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='AccessParentFund') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='AccessParentFund'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='AutoCompletePhoneNumber' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'AutoCompletePhoneNumber',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'),'bool')
END
GO

IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='VisitPrice' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'VisitPrice',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'),'int')
END
GO

IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='ReserveHasQueue' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'ReserveHasQueue',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'),'bool')
END
GO

IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='PatientPhoneNumberRequired' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'PatientPhoneNumberRequired',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'),'bool')
END
GO


IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='UseAnalysisInClinic' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'UseAnalysisInClinic',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'),'bool')
END
GO

IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='CurrencyTypeId' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'CurrencyTypeId',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'),'BaseInfo/GetAllCurrencies')
END
GO

IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='ShowMedicineForDiseaseInChiefComplain' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'))
BEGIN
 INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'ShowMedicineForDiseaseInChiefComplain',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'),'bool')
END
GO


IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'WholePurchasePrice') 
BEGIN

	ALTER TABLE dbo.PurchaseInvoiceDetails
	DROP COLUMN WholePurchasePrice;

END
GO




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Doctor' AND COLUMN_NAME = 'LogoAddress') 
BEGIN

	ALTER TABLE dbo.Doctor
	ADD LogoAddress nvarchar(500) null

END
Go


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Doctor' AND COLUMN_NAME = 'Explanation') 
BEGIN

	ALTER TABLE dbo.Doctor
	ADD Explanation nvarchar(max) null

END
Go



IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='OnlineAnalysisResult')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,ShowName,Active,Icon,Link)VALUES(N'OnlineAnalysisResult',19,0,N'OnlineAnalysisResult',1,'fa-file-text','/AnalysisResult/OnlineAnalysisResult')
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='OnlineAnalysisResult') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='OnlineAnalysisResult'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='OnlineAnalysisResult') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='OnlineAnalysisResult'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='OnlineAnalysisResult') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='OnlineAnalysisResult'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'PatientVariables'
                 AND COLUMN_NAME = 'VariableDisplayId') 
BEGIN
	ALTER TABLE PatientVariables
	ADD VariableDisplayId int null


END
GO

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'PatientVariables'
                 AND COLUMN_NAME = 'VariableStatusId') 
BEGIN
	ALTER TABLE PatientVariables
	ADD VariableStatusId int null


END
GO


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'PatientVariables'
                 AND COLUMN_NAME = 'Priority') 
BEGIN
	ALTER TABLE PatientVariables
	ADD [Priority] int null


END
Go


IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='SecretorCanWritePrescription')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,ShowName,Active)VALUES(N'SecretorCanWritePrescription',19,0,N'SecretorCanWritePrescription',0)
   END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SecretorCanWritePrescription') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SecretorCanWritePrescription'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SecretorCanWritePrescription') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SecretorCanWritePrescription'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 


IF EXISTS (SELECT * FROM dbo.BaseInfoGeneral WHERE Name = 'FillByDoctor')
   BEGIN
       UPDATE dbo.BaseInfoGeneral SET Name = 'Dont Show For Secretor' WHERE Name = 'FillByDoctor'
   END
GO 

IF EXISTS (SELECT * FROM dbo.BaseInfoGeneral WHERE Name = 'FillBySecretery')
   BEGIN
       UPDATE dbo.BaseInfoGeneral SET Name = 'Show For Secretor' WHERE Name = 'FillBySecretery'
   END
GO 

IF EXISTS (SELECT * FROM dbo.BaseInfoGeneral WHERE Name = 'FillByDoctorAndSecretery')
   BEGIN
       DELETE FROM dbo.BaseInfoGeneral WHERE Name = 'FillByDoctorAndSecretery'
   END
GO 

 

IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoice' AND COLUMN_NAME = 'CurrencyId') 
BEGIN

	ALTER TABLE dbo.PurchaseInvoice DROP CONSTRAINT [FK_PurchaseInvoice_BaseInfoGeneral];

	ALTER TABLE dbo.PurchaseInvoice DROP COLUMN CurrencyId;

END
Go




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'CurrencyId') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoiceDetails ADD CurrencyId int;
	ALTER TABLE dbo.PurchaseInvoiceDetails
	ADD CONSTRAINT FK_PurchaseInvoiceDetails_BaseInfoGeneral
	FOREIGN KEY (CurrencyId) REFERENCES dbo.BaseInfoGeneral(Id);
END
GO 




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Cost' AND COLUMN_NAME = 'PurchaseInvoiceId') 
BEGIN
	ALTER TABLE dbo.Cost ADD PurchaseInvoiceId UNIQUEIDENTIFIER;
	ALTER TABLE dbo.Cost
	ADD CONSTRAINT FK_Costs_PurchaseInvoiceId
	FOREIGN KEY (PurchaseInvoiceId) REFERENCES dbo.PurchaseInvoice(Guid);
END
GO 




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDiscount') 
BEGIN
	
CREATE TABLE [dbo].[PurchaseInvoiceDiscount](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[PurchaseInvoiceId] [UNIQUEIDENTIFIER] NULL,
	[Amount] [NUMERIC](20, 7) NULL,
	[CurrencyId] [INT] NULL,
	[Description] [NVARCHAR](MAX) NULL,
	[CreateUserId] [UNIQUEIDENTIFIER] NULL,
	[CreateDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
 CONSTRAINT [PK_PurchaseInvoiceDiscount] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

ALTER TABLE [dbo].[PurchaseInvoiceDiscount] ADD  CONSTRAINT [DF_PurchaseInvoiceDiscount_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[PurchaseInvoiceDiscount]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoiceDiscount_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[PurchaseInvoiceDiscount] CHECK CONSTRAINT [FK_PurchaseInvoiceDiscount_BaseInfoGeneral]

ALTER TABLE [dbo].[PurchaseInvoiceDiscount]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoiceDiscount_CreateUser] FOREIGN KEY([CreateUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[PurchaseInvoiceDiscount] CHECK CONSTRAINT [FK_PurchaseInvoiceDiscount_CreateUser]

ALTER TABLE [dbo].[PurchaseInvoiceDiscount]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoiceDiscount_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[PurchaseInvoiceDiscount] CHECK CONSTRAINT [FK_PurchaseInvoiceDiscount_ModifiedUser]

ALTER TABLE [dbo].[PurchaseInvoiceDiscount]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoiceDiscount_PurchaseInvoice] FOREIGN KEY([PurchaseInvoiceId])
REFERENCES [dbo].[PurchaseInvoice] ([Guid])

ALTER TABLE [dbo].[PurchaseInvoiceDiscount] CHECK CONSTRAINT [FK_PurchaseInvoiceDiscount_PurchaseInvoice]

END
GO





IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoice' AND COLUMN_NAME = 'Discount') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoice DROP COLUMN Discount;
END
Go


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'SellingCurrencyId') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoiceDetails ADD SellingCurrencyId int;
	ALTER TABLE dbo.PurchaseInvoiceDetails
	ADD CONSTRAINT FK_PurchaseInvoiceDetails_Sell_BaseInfoGeneral
	FOREIGN KEY (SellingCurrencyId) REFERENCES dbo.BaseInfoGeneral(Id);
END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'WholeSellPrice') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoiceDetails ADD WholeSellPrice numeric(20, 7);
END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'WholeSellCurrencyId') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoiceDetails ADD WholeSellCurrencyId int;
	ALTER TABLE dbo.PurchaseInvoiceDetails
	ADD CONSTRAINT FK_PurchaseInvoiceDetails_WholeSell_BaseInfoGeneral
	FOREIGN KEY (WholeSellCurrencyId) REFERENCES dbo.BaseInfoGeneral(Id);
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'MiddleSellPrice') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoiceDetails ADD MiddleSellPrice numeric(20, 7);
END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'MiddleSellCurrencyId') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoiceDetails ADD MiddleSellCurrencyId int;
	ALTER TABLE dbo.PurchaseInvoiceDetails
	ADD CONSTRAINT FK_PurchaseInvoiceDetails_MiddleSell_BaseInfoGeneral
	FOREIGN KEY (MiddleSellCurrencyId) REFERENCES dbo.BaseInfoGeneral(Id);
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'SellingFactorId') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoiceDetails ADD SellingFactorId UNIQUEIDENTIFIER;
	ALTER TABLE dbo.PurchaseInvoiceDetails
	ADD CONSTRAINT FK_PurchaseInvoiceDetails_Sell_MoneyConvert
	FOREIGN KEY (SellingFactorId) REFERENCES dbo.MoneyConvert(GUID);
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'WholeSellFactorId') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoiceDetails ADD WholeSellFactorId UNIQUEIDENTIFIER;
	ALTER TABLE dbo.PurchaseInvoiceDetails
	ADD CONSTRAINT FK_PurchaseInvoiceDetails_WholeSell_MoneyConvert
	FOREIGN KEY (WholeSellFactorId) REFERENCES dbo.MoneyConvert(GUID);
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'MiddleSellFactorId') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoiceDetails ADD MiddleSellFactorId UNIQUEIDENTIFIER;
	ALTER TABLE dbo.PurchaseInvoiceDetails
	ADD CONSTRAINT FK_PurchaseInvoiceDetails_MiddleSell_MoneyConvert
	FOREIGN KEY (MiddleSellFactorId) REFERENCES dbo.MoneyConvert(GUID);
END
GO 




IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'MoneyConvert' AND COLUMN_NAME = 'Amount') 
BEGIN
	ALTER TABLE dbo.MoneyConvert DROP COLUMN Amount;
END
GO



IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'Profit') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoiceDetails DROP COLUMN Profit;
END
GO


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'MoneyConvert' AND COLUMN_NAME = 'BaseAmount') 
BEGIN
	ALTER TABLE dbo.MoneyConvert ADD BaseAmount numeric(20, 7);
END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'MoneyConvert' AND COLUMN_NAME = 'DestAmount') 
BEGIN
	ALTER TABLE dbo.MoneyConvert ADD DestAmount numeric(20, 7);
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoice' AND COLUMN_NAME = 'TotalPrice') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoice ADD TotalPrice NVARCHAR(150);
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'BujNumber') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoiceDetails ADD BujNumber NVARCHAR(50);
END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'MoneyConvert' AND COLUMN_NAME = 'IsMain') 
BEGIN
	ALTER TABLE dbo.MoneyConvert ADD IsMain bit;
END
GO 

IF NOT EXISTS(SELECT [Name] FROM SubSystem WHERE  [Name] = 'PayService') 
BEGIN
	DECLARE @id int;
	SET @id = (SELECT Id FROM   SubSystem WHERE  [Name] = 'Reception')
	Insert into SubSystem(Name,Active,Parent,Priority,ShowName)values('PayService',0,@id,1,'PayService')
END
GO




IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PayService') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PayService'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PayService') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PayService'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PayService') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='View'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PayService'),(SELECT Id FROM dbo.Access WHERE Name='View'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PayService') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PayService'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 





IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PayVisit') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='View'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PayVisit'),(SELECT Id FROM dbo.Access WHERE Name='View'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='CanSendAnalysisToOtherClinicSection')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,ShowName,Active)VALUES(N'CanSendAnalysisToOtherClinicSection',19,0,N'CanSendAnalysisToOtherClinicSection',0)
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanSendAnalysisToOtherClinicSection') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='View'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanSendAnalysisToOtherClinicSection'),(SELECT Id FROM dbo.Access WHERE Name='View'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanSendAnalysisToOtherClinicSection') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanSendAnalysisToOtherClinicSection'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO 





IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoice' AND COLUMN_NAME = 'OldFactor') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoice ADD OldFactor bit;
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReturnPurchaseInvoice') 
BEGIN

CREATE TABLE [dbo].[ReturnPurchaseInvoice](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[InvoiceNum] [NVARCHAR](10) NULL,
	[InvoiceDate] [DATETIME] NULL,
	[SupplierId] [UNIQUEIDENTIFIER] NULL,
	[Description] [NVARCHAR](500) NULL,
	[CreatedUserId] [UNIQUEIDENTIFIER] NULL,
	[CreateDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
	[ClinicSectionId] [UNIQUEIDENTIFIER] NULL,
	[TotalPrice] [NVARCHAR](150) NULL,
	[OldFactor] [BIT] NULL,
 CONSTRAINT [PK_ReturnPurchase] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[ReturnPurchaseInvoice] ADD  CONSTRAINT [DF_ReturnPurchase_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[ReturnPurchaseInvoice]  WITH CHECK ADD  CONSTRAINT [FK_ReturnPurchaseInvoice_ClinicSection] FOREIGN KEY([ClinicSectionId])
REFERENCES [dbo].[ClinicSection] ([GUID])

ALTER TABLE [dbo].[ReturnPurchaseInvoice] CHECK CONSTRAINT [FK_ReturnPurchaseInvoice_ClinicSection]

ALTER TABLE [dbo].[ReturnPurchaseInvoice]  WITH CHECK ADD  CONSTRAINT [FK_ReturnPurchaseInvoice_CreateUser] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[ReturnPurchaseInvoice] CHECK CONSTRAINT [FK_ReturnPurchaseInvoice_CreateUser]

ALTER TABLE [dbo].[ReturnPurchaseInvoice]  WITH CHECK ADD  CONSTRAINT [FK_ReturnPurchaseInvoice_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[ReturnPurchaseInvoice] CHECK CONSTRAINT [FK_ReturnPurchaseInvoice_ModifiedUser]

ALTER TABLE [dbo].[ReturnPurchaseInvoice]  WITH CHECK ADD  CONSTRAINT [FK_ReturnPurchaseInvoice_Supplier] FOREIGN KEY([SupplierId])
REFERENCES [dbo].[Supplier] ([GUID])

ALTER TABLE [dbo].[ReturnPurchaseInvoice] CHECK CONSTRAINT [FK_ReturnPurchaseInvoice_Supplier]

END
GO




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReturnPurchaseInvoiceDetail') 
BEGIN
	
CREATE TABLE [dbo].[ReturnPurchaseInvoiceDetail](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[MasterId] [UNIQUEIDENTIFIER] NULL,
	[PurchaseInvoiceDetailId] [UNIQUEIDENTIFIER] NULL,
	[Num] [NUMERIC](20, 7) NULL,
	[FreeNum] [NUMERIC](20, 7) NULL,
	[Price] [NUMERIC](20, 7) NULL,
	[Discount] [NUMERIC](20, 7) NULL,
	[ReasonId] [UNIQUEIDENTIFIER] NULL,
	[CurrencyId] [INT] NULL,
	[CreatedUserId] [UNIQUEIDENTIFIER] NULL,
	[CreateDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
 CONSTRAINT [PK_ReturnPurchaseInvoiceDetail] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDetail] ADD  CONSTRAINT [DF_ReturnPurchaseInvoiceDetail_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_ReturnPurchaseInvoiceDetail_BaseInfo] FOREIGN KEY([ReasonId])
REFERENCES [dbo].[BaseInfo] ([GUID])

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDetail] CHECK CONSTRAINT [FK_ReturnPurchaseInvoiceDetail_BaseInfo]

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_ReturnPurchaseInvoiceDetail_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDetail] CHECK CONSTRAINT [FK_ReturnPurchaseInvoiceDetail_BaseInfoGeneral]

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_ReturnPurchaseInvoiceDetail_CreateUser] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDetail] CHECK CONSTRAINT [FK_ReturnPurchaseInvoiceDetail_CreateUser]

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_ReturnPurchaseInvoiceDetail_PurchaseInvoiceDetails] FOREIGN KEY([PurchaseInvoiceDetailId])
REFERENCES [dbo].[PurchaseInvoiceDetails] ([Guid])

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDetail] CHECK CONSTRAINT [FK_ReturnPurchaseInvoiceDetail_PurchaseInvoiceDetails]

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_ReturnPurchaseInvoiceDetail_ReturnPurchaseInvoice] FOREIGN KEY([MasterId])
REFERENCES [dbo].[ReturnPurchaseInvoice] ([Guid])

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDetail] CHECK CONSTRAINT [FK_ReturnPurchaseInvoiceDetail_ReturnPurchaseInvoice]

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_ReturnPurchaseInvoiceDetail_User] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDetail] CHECK CONSTRAINT [FK_ReturnPurchaseInvoiceDetail_User]

END
GO




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReturnPurchaseInvoiceDiscount') 
BEGIN
	
CREATE TABLE [dbo].[ReturnPurchaseInvoiceDiscount](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[ReturnPurchaseInvoiceId] [UNIQUEIDENTIFIER] NULL,
	[Amount] [NUMERIC](20, 7) NULL,
	[CurrencyId] [INT] NULL,
	[Description] [NVARCHAR](MAX) NULL,
	[CreateUserId] [UNIQUEIDENTIFIER] NULL,
	[CreateDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
 CONSTRAINT [PK_ReturnPurchaseInvoiceDiscount] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDiscount] ADD  CONSTRAINT [DF_ReturnPurchaseInvoiceDiscount_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDiscount]  WITH CHECK ADD  CONSTRAINT [FK_ReturnPurchaseInvoiceDiscount_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDiscount] CHECK CONSTRAINT [FK_ReturnPurchaseInvoiceDiscount_BaseInfoGeneral]

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDiscount]  WITH CHECK ADD  CONSTRAINT [FK_ReturnPurchaseInvoiceDiscount_CreateUser] FOREIGN KEY([CreateUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDiscount] CHECK CONSTRAINT [FK_ReturnPurchaseInvoiceDiscount_CreateUser]

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDiscount]  WITH CHECK ADD  CONSTRAINT [FK_ReturnPurchaseInvoiceDiscount_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDiscount] CHECK CONSTRAINT [FK_ReturnPurchaseInvoiceDiscount_ModifiedUser]

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDiscount]  WITH CHECK ADD  CONSTRAINT [FK_ReturnPurchaseInvoiceDiscount_ReturnPurchaseInvoiceDiscount] FOREIGN KEY([ReturnPurchaseInvoiceId])
REFERENCES [dbo].[ReturnPurchaseInvoice] ([Guid])

ALTER TABLE [dbo].[ReturnPurchaseInvoiceDiscount] CHECK CONSTRAINT [FK_ReturnPurchaseInvoiceDiscount_ReturnPurchaseInvoiceDiscount]

END
GO




IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoice')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId) VALUES (N'ReturnPurchaseInvoice',4,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'),N'/ReturnPurchaseInvoice/Form',N'ReturnPurchaseInvoice',1,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'))
   END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoice') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoice'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoiceDetails')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId) VALUES (N'ReturnPurchaseInvoiceDetails',5,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'),NULL,N'ReturnPurchaseInvoiceDetails',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'))
   END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoiceDetails') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoiceDetails'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoice'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoice'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoice'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoiceDetails') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoiceDetails'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoiceDetails') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoiceDetails'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoiceDetails') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReturnPurchaseInvoiceDetails'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'TransferDetail' AND COLUMN_NAME = 'SourcePurchaseInvoiceDetailId') 
BEGIN
	ALTER TABLE dbo.TransferDetail ADD SourcePurchaseInvoiceDetailId uniqueidentifier;
	ALTER TABLE dbo.TransferDetail
	ADD CONSTRAINT FK_TransferDetail_SourcePurchaseInvoiceDetail
	FOREIGN KEY (SourcePurchaseInvoiceDetailId) REFERENCES dbo.PurchaseInvoiceDetails(GUID);
END
GO 



IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='ReturnPurchaseInvoiceNumberStartFrom' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital'))
BEGIN
	INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'ReturnPurchaseInvoiceNumberStartFrom',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital'),NULL)
END
GO


IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='ReturnPurchaseInvoiceNumberStartFrom' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab'))
BEGIN
	INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'ReturnPurchaseInvoiceNumberStartFrom',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab'),NULL)
END
GO



IF NOT EXISTS(SELECT [EName] FROM BaseInfoType WHERE [EName] = 'Reason') 
BEGIN
	Insert into BaseInfoType([EName],[FName])values('Reason',N'دلیل')
END
GO



IF NOT EXISTS(SELECT BaseInfoTypeId FROM  BaseInfoSectionType WHERE  BaseInfoTypeId=(SELECT GUID FROM BaseInfoType WHERE [EName] = 'Reason')) 
BEGIN
	Insert into BaseInfoSectionType(BaseInfoTypeId,SectionTypeId)values((SELECT GUID FROM BaseInfoType WHERE [EName] = 'Reason'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
END
GO






IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Customer' AND COLUMN_NAME = 'CreateUserId') 
BEGIN
	ALTER TABLE dbo.Customer ADD CreateUserId uniqueidentifier;
	ALTER TABLE dbo.Customer
	ADD CONSTRAINT FK_Customer_CreateUser
	FOREIGN KEY (CreateUserId) REFERENCES dbo.[User](GUID);
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Customer' AND COLUMN_NAME = 'CreateDate') 
BEGIN
	ALTER TABLE dbo.Customer ADD CreateDate DATETIME;
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Customer' AND COLUMN_NAME = 'ModidiedUserId') 
BEGIN
	ALTER TABLE dbo.Customer ADD ModidiedUserId uniqueidentifier;
	ALTER TABLE dbo.Customer
	ADD CONSTRAINT FK_Customer_ModidiedUser
	FOREIGN KEY (ModidiedUserId) REFERENCES dbo.[User](GUID);
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Customer' AND COLUMN_NAME = 'ModifiedDate') 
BEGIN
	ALTER TABLE dbo.Customer ADD ModifiedDate DATETIME;
END
GO 



IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoice' AND COLUMN_NAME = 'SaleTypeId') 
BEGIN
	ALTER TABLE dbo.SaleInvoice DROP CONSTRAINT [FK_SaleInvoice_BaseInfoGeneral];
	ALTER TABLE dbo.SaleInvoice DROP COLUMN SaleTypeId;
END
Go



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoice' AND COLUMN_NAME = 'SalePriceTypeId') 
BEGIN
	ALTER TABLE dbo.SaleInvoice ADD SalePriceTypeId int;
	ALTER TABLE dbo.SaleInvoice
	ADD CONSTRAINT FK_SaleInvoice_BaseInfoGeneral
	FOREIGN KEY (SalePriceTypeId) REFERENCES dbo.[BaseInfoGeneral](Id);
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoice' AND COLUMN_NAME = 'TotalPrice') 
BEGIN
	ALTER TABLE dbo.SaleInvoice ADD TotalPrice nvarchar(150);
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoice' AND COLUMN_NAME = 'OldFactor') 
BEGIN
	ALTER TABLE dbo.SaleInvoice ADD OldFactor bit;
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoiceDetails' AND COLUMN_NAME = 'FreeNum') 
BEGIN
	ALTER TABLE dbo.SaleInvoiceDetails ADD FreeNum numeric(20, 7);
END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoiceDetails' AND COLUMN_NAME = 'Discount') 
BEGIN
	ALTER TABLE dbo.SaleInvoiceDetails ADD Discount numeric(20, 7);
END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoiceDetails' AND COLUMN_NAME = 'TransferDetailId') 
BEGIN
	ALTER TABLE dbo.SaleInvoiceDetails ADD TransferDetailId uniqueidentifier;
	ALTER TABLE dbo.SaleInvoiceDetails
	ADD CONSTRAINT FK_SaleInvoiceDetails_TransferDetail
	FOREIGN KEY (TransferDetailId) REFERENCES dbo.TransferDetail(Guid);
END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoiceDetails' AND COLUMN_NAME = 'CurrencyId') 
BEGIN
	ALTER TABLE dbo.SaleInvoiceDetails ADD CurrencyId int;
	ALTER TABLE dbo.SaleInvoiceDetails
	ADD CONSTRAINT FK_SaleInvoiceDetails_BaseInfoGeneral
	FOREIGN KEY (CurrencyId) REFERENCES dbo.[BaseInfoGeneral](Id);
END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoiceDetails' AND COLUMN_NAME = 'ProductId') 
BEGIN
	ALTER TABLE dbo.SaleInvoiceDetails ADD ProductId uniqueidentifier;
	ALTER TABLE dbo.SaleInvoiceDetails
	ADD CONSTRAINT FK_SaleInvoiceDetails_Product
	FOREIGN KEY (ProductId) REFERENCES dbo.Product(GUID);
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoiceDetails' AND COLUMN_NAME = 'BujNumber') 
BEGIN
	ALTER TABLE dbo.SaleInvoiceDetails ADD BujNumber nvarchar(50);
END
GO 




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoiceDiscount') 
BEGIN
	CREATE TABLE [dbo].[SaleInvoiceDiscount](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[SaleInvoiceId] [UNIQUEIDENTIFIER] NULL,
	[Amount] [NUMERIC](20, 7) NULL,
	[CurrencyId] [INT] NULL,
	[Description] [NVARCHAR](MAX) NULL,
	[CreateUserId] [UNIQUEIDENTIFIER] NULL,
	[CreateDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
 CONSTRAINT [PK_SaleInvoiceDiscount] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

ALTER TABLE [dbo].[SaleInvoiceDiscount] ADD  CONSTRAINT [DF_SaleInvoiceDiscount_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[SaleInvoiceDiscount]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoiceDiscount_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[SaleInvoiceDiscount] CHECK CONSTRAINT [FK_SaleInvoiceDiscount_BaseInfoGeneral]

ALTER TABLE [dbo].[SaleInvoiceDiscount]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoiceDiscount_CreateUser] FOREIGN KEY([CreateUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[SaleInvoiceDiscount] CHECK CONSTRAINT [FK_SaleInvoiceDiscount_CreateUser]

ALTER TABLE [dbo].[SaleInvoiceDiscount]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoiceDiscount_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[SaleInvoiceDiscount] CHECK CONSTRAINT [FK_SaleInvoiceDiscount_ModifiedUser]

ALTER TABLE [dbo].[SaleInvoiceDiscount]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoiceDiscount_SaleInvoice] FOREIGN KEY([SaleInvoiceId])
REFERENCES [dbo].[SaleInvoice] ([GUID])

ALTER TABLE [dbo].[SaleInvoiceDiscount] CHECK CONSTRAINT [FK_SaleInvoiceDiscount_SaleInvoice]

END
GO 




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoiceCost') 
BEGIN
CREATE TABLE [dbo].[SaleInvoiceCost](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[CostDate] [DATETIME] NULL,
	[Price] [NUMERIC](20, 7) NULL,
	[Explanation] [NVARCHAR](250) NULL,
	[CurrencyId] [INT] NULL,
	[ClinicSectionId] [UNIQUEIDENTIFIER] NULL,
	[SaleInvoiceId] [UNIQUEIDENTIFIER] NULL,
	[UserId] [UNIQUEIDENTIFIER] NULL,
 CONSTRAINT [PK_SaleInvoiceCost] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[SaleInvoiceCost] ADD  CONSTRAINT [DF_SaleInvoiceCost_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[SaleInvoiceCost]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoiceCost_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[SaleInvoiceCost] CHECK CONSTRAINT [FK_SaleInvoiceCost_BaseInfoGeneral]

ALTER TABLE [dbo].[SaleInvoiceCost]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoiceCost_ClinicSection] FOREIGN KEY([ClinicSectionId])
REFERENCES [dbo].[ClinicSection] ([GUID])

ALTER TABLE [dbo].[SaleInvoiceCost] CHECK CONSTRAINT [FK_SaleInvoiceCost_ClinicSection]

ALTER TABLE [dbo].[SaleInvoiceCost]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoiceCost_SaleInvoice] FOREIGN KEY([SaleInvoiceId])
REFERENCES [dbo].[SaleInvoice] ([GUID])

ALTER TABLE [dbo].[SaleInvoiceCost] CHECK CONSTRAINT [FK_SaleInvoiceCost_SaleInvoice]

ALTER TABLE [dbo].[SaleInvoiceCost]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoiceCost_User] FOREIGN KEY([UserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[SaleInvoiceCost] CHECK CONSTRAINT [FK_SaleInvoiceCost_User]

END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ProductBarcode') 
BEGIN
CREATE TABLE [dbo].[ProductBarcode](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[ProductId] [UNIQUEIDENTIFIER] NULL,
	[Barcode] [NVARCHAR](50) NULL,
	[CreateUserId] [UNIQUEIDENTIFIER] NULL,
	[CreateDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
 CONSTRAINT [PK_ProductBarcode] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[ProductBarcode] ADD  CONSTRAINT [DF_ProductBarcode_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[ProductBarcode]  WITH CHECK ADD  CONSTRAINT [FK_ProductBarcode_CreateUser] FOREIGN KEY([CreateUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[ProductBarcode] CHECK CONSTRAINT [FK_ProductBarcode_CreateUser]

ALTER TABLE [dbo].[ProductBarcode]  WITH CHECK ADD  CONSTRAINT [FK_ProductBarcode_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[ProductBarcode] CHECK CONSTRAINT [FK_ProductBarcode_ModifiedUser]

ALTER TABLE [dbo].[ProductBarcode]  WITH CHECK ADD  CONSTRAINT [FK_ProductBarcode_Product] FOREIGN KEY([ProductId])
REFERENCES [dbo].[Product] ([GUID])

ALTER TABLE [dbo].[ProductBarcode] CHECK CONSTRAINT [FK_ProductBarcode_Product]

END
GO 



UPDATE dbo.SubSystem SET Link=NULL WHERE Name='UserManagment'



IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='Users')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'Users',1,(SELECT Id FROM dbo.SubSystem WHERE Name='UserManagment'),'/UserManagment/Form',N'Users',1,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='UserManagment'))
   END
GO 

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Users') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Users'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Users') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Users'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Users') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Users'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
   GO

   
IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Users') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Print'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Users'),(SELECT Id FROM dbo.Access WHERE Name='Print'))
   END
   GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Users') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Users'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Users') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Users'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Users') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Main' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Users'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Main' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END

GO




IF EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='HumanResource')
BEGIN
	UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='UserManagment'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='UserManagment') WHERE Name='SubHumanResource'
	UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='UserManagment'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='UserManagment') WHERE Name='HumanResourceSalary'
	UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='UserManagment'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='UserManagment') WHERE Name='HumanResourceSalaryPayment'

	DELETE FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT id FROM dbo.SubSystem WHERE Name='HumanResource')

	DELETE FROM dbo.UserSubSystemAccess WHERE SubSystemAccessId IN (SELECT id FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT id FROM dbo.SubSystem WHERE Name='HumanResource'))

	DELETE FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT id FROM dbo.SubSystem WHERE Name='HumanResource')

	DELETE FROM dbo.SubSystem WHERE Name='HumanResource'
END
GO


UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='UserManagment'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='UserManagment') WHERE Name='SubDoctor'


IF EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='NewEmergencyReception')
BEGIN

	DELETE FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT id FROM dbo.SubSystem WHERE Name='NewEmergencyReception')

	DELETE FROM dbo.UserSubSystemAccess WHERE SubSystemAccessId IN (SELECT id FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT id FROM dbo.SubSystem WHERE Name='NewEmergencyReception'))

	DELETE FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT id FROM dbo.SubSystem WHERE Name='NewEmergencyReception')

	DELETE FROM dbo.SubSystem WHERE Name='NewEmergencyReception'
END
GO



UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='Reception'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='Reception'),Icon=NULL,Priority=8 WHERE Name='Patient'

UPDATE dbo.SubSystem SET Active=0 WHERE Name='LabSetting'

UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='Doctor'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='Doctor'),Priority=8 WHERE Name='Disease'

UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='Doctor'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='Doctor'),Priority=9 WHERE Name='Medicine'

UPDATE dbo.SubSystem SET ShowName='RoomManagement' WHERE Name='Room'

UPDATE dbo.SubSystem SET ShowName='Department' WHERE Name='RoomManagement'

UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='RoomManagement'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='RoomManagement'),Icon=NULL,Priority=3 WHERE Name='Children'

UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='RoomManagement'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='RoomManagement'),Icon=NULL,Priority=4 WHERE Name='HospitalPatient'




IF EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='Secretary')
BEGIN
	UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='Reception'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='Reception'),Priority=5 WHERE Name='Reserve'
	UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='Reception'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='Reception'),Priority=6 WHERE Name='TotalReserves'
	UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='Reception'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='Reception'),Priority=8 WHERE Name='PayVisit'
	UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='Reception'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='Reception'),Priority=8 WHERE Name='PayService'

	DELETE FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT id FROM dbo.SubSystem WHERE Name='Secretary')

	DELETE FROM dbo.UserSubSystemAccess WHERE SubSystemAccessId IN (SELECT id FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT id FROM dbo.SubSystem WHERE Name='Secretary'))

	DELETE FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT id FROM dbo.SubSystem WHERE Name='Secretary')

	DELETE FROM dbo.SubSystem WHERE Name='Secretary'
END
GO



IF EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='Surgery')
BEGIN
	UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='RoomManagement'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='RoomManagement'),Priority=2 WHERE Name='AllSurgeries'

	DELETE FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT id FROM dbo.SubSystem WHERE Name='Surgery')

	DELETE FROM dbo.UserSubSystemAccess WHERE SubSystemAccessId IN (SELECT id FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT id FROM dbo.SubSystem WHERE Name='Surgery'))

	DELETE FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT id FROM dbo.SubSystem WHERE Name='Surgery')

	DELETE FROM dbo.SubSystem WHERE Name='Surgery'
END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='ProductManagement')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'ProductManagement',15,0,NULL,N'ProductManagement',1,'fa fa-shopping-basket',NULL)
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
   GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO




IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='AccountManagement')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'AccountManagement',16,0,NULL,N'AccountManagement',1,'fa fa-money',NULL)
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='AccountManagement') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='AccountManagement'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
   GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='AccountManagement') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='AccountManagement'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='AccountManagement') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='AccountManagement'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO




UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='ProductManagement'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='ProductManagement'),Priority=1 WHERE Name='PurchaseInvoice'

UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='ProductManagement'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='ProductManagement'),Priority=1 WHERE Name='PurchaseInvoiceDetails'

UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='ProductManagement'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='ProductManagement'),Priority=3 WHERE Name='ReturnPurchaseInvoice'

UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='ProductManagement'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='ProductManagement'),Priority=3 WHERE Name='ReturnPurchaseInvoiceDetails'





IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='SaleInvoice')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'SaleInvoice',2,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),'/SaleInvoice/Form',N'SaleInvoice',1,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoice'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
 GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoice'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
 GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoice'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
 GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoice') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoice'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoice') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoice'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO





IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='SaleInvoiceDetails')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'SaleInvoiceDetails',2,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),NULL,N'SaleInvoiceDetails',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoiceDetails') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoiceDetails'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
 GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoiceDetails') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoiceDetails'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
 GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoiceDetails') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoiceDetails'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
 GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoiceDetails') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoiceDetails'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoiceDetails') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='SaleInvoiceDetails'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO



UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='AccountManagement'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='AccountManagement'),Priority=1 WHERE Name='Supplier'

UPDATE dbo.SubSystem SET Parent=(SELECT id FROM dbo.SubSystem WHERE Name='AccountManagement'),ParentRelationId=(SELECT id FROM dbo.SubSystem WHERE Name='AccountManagement'),Priority=3 WHERE Name='SupplierAccount'

UPDATE dbo.SubSystem SET Priority=2 WHERE Name='MaterialStoreroom'



IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='Customer')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'Customer',2,(SELECT Id FROM dbo.SubSystem WHERE Name='AccountManagement'),'/Customer/Form',N'Customer',1,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='AccountManagement'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Customer') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Customer'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
 GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Customer') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Customer'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
 GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Customer') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Customer'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
 GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Customer') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Customer'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Customer') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Customer'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Customer' AND COLUMN_NAME = 'ClinicSectionId') 
BEGIN
	ALTER TABLE dbo.Customer ADD ClinicSectionId uniqueidentifier;
	ALTER TABLE dbo.Customer
	ADD CONSTRAINT FK_Customer_ClinicSection
	FOREIGN KEY (ClinicSectionId) REFERENCES dbo.ClinicSection(GUID);
END
GO 





IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='ProductBarcode')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'ProductBarcode',9,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'),NULL,N'ProductBarcode',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ProductBarcode') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ProductBarcode'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
 GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ProductBarcode') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ProductBarcode'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
 GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ProductBarcode') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ProductBarcode'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
 GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ProductBarcode') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ProductBarcode'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ProductBarcode') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ProductBarcode'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO




BEGIN
DECLARE @SQL NVARCHAR(MAX) = N''
SELECT @SQL = @SQL + 'ALTER TABLE dbo.PurchaseInvoice DROP CONSTRAINT ' + i.name + ';' + CHAR(13) + CHAR(10)
FROM
sys.index_columns ic
LEFT JOIN sys.indexes i ON i.index_id = ic.index_id AND i.object_id = ic.object_id
LEFT JOIN sys.columns c ON c.column_id = ic.column_id AND c.object_id = ic.object_id
WHERE ic.object_id=OBJECT_ID('dbo.PurchaseInvoice') AND c.name='InvoiceNum' AND i.type=2
EXEC (@SQL)
END
GO

IF NOT EXISTS (SELECT name FROM sys.indexes WHERE object_id=OBJECT_ID('dbo.PurchaseInvoice') AND name='UQ_PurchaseInvoice_InvoiceNum_ClinicSectionId')
BEGIN
	ALTER TABLE dbo.PurchaseInvoice ADD CONSTRAINT UQ_PurchaseInvoice_InvoiceNum_ClinicSectionId UNIQUE (InvoiceNum,ClinicSectionId)
END
GO 




BEGIN
DECLARE @SQL NVARCHAR(MAX) = N''
SELECT @SQL = @SQL + 'ALTER TABLE dbo.SaleInvoice DROP CONSTRAINT ' + i.name + ';' + CHAR(13) + CHAR(10)
FROM
sys.index_columns ic
LEFT JOIN sys.indexes i ON i.index_id = ic.index_id AND i.object_id = ic.object_id
LEFT JOIN sys.columns c ON c.column_id = ic.column_id AND c.object_id = ic.object_id
WHERE ic.object_id=OBJECT_ID('dbo.SaleInvoice') AND c.name='InvoiceNum' AND i.type=2
EXEC (@SQL)
END
GO

IF NOT EXISTS (SELECT name FROM sys.indexes WHERE object_id=OBJECT_ID('dbo.ReturnPurchaseInvoice') AND name='UQ_ReturnPurchaseInvoice_InvoiceNum_ClinicSectionId')
BEGIN
	ALTER TABLE dbo.ReturnPurchaseInvoice ADD CONSTRAINT UQ_ReturnPurchaseInvoice_InvoiceNum_ClinicSectionId UNIQUE (InvoiceNum,ClinicSectionId)
END
GO





BEGIN
DECLARE @res NVARCHAR(MAX) = N''
SELECT @res = @res + 'ALTER TABLE dbo.SaleInvoice DROP CONSTRAINT ' + i.name + ';' + CHAR(13) + CHAR(10)
FROM
sys.index_columns ic
LEFT JOIN sys.indexes i ON i.index_id = ic.index_id AND i.object_id = ic.object_id
LEFT JOIN sys.columns c ON c.column_id = ic.column_id AND c.object_id = ic.object_id
WHERE ic.object_id=OBJECT_ID('dbo.SaleInvoice') AND c.name='InvoiceNum' AND i.type=2
EXEC (@res)
END
GO

IF NOT EXISTS(SELECT name FROM sys.indexes WHERE object_id=OBJECT_ID('dbo.SaleInvoice') AND name='UQ_SaleInvoice_InvoiceNum_ClinicSectionId')
BEGIN
	ALTER TABLE dbo.SaleInvoice ADD CONSTRAINT UQ_SaleInvoice_InvoiceNum_ClinicSectionId UNIQUE (InvoiceNum,ClinicSectionId)
END
GO 





IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Service' AND COLUMN_NAME = 'OperationTypeId') 
BEGIN
	ALTER TABLE dbo.Service ADD OperationTypeId uniqueidentifier;
	ALTER TABLE dbo.Service
	ADD CONSTRAINT FK_Service_BaseInfo
	FOREIGN KEY (OperationTypeId) REFERENCES dbo.BaseInfo(GUID);
END
GO 



IF NOT EXISTS(SELECT EName FROM   BaseInfoType WHERE  EName = 'OperationType') 
BEGIN
	Insert into BaseInfoType(EName,FName)values('OperationType',N'نوع عمل')
END
GO



IF NOT EXISTS(SELECT BaseInfoTypeId FROM  BaseInfoSectionType WHERE  BaseInfoTypeId=(SELECT GUID FROM BaseInfoType WHERE [EName] = 'OperationType')) 
BEGIN
	Insert into BaseInfoSectionType(BaseInfoTypeId,SectionTypeId)values((SELECT GUID FROM BaseInfoType WHERE [EName] = 'OperationType'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
END
GO



IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SurgeryService') 
BEGIN

	DROP TABLE dbo.SurgeryService
END
GO





IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='CanUseWholeSellPrice')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'CanUseWholeSellPrice',4,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),NULL,N'CanUseWholeSellPrice',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanUseWholeSellPrice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanUseWholeSellPrice'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
 GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanUseWholeSellPrice') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanUseWholeSellPrice'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO




IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='CanUseMiddleSellPrice')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'CanUseMiddleSellPrice',5,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),NULL,N'CanUseMiddleSellPrice',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanUseMiddleSellPrice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanUseMiddleSellPrice'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
 GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanUseMiddleSellPrice') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanUseMiddleSellPrice'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS(SELECT EName FROM   BaseInfoGeneralType WHERE  EName = 'SalePriceType') 
BEGIN
	Insert into BaseInfoGeneralType(EName,FName)values('SalePriceType',N'نوع قیمت فروش')
END
GO

IF NOT EXISTS(SELECT Name FROM   BaseInfoGeneral WHERE  Name = 'RetailPrice') 
BEGIN
	Insert into BaseInfoGeneral(Name,Priority,TypeId)values('RetailPrice',1,(SELECT Id FROM   BaseInfoGeneralType WHERE  EName = 'SalePriceType'))
END
GO

IF NOT EXISTS(SELECT Name FROM   BaseInfoGeneral WHERE  Name = 'MiddelPrice') 
BEGIN
	Insert into BaseInfoGeneral(Name,Priority,TypeId)values('MiddelPrice',2,(SELECT Id FROM   BaseInfoGeneralType WHERE  EName = 'SalePriceType'))
END
GO

IF NOT EXISTS(SELECT Name FROM   BaseInfoGeneral WHERE  Name = 'WholePrice') 
BEGIN
	Insert into BaseInfoGeneral(Name,Priority,TypeId)values('WholePrice',3,(SELECT Id FROM   BaseInfoGeneralType WHERE  EName = 'SalePriceType'))
END
GO




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReturnPurchaseInvoiceDetail' AND COLUMN_NAME = 'TransferDetailId') 
BEGIN
	ALTER TABLE dbo.ReturnPurchaseInvoiceDetail ADD TransferDetailId uniqueidentifier;
	ALTER TABLE dbo.ReturnPurchaseInvoiceDetail
	ADD CONSTRAINT FK_ReturnPurchaseInvoiceDetail_TransferDetail
	FOREIGN KEY (TransferDetailId) REFERENCES dbo.TransferDetail(Guid);
END
GO 



IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='YearStartFrom' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital'))
BEGIN
INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'YearStartFrom',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital'),'int')
END
GO


IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Pay' AND COLUMN_NAME = 'ExchangeAmount') 
BEGIN
	ALTER TABLE dbo.Pay DROP COLUMN ExchangeAmount;
END
GO


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Pay' AND COLUMN_NAME = 'BaseAmount') 
BEGIN
	ALTER TABLE dbo.Pay ADD BaseAmount NUMERIC(20,7);
END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Pay' AND COLUMN_NAME = 'DestAmount') 
BEGIN
	ALTER TABLE dbo.Pay ADD DestAmount NUMERIC(20,7);
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoicePay') 
BEGIN
CREATE TABLE [dbo].[PurchaseInvoicePay](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[InvoiceId] [UNIQUEIDENTIFIER] NULL,
	[PayId] [UNIQUEIDENTIFIER] NULL,
	[FullPay] [BIT] NULL,
 CONSTRAINT [PK_PurchaseInvoicePay] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[PurchaseInvoicePay] ADD  CONSTRAINT [DF_PurchaseInvoicePay_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[PurchaseInvoicePay]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoicePay_Pay] FOREIGN KEY([PayId])
REFERENCES [dbo].[Pay] ([Guid])

ALTER TABLE [dbo].[PurchaseInvoicePay] CHECK CONSTRAINT [FK_PurchaseInvoicePay_Pay]

ALTER TABLE [dbo].[PurchaseInvoicePay]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoicePay_PurchaseInvoice] FOREIGN KEY([InvoiceId])
REFERENCES [dbo].[PurchaseInvoice] ([Guid])

ALTER TABLE [dbo].[PurchaseInvoicePay] CHECK CONSTRAINT [FK_PurchaseInvoicePay_PurchaseInvoice]
END
Go


IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'InvoiceDetail') 
BEGIN
	DROP TABLE dbo.InvoiceDetail
END
Go


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'TransferDetail' AND COLUMN_NAME = 'PurchaseCurrencyId') 
BEGIN
	ALTER TABLE dbo.TransferDetail
	ADD PurchaseCurrencyId INT null
END
GO

IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'TransferDetail' AND COLUMN_NAME = 'SellingCurrencyId') 
BEGIN
	ALTER TABLE dbo.TransferDetail
	ADD SellingCurrencyId INT null
END
Go

IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoiceDetails' AND COLUMN_NAME = 'MoneyConvertId') 
BEGIN
	ALTER TABLE dbo.SaleInvoiceDetails
	ADD MoneyConvertId UNIQUEIDENTIFIER NULL
    
	
ALTER TABLE [dbo].[SaleInvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoiceDetails_MoneyConvert] FOREIGN KEY([MoneyConvertId])
REFERENCES [dbo].[MoneyConvert] ([GUID])


ALTER TABLE [dbo].[SaleInvoiceDetails] CHECK CONSTRAINT [FK_SaleInvoiceDetails_MoneyConvert]


END
Go

IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Cost' AND COLUMN_NAME = 'SaleInvoiceId') 
BEGIN
	ALTER TABLE Cost
	ADD SaleInvoiceId UNIQUEIDENTIFIER NULL
    
	
ALTER TABLE [dbo].[Cost]  WITH CHECK ADD  CONSTRAINT [FK_Cost_SaleInvoice] FOREIGN KEY([SaleInvoiceId])
REFERENCES [dbo].[SaleInvoice] ([GUID])


ALTER TABLE [dbo].[Cost] CHECK CONSTRAINT [FK_Cost_SaleInvoice]


END
Go




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Damage') 
BEGIN
CREATE TABLE [dbo].[Damage](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[InvoiceNum] [NVARCHAR](10) NULL,
	[InvoiceDate] [DATETIME] NULL,
	[Description] [NVARCHAR](500) NULL,
	[ClinicSectionId] [UNIQUEIDENTIFIER] NULL,
	[TotalPrice] [NVARCHAR](150) NULL,
	[CostTypeId] [UNIQUEIDENTIFIER] NULL,
	[ReasonId] [UNIQUEIDENTIFIER] NULL,
	[CreatedUserId] [UNIQUEIDENTIFIER] NULL,
	[CreateDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
 CONSTRAINT [PK_Damage] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[Damage] ADD  CONSTRAINT [DF_Damage_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[Damage]  WITH CHECK ADD  CONSTRAINT [FK_Damage_ClinicSection] FOREIGN KEY([ClinicSectionId])
REFERENCES [dbo].[ClinicSection] ([GUID])

ALTER TABLE [dbo].[Damage] CHECK CONSTRAINT [FK_Damage_ClinicSection]

ALTER TABLE [dbo].[Damage]  WITH CHECK ADD  CONSTRAINT [FK_Damage_CostTypeBaseInfo] FOREIGN KEY([CostTypeId])
REFERENCES [dbo].[BaseInfo] ([GUID])

ALTER TABLE [dbo].[Damage] CHECK CONSTRAINT [FK_Damage_CostTypeBaseInfo]

ALTER TABLE [dbo].[Damage]  WITH CHECK ADD  CONSTRAINT [FK_Damage_CreateUser] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[Damage] CHECK CONSTRAINT [FK_Damage_CreateUser]

ALTER TABLE [dbo].[Damage]  WITH CHECK ADD  CONSTRAINT [FK_Damage_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[Damage] CHECK CONSTRAINT [FK_Damage_ModifiedUser]

ALTER TABLE [dbo].[Damage]  WITH CHECK ADD  CONSTRAINT [FK_Damage_ReasonBaseInfo] FOREIGN KEY([ReasonId])
REFERENCES [dbo].[BaseInfo] ([GUID])

ALTER TABLE [dbo].[Damage] CHECK CONSTRAINT [FK_Damage_ReasonBaseInfo]
END
GO




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'DamageDetails') 
BEGIN
CREATE TABLE [dbo].[DamageDetails](
	[Guid] [uniqueidentifier] NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MasterId] [uniqueidentifier] NULL,
	[PurchaseInvoiceDetailId] [uniqueidentifier] NULL,
	[TransferDetailId] [uniqueidentifier] NULL,
	[ProductId] [uniqueidentifier] NULL,
	[Num] [numeric](20, 7) NULL,
	[FreeNum] [numeric](20, 7) NULL,
	[Price] [numeric](20, 7) NULL,
	[Discount] [numeric](20, 7) NULL,
	[CurrencyId] [int] NULL,
	[CreatedUserId] [uniqueidentifier] NULL,
	[CreateDate] [datetime] NULL,
	[ModifiedUserId] [uniqueidentifier] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_DamageDetails] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[DamageDetails] ADD  CONSTRAINT [DF_DamageDetails_Guid]  DEFAULT (newsequentialid()) FOR [Guid]

ALTER TABLE [dbo].[DamageDetails]  WITH CHECK ADD  CONSTRAINT [FK_DamageDetails_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[DamageDetails] CHECK CONSTRAINT [FK_DamageDetails_BaseInfoGeneral]

ALTER TABLE [dbo].[DamageDetails]  WITH CHECK ADD  CONSTRAINT [FK_DamageDetails_CreateUser] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[DamageDetails] CHECK CONSTRAINT [FK_DamageDetails_CreateUser]

ALTER TABLE [dbo].[DamageDetails]  WITH CHECK ADD  CONSTRAINT [FK_DamageDetails_Damage] FOREIGN KEY([MasterId])
REFERENCES [dbo].[Damage] ([Guid])

ALTER TABLE [dbo].[DamageDetails] CHECK CONSTRAINT [FK_DamageDetails_Damage]

ALTER TABLE [dbo].[DamageDetails]  WITH CHECK ADD  CONSTRAINT [FK_DamageDetails_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[DamageDetails] CHECK CONSTRAINT [FK_DamageDetails_ModifiedUser]

ALTER TABLE [dbo].[DamageDetails]  WITH CHECK ADD  CONSTRAINT [FK_DamageDetails_Product] FOREIGN KEY([ProductId])
REFERENCES [dbo].[Product] ([GUID])

ALTER TABLE [dbo].[DamageDetails] CHECK CONSTRAINT [FK_DamageDetails_Product]

ALTER TABLE [dbo].[DamageDetails]  WITH CHECK ADD  CONSTRAINT [FK_DamageDetails_PurchaseInvoiceDetails] FOREIGN KEY([PurchaseInvoiceDetailId])
REFERENCES [dbo].[PurchaseInvoiceDetails] ([Guid])

ALTER TABLE [dbo].[DamageDetails] CHECK CONSTRAINT [FK_DamageDetails_PurchaseInvoiceDetails]

ALTER TABLE [dbo].[DamageDetails]  WITH CHECK ADD  CONSTRAINT [FK_DamageDetails_TransferDetail] FOREIGN KEY([TransferDetailId])
REFERENCES [dbo].[TransferDetail] ([Guid])

ALTER TABLE [dbo].[DamageDetails] CHECK CONSTRAINT [FK_DamageDetails_TransferDetail]
END
GO




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'DamageDiscount') 
BEGIN
CREATE TABLE [dbo].[DamageDiscount](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[DamageId] [UNIQUEIDENTIFIER] NULL,
	[Amount] [NUMERIC](20, 7) NULL,
	[CurrencyId] [INT] NULL,
	[Description] [NVARCHAR](MAX) NULL,
	[CreateUserId] [UNIQUEIDENTIFIER] NULL,
	[CreateDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
 CONSTRAINT [PK_DamageDiscount] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

ALTER TABLE [dbo].[DamageDiscount] ADD  CONSTRAINT [DF_DamageDiscount_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[DamageDiscount]  WITH CHECK ADD  CONSTRAINT [FK_DamageDiscount_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[DamageDiscount] CHECK CONSTRAINT [FK_DamageDiscount_BaseInfoGeneral]

ALTER TABLE [dbo].[DamageDiscount]  WITH CHECK ADD  CONSTRAINT [FK_DamageDiscount_CreateUser] FOREIGN KEY([CreateUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[DamageDiscount] CHECK CONSTRAINT [FK_DamageDiscount_CreateUser]

ALTER TABLE [dbo].[DamageDiscount]  WITH CHECK ADD  CONSTRAINT [FK_DamageDiscount_Damage] FOREIGN KEY([DamageId])
REFERENCES [dbo].[Damage] ([Guid])

ALTER TABLE [dbo].[DamageDiscount] CHECK CONSTRAINT [FK_DamageDiscount_Damage]

ALTER TABLE [dbo].[DamageDiscount]  WITH CHECK ADD  CONSTRAINT [FK_DamageDiscount_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[DamageDiscount] CHECK CONSTRAINT [FK_DamageDiscount_ModifiedUser]
END
GO




IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='DamageNumberStartFrom' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital'))
BEGIN
	INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'DamageNumberStartFrom',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital'),NULL)
END





IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='Damage')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId) VALUES (N'Damage',6,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),N'/Damage/Form',N'Damage',1,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Damage') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Damage'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='DamageDetails')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId) VALUES (N'DamageDetails',6,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),NULL,N'DamageDetails',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='DamageDetails') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='DamageDetails'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Damage') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Damage'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Damage') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Damage'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Damage') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Damage'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='DamageDetails') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='DamageDetails'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='DamageDetails') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='DamageDetails'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='DamageDetails') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='DamageDetails'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReturnSaleInvoice') 
BEGIN
CREATE TABLE [dbo].[ReturnSaleInvoice](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[InvoiceNum] [NVARCHAR](10) NULL,
	[InvoiceDate] [DATETIME] NULL,
	[CustomerId] [UNIQUEIDENTIFIER] NULL,
	[Description] [NVARCHAR](500) NULL,
	[CreatedUserId] [UNIQUEIDENTIFIER] NULL,
	[CreateDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
	[ClinicSectionId] [UNIQUEIDENTIFIER] NULL,
	[TotalPrice] [NVARCHAR](150) NULL,
	[OldFactor] [BIT] NULL,
 CONSTRAINT [PK_ReturnSaleInvoice] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[ReturnSaleInvoice] ADD  CONSTRAINT [DF_ReturnSaleInvoice_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[ReturnSaleInvoice]  WITH CHECK ADD  CONSTRAINT [FK_ReturnSaleInvoice_ClinicSection] FOREIGN KEY([ClinicSectionId])
REFERENCES [dbo].[ClinicSection] ([GUID])

ALTER TABLE [dbo].[ReturnSaleInvoice] CHECK CONSTRAINT [FK_ReturnSaleInvoice_ClinicSection]

ALTER TABLE [dbo].[ReturnSaleInvoice]  WITH CHECK ADD  CONSTRAINT [FK_ReturnSaleInvoice_CreateUser] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[ReturnSaleInvoice] CHECK CONSTRAINT [FK_ReturnSaleInvoice_CreateUser]

ALTER TABLE [dbo].[ReturnSaleInvoice]  WITH CHECK ADD  CONSTRAINT [FK_ReturnSaleInvoice_Customer] FOREIGN KEY([CustomerId])
REFERENCES [dbo].[Customer] ([GUID])

ALTER TABLE [dbo].[ReturnSaleInvoice] CHECK CONSTRAINT [FK_ReturnSaleInvoice_Customer]

ALTER TABLE [dbo].[ReturnSaleInvoice]  WITH CHECK ADD  CONSTRAINT [FK_ReturnSaleInvoice_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[ReturnSaleInvoice] CHECK CONSTRAINT [FK_ReturnSaleInvoice_ModifiedUser]

END
GO



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReturnSaleInvoiceDetail') 
BEGIN
CREATE TABLE [dbo].[ReturnSaleInvoiceDetail](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[MasterId] [UNIQUEIDENTIFIER] NULL,
	[SaleInvoiceDetailId] [UNIQUEIDENTIFIER] NULL,
	[Num] [NUMERIC](20, 7) NULL,
	[FreeNum] [NUMERIC](20, 7) NULL,
	[Price] [NUMERIC](20, 7) NULL,
	[Discount] [NUMERIC](20, 7) NULL,
	[ReasonId] [UNIQUEIDENTIFIER] NULL,
	[CurrencyId] [INT] NULL,
	[CreatedUserId] [UNIQUEIDENTIFIER] NULL,
	[CreateDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
 CONSTRAINT [PK_ReturnSaleInvoiceDetail] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[ReturnSaleInvoiceDetail] ADD  CONSTRAINT [DF_ReturnSaleInvoiceDetail_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[ReturnSaleInvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_ReturnSaleInvoiceDetail_BaseInfo] FOREIGN KEY([ReasonId])
REFERENCES [dbo].[BaseInfo] ([GUID])

ALTER TABLE [dbo].[ReturnSaleInvoiceDetail] CHECK CONSTRAINT [FK_ReturnSaleInvoiceDetail_BaseInfo]

ALTER TABLE [dbo].[ReturnSaleInvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_ReturnSaleInvoiceDetail_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[ReturnSaleInvoiceDetail] CHECK CONSTRAINT [FK_ReturnSaleInvoiceDetail_BaseInfoGeneral]

ALTER TABLE [dbo].[ReturnSaleInvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_ReturnSaleInvoiceDetail_CreateUser] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[ReturnSaleInvoiceDetail] CHECK CONSTRAINT [FK_ReturnSaleInvoiceDetail_CreateUser]

ALTER TABLE [dbo].[ReturnSaleInvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_ReturnSaleInvoiceDetail_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[ReturnSaleInvoiceDetail] CHECK CONSTRAINT [FK_ReturnSaleInvoiceDetail_ModifiedUser]

ALTER TABLE [dbo].[ReturnSaleInvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_ReturnSaleInvoiceDetail_ReturnSaleInvoice] FOREIGN KEY([MasterId])
REFERENCES [dbo].[ReturnSaleInvoice] ([Guid])

ALTER TABLE [dbo].[ReturnSaleInvoiceDetail] CHECK CONSTRAINT [FK_ReturnSaleInvoiceDetail_ReturnSaleInvoice]

ALTER TABLE [dbo].[ReturnSaleInvoiceDetail]  WITH CHECK ADD  CONSTRAINT [FK_ReturnSaleInvoiceDetail_SaleInvoiceDetails] FOREIGN KEY([SaleInvoiceDetailId])
REFERENCES [dbo].[SaleInvoiceDetails] ([GUID])

ALTER TABLE [dbo].[ReturnSaleInvoiceDetail] CHECK CONSTRAINT [FK_ReturnSaleInvoiceDetail_SaleInvoiceDetails]

END
GO



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReturnSaleInvoiceDiscount') 
BEGIN
CREATE TABLE [dbo].[ReturnSaleInvoiceDiscount](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[ReturnSaleInvoiceId] [UNIQUEIDENTIFIER] NULL,
	[Amount] [NUMERIC](20, 7) NULL,
	[CurrencyId] [INT] NULL,
	[Description] [NVARCHAR](MAX) NULL,
	[CreateUserId] [UNIQUEIDENTIFIER] NULL,
	[CreateDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
 CONSTRAINT [PK_ReturnSaleInvoiceDiscount] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

ALTER TABLE [dbo].[ReturnSaleInvoiceDiscount] ADD  CONSTRAINT [DF_ReturnSaleInvoiceDiscount_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[ReturnSaleInvoiceDiscount]  WITH CHECK ADD  CONSTRAINT [FK_ReturnSaleInvoiceDiscount_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[ReturnSaleInvoiceDiscount] CHECK CONSTRAINT [FK_ReturnSaleInvoiceDiscount_BaseInfoGeneral]

ALTER TABLE [dbo].[ReturnSaleInvoiceDiscount]  WITH CHECK ADD  CONSTRAINT [FK_ReturnSaleInvoiceDiscount_CreateUser] FOREIGN KEY([CreateUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[ReturnSaleInvoiceDiscount] CHECK CONSTRAINT [FK_ReturnSaleInvoiceDiscount_CreateUser]

ALTER TABLE [dbo].[ReturnSaleInvoiceDiscount]  WITH CHECK ADD  CONSTRAINT [FK_ReturnSaleInvoiceDiscount_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[ReturnSaleInvoiceDiscount] CHECK CONSTRAINT [FK_ReturnSaleInvoiceDiscount_ModifiedUser]

ALTER TABLE [dbo].[ReturnSaleInvoiceDiscount]  WITH CHECK ADD  CONSTRAINT [FK_ReturnSaleInvoiceDiscount_ReturnSaleInvoice] FOREIGN KEY([ReturnSaleInvoiceId])
REFERENCES [dbo].[ReturnSaleInvoice] ([Guid])

ALTER TABLE [dbo].[ReturnSaleInvoiceDiscount] CHECK CONSTRAINT [FK_ReturnSaleInvoiceDiscount_ReturnSaleInvoice]

END
GO



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Receive') 
BEGIN
CREATE TABLE [dbo].[Receive](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[CustomerId] [UNIQUEIDENTIFIER] NULL,
	[ReceiveDate] [DATETIME] NULL,
	[Description] [NVARCHAR](500) NULL,
	[CreatedUserId] [UNIQUEIDENTIFIER] NULL,
	[CreatedDate] [DATETIME] NULL,
	[ModifiedUserId] [UNIQUEIDENTIFIER] NULL,
	[ModifiedDate] [DATETIME] NULL,
	[ClinicSectionId] [UNIQUEIDENTIFIER] NULL,
 CONSTRAINT [PK_Receive] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[Receive] ADD  CONSTRAINT [DF_Receive_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[Receive]  WITH CHECK ADD  CONSTRAINT [FK_Receive_ClinicSection] FOREIGN KEY([ClinicSectionId])
REFERENCES [dbo].[ClinicSection] ([GUID])

ALTER TABLE [dbo].[Receive] CHECK CONSTRAINT [FK_Receive_ClinicSection]

ALTER TABLE [dbo].[Receive]  WITH CHECK ADD  CONSTRAINT [FK_Receive_CreateUser] FOREIGN KEY([CreatedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[Receive] CHECK CONSTRAINT [FK_Receive_CreateUser]

ALTER TABLE [dbo].[Receive]  WITH CHECK ADD  CONSTRAINT [FK_Receive_Customer] FOREIGN KEY([CustomerId])
REFERENCES [dbo].[Customer] ([GUID])

ALTER TABLE [dbo].[Receive] CHECK CONSTRAINT [FK_Receive_Customer]

ALTER TABLE [dbo].[Receive]  WITH CHECK ADD  CONSTRAINT [FK_Receive_ModifiedUser] FOREIGN KEY([ModifiedUserId])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[Receive] CHECK CONSTRAINT [FK_Receive_ModifiedUser]

END
GO



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceiveAmount') 
BEGIN
CREATE TABLE [dbo].[ReceiveAmount](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[ReceiveId] [UNIQUEIDENTIFIER] NOT NULL,
	[Amount] [NUMERIC](20, 7) NULL,
	[Discount] [NUMERIC](20, 7) NULL,
	[BaseCurrencyId] [INT] NULL,
	[CurrencyId] [INT] NULL,
	[BaseAmount] [NUMERIC](20, 7) NULL,
	[DestAmount] [NUMERIC](20, 7) NULL,
 CONSTRAINT [PK_ReceiveAmount] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[ReceiveAmount] ADD  CONSTRAINT [DF_ReceiveAmount_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[ReceiveAmount]  WITH CHECK ADD  CONSTRAINT [FK_ReceiveAmount_Base_BaseInfoGeneral] FOREIGN KEY([BaseCurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[ReceiveAmount] CHECK CONSTRAINT [FK_ReceiveAmount_Base_BaseInfoGeneral]

ALTER TABLE [dbo].[ReceiveAmount]  WITH CHECK ADD  CONSTRAINT [FK_ReceiveAmount_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[ReceiveAmount] CHECK CONSTRAINT [FK_ReceiveAmount_BaseInfoGeneral]

ALTER TABLE [dbo].[ReceiveAmount]  WITH CHECK ADD  CONSTRAINT [FK_ReceiveAmount_Receive] FOREIGN KEY([ReceiveId])
REFERENCES [dbo].[Receive] ([Guid])

ALTER TABLE [dbo].[ReceiveAmount] CHECK CONSTRAINT [FK_ReceiveAmount_Receive]

END
GO



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoiceReceive') 
BEGIN
CREATE TABLE [dbo].[SaleInvoiceReceive](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[InvoiceId] [UNIQUEIDENTIFIER] NULL,
	[ReceiveId] [UNIQUEIDENTIFIER] NULL,
	[FullPay] [BIT] NULL,
 CONSTRAINT [PK_SaleInvoiceReceive] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[SaleInvoiceReceive] ADD  CONSTRAINT [DF_SaleInvoiceReceive_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[SaleInvoiceReceive]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoiceReceive_Receive] FOREIGN KEY([ReceiveId])
REFERENCES [dbo].[Receive] ([Guid])

ALTER TABLE [dbo].[SaleInvoiceReceive] CHECK CONSTRAINT [FK_SaleInvoiceReceive_Receive]

ALTER TABLE [dbo].[SaleInvoiceReceive]  WITH CHECK ADD  CONSTRAINT [FK_SaleInvoiceReceive_SaleInvoice] FOREIGN KEY([InvoiceId])
REFERENCES [dbo].[SaleInvoice] ([GUID])

ALTER TABLE [dbo].[SaleInvoiceReceive] CHECK CONSTRAINT [FK_SaleInvoiceReceive_SaleInvoice]

END
GO



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReturnSaleInvoiceReceive') 
BEGIN
CREATE TABLE [dbo].[ReturnSaleInvoiceReceive](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[InvoiceId] [UNIQUEIDENTIFIER] NULL,
	[ReceiveId] [UNIQUEIDENTIFIER] NULL,
	[FullPay] [BIT] NULL,
 CONSTRAINT [PK_ReturnSaleInvoiceReceive] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[ReturnSaleInvoiceReceive] ADD  CONSTRAINT [DF_ReturnSaleInvoiceReceive_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[ReturnSaleInvoiceReceive]  WITH CHECK ADD  CONSTRAINT [FK_ReturnSaleInvoiceReceive_Receive] FOREIGN KEY([ReceiveId])
REFERENCES [dbo].[Receive] ([Guid])

ALTER TABLE [dbo].[ReturnSaleInvoiceReceive] CHECK CONSTRAINT [FK_ReturnSaleInvoiceReceive_Receive]

ALTER TABLE [dbo].[ReturnSaleInvoiceReceive]  WITH CHECK ADD  CONSTRAINT [FK_ReturnSaleInvoiceReceive_ReturnSaleInvoice] FOREIGN KEY([InvoiceId])
REFERENCES [dbo].[ReturnSaleInvoice] ([Guid])

ALTER TABLE [dbo].[ReturnSaleInvoiceReceive] CHECK CONSTRAINT [FK_ReturnSaleInvoiceReceive_ReturnSaleInvoice]

END
GO






IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='ReturnSaleInvoiceNumberStartFrom' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital'))
BEGIN
	INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'ReturnSaleInvoiceNumberStartFrom',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital'),NULL)
END




IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='ReturnSaleInvoice')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId) VALUES (N'ReturnSaleInvoice',5,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),N'/ReturnSaleInvoice/Form',N'ReturnSaleInvoice',1,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReturnSaleInvoice') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReturnSaleInvoice'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReturnSaleInvoice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReturnSaleInvoice'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReturnSaleInvoice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReturnSaleInvoice'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReturnSaleInvoice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReturnSaleInvoice'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO




IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='ReturnSaleInvoiceDetails')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId) VALUES (N'ReturnSaleInvoiceDetails',5,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),NULL,N'ReturnSaleInvoiceDetails',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReturnSaleInvoiceDetails') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReturnSaleInvoiceDetails'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReturnSaleInvoiceDetails') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReturnSaleInvoiceDetails'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReturnSaleInvoiceDetails') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReturnSaleInvoiceDetails'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReturnSaleInvoiceDetails') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReturnSaleInvoiceDetails'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO




IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='Receive')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId) VALUES (N'Receive',3,0,NULL,N'Receive',0,NULL,NULL)
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Receive') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Receive'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Receive') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Receive'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Receive') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Receive'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Receive') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Receive'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='CustomerAccount')
   BEGIN
       INSERT INTO dbo.SubSystem ( Name, Priority, Parent,  Link, ShowName, Active, Icon,ParentRelationId ) VALUES ( N'CustomerAccount', 3, (SELECT Id FROM dbo.SubSystem WHERE Name='AccountManagement'), N'/CustomerAccount/Form', N'CustomerAccount', 1, NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='AccountManagement') )
   END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CustomerAccount') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CustomerAccount'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


   IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CustomerAccount') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CustomerAccount'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO


   IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CustomerAccount') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CustomerAccount'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO


   IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CustomerAccount') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CustomerAccount'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO


   IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CustomerAccount') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Print'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CustomerAccount'),(SELECT Id FROM dbo.Access WHERE Name='Print'))
   END
GO



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoiceDetails' AND COLUMN_NAME = 'RemainingNum') 
BEGIN

	ALTER TABLE dbo.SaleInvoiceDetails ADD RemainingNum numeric(20, 2) NULL;
	
END
GO 




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReturnPurchaseInvoicePay') 
BEGIN
CREATE TABLE [dbo].[ReturnPurchaseInvoicePay](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[InvoiceId] [UNIQUEIDENTIFIER] NULL,
	[PayId] [UNIQUEIDENTIFIER] NULL,
	[FullPay] [BIT] NULL,
 CONSTRAINT [PK_ReturnPurchaseInvoicePay] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[ReturnPurchaseInvoicePay] ADD  CONSTRAINT [DF_ReturnPurchaseInvoicePay_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[ReturnPurchaseInvoicePay]  WITH CHECK ADD  CONSTRAINT [FK_ReturnPurchaseInvoicePay_Pay] FOREIGN KEY([PayId])
REFERENCES [dbo].[Pay] ([Guid])

ALTER TABLE [dbo].[ReturnPurchaseInvoicePay] CHECK CONSTRAINT [FK_ReturnPurchaseInvoicePay_Pay]

ALTER TABLE [dbo].[ReturnPurchaseInvoicePay]  WITH CHECK ADD  CONSTRAINT [FK_ReturnPurchaseInvoicePay_ReturnPurchaseInvoice] FOREIGN KEY([InvoiceId])
REFERENCES [dbo].[ReturnPurchaseInvoice] ([Guid])

ALTER TABLE [dbo].[ReturnPurchaseInvoicePay] CHECK CONSTRAINT [FK_ReturnPurchaseInvoicePay_ReturnPurchaseInvoice]

END
GO






IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PayAmount') 
BEGIN
CREATE TABLE [dbo].[PayAmount](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[PayId] [UNIQUEIDENTIFIER] NOT NULL,
	[Amount] [NUMERIC](20, 7) NULL,
	[Discount] [NUMERIC](20, 7) NULL,
	[BaseCurrencyId] [INT] NULL,
	[CurrencyId] [INT] NULL,
	[BaseAmount] [NUMERIC](20, 7) NULL,
	[DestAmount] [NUMERIC](20, 7) NULL,
 CONSTRAINT [PK_PayAmount] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[PayAmount] ADD  CONSTRAINT [DF_PayAmount_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[PayAmount]  WITH CHECK ADD  CONSTRAINT [FK_PayAmount_Base_BaseInfoGeneral] FOREIGN KEY([BaseCurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[PayAmount] CHECK CONSTRAINT [FK_PayAmount_Base_BaseInfoGeneral]

ALTER TABLE [dbo].[PayAmount]  WITH CHECK ADD  CONSTRAINT [FK_PayAmount_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[PayAmount] CHECK CONSTRAINT [FK_PayAmount_BaseInfoGeneral]

ALTER TABLE [dbo].[PayAmount]  WITH CHECK ADD  CONSTRAINT [FK_PayAmount_Pay] FOREIGN KEY([PayId])
REFERENCES [dbo].[Pay] ([Guid])

ALTER TABLE [dbo].[PayAmount] CHECK CONSTRAINT [FK_PayAmount_Pay]

END
GO





IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Pay' AND COLUMN_NAME = 'Amount') 
BEGIN
	ALTER TABLE dbo.Pay DROP COLUMN Amount;
END
GO



IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Pay' AND COLUMN_NAME = 'Discount') 
BEGIN
	ALTER TABLE dbo.Pay DROP COLUMN Discount;
END
GO



IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Pay' AND COLUMN_NAME = 'CurrencyId') 
BEGIN
	ALTER TABLE dbo.Pay DROP CONSTRAINT [FK_Pay_BaseInfoGeneral];
	ALTER TABLE dbo.Pay DROP COLUMN CurrencyId;
END
GO



IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Pay' AND COLUMN_NAME = 'BaseCurrencyId') 
BEGIN
	ALTER TABLE dbo.Pay DROP CONSTRAINT [FK_Pay_BaseInfoGeneral1];
	ALTER TABLE dbo.Pay DROP COLUMN BaseCurrencyId;
END
GO



IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Pay' AND COLUMN_NAME = 'BaseAmount') 
BEGIN
	ALTER TABLE dbo.Pay DROP COLUMN BaseAmount;
END
GO



IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Pay' AND COLUMN_NAME = 'DestAmount') 
BEGIN
	ALTER TABLE dbo.Pay DROP COLUMN DestAmount;
END
GO



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetailSalePrice') 
BEGIN

CREATE TABLE [dbo].[PurchaseInvoiceDetailSalePrice](
	[Guid] [UNIQUEIDENTIFIER] NOT NULL,
	[PurchaseInvoiceDetailId] [UNIQUEIDENTIFIER] NOT NULL,
	[CurrencyId] [INT] NULL,
	[MoneyConvertId] [UNIQUEIDENTIFIER] NULL,
	[TypeId] [INT] NULL,
 CONSTRAINT [PK_PurchaseInvoiceDetailSalePrice] PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[PurchaseInvoiceDetailSalePrice] ADD  CONSTRAINT [DF_PurchaseInvoiceDetailSalePrice_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [Guid]

ALTER TABLE [dbo].[PurchaseInvoiceDetailSalePrice]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoiceDetailSalePrice_Currency_BaseInfoGeneral] FOREIGN KEY([CurrencyId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[PurchaseInvoiceDetailSalePrice] CHECK CONSTRAINT [FK_PurchaseInvoiceDetailSalePrice_Currency_BaseInfoGeneral]

ALTER TABLE [dbo].[PurchaseInvoiceDetailSalePrice]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoiceDetailSalePrice_MoneyConvert] FOREIGN KEY([MoneyConvertId])
REFERENCES [dbo].[MoneyConvert] ([GUID])

ALTER TABLE [dbo].[PurchaseInvoiceDetailSalePrice] CHECK CONSTRAINT [FK_PurchaseInvoiceDetailSalePrice_MoneyConvert]

ALTER TABLE [dbo].[PurchaseInvoiceDetailSalePrice]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoiceDetailSalePrice_PurchaseInvoiceDetails] FOREIGN KEY([PurchaseInvoiceDetailId])
REFERENCES [dbo].[PurchaseInvoiceDetails] ([Guid])

ALTER TABLE [dbo].[PurchaseInvoiceDetailSalePrice] CHECK CONSTRAINT [FK_PurchaseInvoiceDetailSalePrice_PurchaseInvoiceDetails]

ALTER TABLE [dbo].[PurchaseInvoiceDetailSalePrice]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoiceDetailSalePrice_Type_BaseInfoGeneral] FOREIGN KEY([TypeId])
REFERENCES [dbo].[BaseInfoGeneral] ([Id])

ALTER TABLE [dbo].[PurchaseInvoiceDetailSalePrice] CHECK CONSTRAINT [FK_PurchaseInvoiceDetailSalePrice_Type_BaseInfoGeneral]

END
GO



IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'SellingCurrencyId') 
BEGIN

	ALTER TABLE dbo.PurchaseInvoiceDetails DROP CONSTRAINT [FK_PurchaseInvoiceDetails_Sell_BaseInfoGeneral];

	ALTER TABLE dbo.PurchaseInvoiceDetails DROP COLUMN SellingCurrencyId;

END
Go


IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'MiddleSellCurrencyId') 
BEGIN

	ALTER TABLE dbo.PurchaseInvoiceDetails DROP CONSTRAINT [FK_PurchaseInvoiceDetails_MiddleSell_BaseInfoGeneral];

	ALTER TABLE dbo.PurchaseInvoiceDetails DROP COLUMN MiddleSellCurrencyId;

END
Go


IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'WholeSellCurrencyId') 
BEGIN

	ALTER TABLE dbo.PurchaseInvoiceDetails DROP CONSTRAINT [FK_PurchaseInvoiceDetails_WholeSell_BaseInfoGeneral];

	ALTER TABLE dbo.PurchaseInvoiceDetails DROP COLUMN WholeSellCurrencyId;

END
Go


IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'SellingFactorId') 
BEGIN

	ALTER TABLE dbo.PurchaseInvoiceDetails DROP CONSTRAINT [FK_PurchaseInvoiceDetails_Sell_MoneyConvert];

	ALTER TABLE dbo.PurchaseInvoiceDetails DROP COLUMN SellingFactorId;

END
Go


IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'MiddleSellFactorId') 
BEGIN

	ALTER TABLE dbo.PurchaseInvoiceDetails DROP CONSTRAINT [FK_PurchaseInvoiceDetails_MiddleSell_MoneyConvert];

	ALTER TABLE dbo.PurchaseInvoiceDetails DROP COLUMN MiddleSellFactorId;

END
Go



IF EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetails' AND COLUMN_NAME = 'WholeSellFactorId') 
BEGIN

	ALTER TABLE dbo.PurchaseInvoiceDetails DROP CONSTRAINT [FK_PurchaseInvoiceDetails_WholeSell_MoneyConvert];

	ALTER TABLE dbo.PurchaseInvoiceDetails DROP COLUMN WholeSellFactorId;

END
Go

IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'UserPortion'
          ) 
BEGIN
	
CREATE TABLE [dbo].[UserPortion](
	[GUID] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[Specification] [BIT] NULL,
	[PortionPercent] [INT] NULL,
 CONSTRAINT [PK_UserPortion] PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[UserPortion] ADD  CONSTRAINT [DF_UserPortion_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [GUID]

ALTER TABLE [dbo].[UserPortion]  WITH CHECK ADD  CONSTRAINT [FK_UserPortion_User] FOREIGN KEY([GUID])
REFERENCES [dbo].[User] ([GUID])

ALTER TABLE [dbo].[UserPortion] CHECK CONSTRAINT [FK_UserPortion_User]

END
GO


IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'ReceptionDetailPay'
          ) 
BEGIN
	
CREATE TABLE [dbo].[ReceptionDetailPay](
	[GUID] [UNIQUEIDENTIFIER] NOT NULL,
	[Id] [INT] IDENTITY(1,1) NOT NULL,
	[ReceptionId] [UNIQUEIDENTIFIER] NULL,
	[Amount] [DECIMAL](20, 7) NULL,
	[UserPortionId] [UNIQUEIDENTIFIER] NULL,
 CONSTRAINT [PK_ReceptionDetailPay] PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[ReceptionDetailPay] ADD  CONSTRAINT [DF_ReceptionDetailPay_Guid]  DEFAULT (NEWSEQUENTIALID()) FOR [GUID]

ALTER TABLE [dbo].[ReceptionDetailPay]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionDetailPay_Reception] FOREIGN KEY([ReceptionId])
REFERENCES [dbo].[Reception] ([GUID])

ALTER TABLE [dbo].[ReceptionDetailPay] CHECK CONSTRAINT [FK_ReceptionDetailPay_Reception]

ALTER TABLE [dbo].[ReceptionDetailPay]  WITH CHECK ADD  CONSTRAINT [FK_ReceptionDetailPay_UserPortion] FOREIGN KEY([UserPortionId])
REFERENCES [dbo].[UserPortion] ([GUID])

ALTER TABLE [dbo].[ReceptionDetailPay] CHECK CONSTRAINT [FK_ReceptionDetailPay_UserPortion]


END
GO




IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetailSalePrice')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId) VALUES (N'PurchaseInvoiceDetailSalePrice',2,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),NULL,N'PurchaseInvoiceDetailSalePrice',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetailSalePrice') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetailSalePrice'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetailSalePrice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetailSalePrice'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetailSalePrice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetailSalePrice'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetailSalePrice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='PurchaseInvoiceDetailSalePrice'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='UserPortion')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId) VALUES ('UserPortion',3,(SELECT Id FROM dbo.SubSystem WHERE Name='UserManagment'),NULL,'UserPortion',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='UserManagment'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='UserPortion') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='UserPortion'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='UserPortion') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='UserPortion'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='UserPortion') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='UserPortion'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='UserPortion') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='UserPortion'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
   GO
   
IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='UserPortion') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='View'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='UserPortion'),(SELECT Id FROM dbo.Access WHERE Name='View'))
   END
   GO

   

IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetailSalePrice' AND COLUMN_NAME = 'CreateUserId') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoiceDetailSalePrice ADD CreateUserId UNIQUEIDENTIFIER NULL;
	ALTER TABLE dbo.PurchaseInvoiceDetailSalePrice
	ADD CONSTRAINT FK_PurchaseInvoiceDetailSalePrice_CreateUser
	FOREIGN KEY (CreateUserId) REFERENCES dbo.[User](GUID);
END
GO

IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetailSalePrice' AND COLUMN_NAME = 'CreateDate') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoiceDetailSalePrice ADD CreateDate datetime NULL;
END
GO


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetailSalePrice' AND COLUMN_NAME = 'ModifiedUserId') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoiceDetailSalePrice ADD ModifiedUserId UNIQUEIDENTIFIER NULL;
	ALTER TABLE dbo.PurchaseInvoiceDetailSalePrice
	ADD CONSTRAINT FK_PurchaseInvoiceDetailSalePrice_ModifiedUser
	FOREIGN KEY (ModifiedUserId) REFERENCES dbo.[User](GUID);
END
GO


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetailSalePrice' AND COLUMN_NAME = 'ModifiedDate') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoiceDetailSalePrice ADD ModifiedDate datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='ReceptionDetailPay')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId) VALUES ('ReceptionDetailPay',3,(SELECT Id FROM dbo.SubSystem WHERE Name='UserManagment'),NULL,'ReceptionDetailPay',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='UserManagment'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReceptionDetailPay') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReceptionDetailPay'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReceptionDetailPay') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReceptionDetailPay'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ReceptionDetailPay') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ReceptionDetailPay'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
   GO
   
  IF EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'TransferDetail'
                 AND COLUMN_NAME = 'SellingCurrencyId') 
BEGIN

		IF EXISTS(SELECT *
			  FROM   INFORMATION_SCHEMA.TABLE_CONSTRAINTS
			  WHERE  TABLE_NAME = 'TransferDetail'
					 AND CONSTRAINT_NAME = 'FK_TransferDetail_BaseInfoGeneral1') 
		BEGIN


			ALTER TABLE TransferDetail
			DROP CONSTRAINT [FK_TransferDetail_BaseInfoGeneral1];

		END

	ALTER TABLE TransferDetail
	DROP COLUMN SellingCurrencyId;


END

GO

IF EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'TransferDetail'
                 AND COLUMN_NAME = 'PurchaseCurrencyId') 
BEGIN
	

	EXEC sp_RENAME 'TransferDetail.PurchaseCurrencyId' , 'CurrencyId', 'COLUMN'
	ALTER TABLE TransferDetail
	DROP COLUMN PurchaseCurrencyId;

END
Go

IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'ReceptionServiceReceived' AND COLUMN_NAME = 'InstallmentId') 
BEGIN
	ALTER TABLE dbo.ReceptionServiceReceived
	ADD InstallmentId uniqueidentifier null
END
Go


UPDATE dbo.SubSystem SET Icon='fa-file-chart-column' WHERE Icon='fa-registered'

UPDATE dbo.SubSystem SET Icon='fa-circle-info' WHERE Icon='fa-desktop'

UPDATE dbo.SubSystem SET Icon='fa-calendar-range' WHERE Icon='fa fa-calendar'

UPDATE dbo.SubSystem SET Icon='fa-building' WHERE Icon='fa fa-building-o'

UPDATE dbo.SubSystem SET Icon='fa-cash-register' WHERE Icon='fa fa-credit-card'

UPDATE dbo.SubSystem SET Icon='fa-wallet' WHERE Icon='fa fa-money'

UPDATE dbo.SubSystem SET Icon='fa-warehouse-full' WHERE Icon='fa fa-institution'

UPDATE dbo.SubSystem SET Icon='fa-bell' WHERE Icon='fa fa-bell-o'

UPDATE dbo.SubSystem SET Priority=6 WHERE Name='DamageDetails'

UPDATE dbo.SubSystem SET Priority=6 WHERE Name='Damage'

UPDATE dbo.SubSystem SET Priority=5 WHERE Name='ReturnSaleInvoiceDetails'

UPDATE dbo.SubSystem SET Priority=5 WHERE Name='ReturnSaleInvoice'

UPDATE dbo.SubSystem SET ShowName='PurchaseInvoiceList' WHERE Name='PurchaseInvoice'

UPDATE dbo.SubSystem SET ShowName='SaleInvoiceList' WHERE Name='SaleInvoice'

UPDATE dbo.SubSystem SET ShowName='ReturnPurchaseInvoiceList' WHERE Name='ReturnPurchaseInvoice'

UPDATE dbo.SubSystem SET ShowName='ReturnSaleInvoiceList' WHERE Name='ReturnSaleInvoice'

UPDATE dbo.SubSystem SET ShowName='DamageList' WHERE Name='Damage'

IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='PortionReport')
   BEGIN
       INSERT INTO dbo.SubSystem ( Name, Priority, Parent,  Link, ShowName, Active, Icon,ParentRelationId ) VALUES ( N'PortionReport', 3, (SELECT Id FROM dbo.SubSystem WHERE Name='Reports'), N'/UserManagment/PortionReport', N'Portion Report', 1, NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Reports') )
   END
GO


IF NOT EXISTS (SELECT name FROM sys.indexes WHERE object_id=OBJECT_ID('dbo.ReturnSaleInvoice') AND name='UQ_ReturnSaleInvoice_InvoiceNum_ClinicSectionId')
BEGIN
	ALTER TABLE dbo.ReturnSaleInvoice ADD CONSTRAINT UQ_ReturnSaleInvoice_InvoiceNum_ClinicSectionId UNIQUE (InvoiceNum,ClinicSectionId)
END
GO 



IF NOT EXISTS (SELECT name FROM sys.indexes WHERE object_id=OBJECT_ID('dbo.Damage') AND name='UQ_Damage_InvoiceNum_ClinicSectionId')
BEGIN
	ALTER TABLE dbo.Damage ADD CONSTRAINT UQ_Damage_InvoiceNum_ClinicSectionId UNIQUE (InvoiceNum,ClinicSectionId)
END
GO 



IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='CanUsePurchaseInvoiceDate')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'CanUsePurchaseInvoiceDate',7,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),NULL,N'CanUsePurchaseInvoiceDate',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanUsePurchaseInvoiceDate') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanUsePurchaseInvoiceDate'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
 GO




IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='CanUseReturnPurchaseInvoiceDate')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'CanUseReturnPurchaseInvoiceDate',7,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),NULL,N'CanUseReturnPurchaseInvoiceDate',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanUseReturnPurchaseInvoiceDate') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanUseReturnPurchaseInvoiceDate'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
 GO


 

IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='CanUseReturnSaleInvoiceDate')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'CanUseReturnSaleInvoiceDate',7,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),NULL,N'CanUseReturnSaleInvoiceDate',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanUseReturnSaleInvoiceDate') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanUseReturnSaleInvoiceDate'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
 GO


 

IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='CanUseDamageDate')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'CanUseDamageDate',7,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),NULL,N'CanUseDamageDate',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanUseDamageDate') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanUseDamageDate'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
 GO


 IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='StockSelection' AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'))
BEGIN
	INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES ('StockSelection',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'),'BaseInfo/GetAllStockSelection')
END


IF NOT EXISTS(SELECT EName FROM   BaseInfoGeneralType WHERE  EName = 'StockSelectionType') 
BEGIN
	Insert into BaseInfoGeneralType(EName,FName)values('StockSelectionType',N'نوع انتخاب موجودی')
END
GO


IF NOT EXISTS(SELECT Name FROM   BaseInfoGeneral WHERE  Name = 'PreviousePrice') 
BEGIN
	Insert into BaseInfoGeneral(Name,Priority,TypeId)values('PreviousePrice',1,(SELECT Id FROM   BaseInfoGeneralType WHERE  EName = 'StockSelectionType'))
END
GO

IF NOT EXISTS(SELECT Name FROM   BaseInfoGeneral WHERE  Name = 'Stock') 
BEGIN
	Insert into BaseInfoGeneral(Name,Priority,TypeId)values('Stock',2,(SELECT Id FROM   BaseInfoGeneralType WHERE  EName = 'StockSelectionType'))
END
GO

IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Receive' AND COLUMN_NAME = 'SaleInvoiceId') 
BEGIN

	ALTER TABLE dbo.Receive ADD SaleInvoiceId uniqueidentifier NULL;
	ALTER TABLE [dbo].[Receive]  WITH CHECK ADD  CONSTRAINT [FK_Receive_SaleInvoice] FOREIGN KEY([SaleInvoiceId])
	REFERENCES [dbo].[SaleInvoice] ([GUID])
	ALTER TABLE [dbo].[Receive] CHECK CONSTRAINT [FK_Receive_SaleInvoice]
	
END
GO 



IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Product' AND COLUMN_NAME = 'OrderPoint') 
BEGIN
	ALTER TABLE Product
	ADD OrderPoint int null
END
Go


IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Product' AND COLUMN_NAME = 'ProductLocation') 
BEGIN
	ALTER TABLE Product
	ADD ProductLocation nvarchar(200) null
END
Go


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'TransferDetail' AND COLUMN_NAME = 'WholeSellPrice') 
BEGIN
	ALTER TABLE dbo.TransferDetail ADD WholeSellPrice numeric(20, 7);
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'TransferDetail' AND COLUMN_NAME = 'MiddleSellPrice') 
BEGIN
	ALTER TABLE dbo.TransferDetail ADD MiddleSellPrice numeric(20, 7);
END
GO 



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoiceDetailSalePrice' AND COLUMN_NAME = 'TransferDetailId') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoiceDetailSalePrice ADD TransferDetailId uniqueidentifier;
	ALTER TABLE dbo.PurchaseInvoiceDetailSalePrice
	ADD CONSTRAINT FK_PurchaseInvoiceDetailSalePrice_TransferDetail
	FOREIGN KEY (TransferDetailId) REFERENCES dbo.TransferDetail(Guid);
END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='CanChangeSellPrice')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'CanChangeSellPrice',3,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),NULL,N'CanChangeSellPrice',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanChangeSellPrice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanChangeSellPrice'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
 GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanChangeSellPrice') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanChangeSellPrice'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='CanUseTransferDate')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'CanUseTransferDate',10,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'),NULL,N'CanUseTransferDate',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanUseTransferDate') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanUseTransferDate'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
 GO


 
 ALTER TABLE PurchaseInvoiceDetailSalePrice ALTER COLUMN PurchaseInvoiceDetailId uniqueidentifier NULL;


 

IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='TransferDetailSalePrice')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId) VALUES (N'TransferDetailSalePrice',2,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'),NULL,N'TransferDetailSalePrice',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='Storeroom'))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='TransferDetailSalePrice') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='TransferDetailSalePrice'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='TransferDetailSalePrice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='TransferDetailSalePrice'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='TransferDetailSalePrice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='TransferDetailSalePrice'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
GO



IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='TransferDetailSalePrice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='TransferDetailSalePrice'),(SELECT Id FROM dbo.Access WHERE Name='Delete'))
   END
GO

IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Product' AND COLUMN_NAME = 'ProductMasterId') 
BEGIN
	ALTER TABLE dbo.Product
	ADD ProductMasterId UNIQUEIDENTIFIER null
END
Go

IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='ShowClinicSectionChild')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId) VALUES ('ShowClinicSectionChild',3,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),NULL,'ShowClinicSectionChild',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ShowClinicSectionChild') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ShowClinicSectionChild'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ShowClinicSectionChild') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ShowClinicSectionChild'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
   GO


   IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='ShowAllOrAccessedClinicSections')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId) VALUES ('ShowAllOrAccessedClinicSections',3,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),NULL,'ShowAllOrAccessedClinicSections',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ShowAllOrAccessedClinicSections') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ShowAllOrAccessedClinicSections'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='ShowAllOrAccessedClinicSections') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='ShowAllOrAccessedClinicSections'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
   GO

   IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='Dashboard')
   BEGIN
          INSERT INTO dbo.SubSystem (Name,Priority,Parent,Link,ShowName,Active,Icon) VALUES ('Dashboard',1,0,'/Dashboard/Form','Dashboard',1,'fa-regular fa-chart-mixed')
   END
   GO

IF NOT EXISTS (SELECT * FROM dbo.SubSystemSection WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Dashboard') AND SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   BEGIN
       INSERT INTO dbo.SubSystemSection ( SubSystemId, SectionTypeId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Dashboard'),(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital' AND TypeId=(SELECT Id FROM dbo.BaseInfoGeneralType WHERE EName='SectionType')))
   END
   GO


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='Dashboard') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='New'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='Dashboard'),(SELECT Id FROM dbo.Access WHERE Name='New'))
   END
   GO

   UPDATE dbo.BaseInfoGeneral SET Description = Name WHERE Name = 'RetailPrice'
	GO
	UPDATE dbo.BaseInfoGeneral SET Description = Name WHERE Name = 'WholePrice'
	GO
	UPDATE dbo.BaseInfoGeneral SET Description = Name WHERE Name = 'MiddelPrice'
	GO


	
IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='CanUsePayDate')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'CanUsePayDate',4,(SELECT Id FROM dbo.SubSystem WHERE Name='AccountManagement'),NULL,N'CanUsePayDate',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='AccountManagement'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanUsePayDate') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanUsePayDate'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
 GO


 

IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='CanUseRecevieDate')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'CanUseRecevieDate',5,(SELECT Id FROM dbo.SubSystem WHERE Name='AccountManagement'),NULL,N'CanUseRecevieDate',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='AccountManagement'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanUseRecevieDate') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanUseRecevieDate'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
 GO

 
IF NOT EXISTS (SELECT * FROM dbo.SubSystem WHERE Name='CanUseNetPrice')
   BEGIN
          INSERT INTO dbo.SubSystem(Name,Priority,Parent,Link,ShowName,Active,Icon,ParentRelationId)VALUES(N'CanUseNetPrice',7,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'),NULL,N'CanUseNetPrice',0,NULL,(SELECT Id FROM dbo.SubSystem WHERE Name='ProductManagement'))
   END
GO 


IF NOT EXISTS (SELECT * FROM dbo.SubSystemAccess WHERE SubSystemId=(SELECT Id FROM dbo.SubSystem WHERE Name='CanUseNetPrice') AND AccessId=(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   BEGIN
       INSERT INTO dbo.SubSystemAccess ( SubSystemId, AccessId ) VALUES ((SELECT Id FROM dbo.SubSystem WHERE Name='CanUseNetPrice'),(SELECT Id FROM dbo.Access WHERE Name='Edit'))
   END
 GO
                


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'PurchaseInvoice' AND COLUMN_NAME = 'TypeId') 
BEGIN
	ALTER TABLE dbo.PurchaseInvoice ADD TypeId int;
	ALTER TABLE dbo.PurchaseInvoice
	ADD CONSTRAINT FK_PurchaseInvoice_BaseInfoGeneral
	FOREIGN KEY (TypeId) REFERENCES dbo.[BaseInfoGeneral](Id);
END
GO 


IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='NearestExpire' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Store'))
BEGIN
INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES ('NearestExpire',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Store'),'bool')
END
GO

IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='ThisExpireStock' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Store'))
BEGIN
INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES ('ThisExpireStock',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Store'),'bool')
END
GO

IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='LatestSellingPrice' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Store'))
BEGIN
INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES ('LatestSellingPrice',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Store'),'bool')
END
GO

IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='RapidSelling' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Store'))
BEGIN
INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES ('RapidSelling',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Store'),'bool')
END
GO




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Pay' AND COLUMN_NAME = 'InvoiceNum') 
BEGIN
	ALTER TABLE dbo.Pay ADD InvoiceNum NVARCHAR(10);
END
GO 


IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Pay' AND COLUMN_NAME = 'MainInvoiceNum') 
BEGIN
	ALTER TABLE dbo.Pay ADD MainInvoiceNum NVARCHAR(500);
END
GO 




IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='PayInvoiceNumberStartFrom' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab'))
BEGIN
	INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'PayInvoiceNumberStartFrom',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab'),NULL)
END
GO

IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='PayInvoiceNumberStartFrom' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital'))
BEGIN
	INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'PayInvoiceNumberStartFrom',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital'),NULL)
END
GO 


IF NOT EXISTS (SELECT name FROM sys.indexes WHERE object_id=OBJECT_ID('dbo.Pay') AND name='UQ_Pay_InvoiceNum_ClinicSectionId')
BEGIN
	UPDATE dbo.Pay SET InvoiceNum=Id;
	ALTER TABLE dbo.Pay ADD CONSTRAINT UQ_Pay_InvoiceNum_ClinicSectionId UNIQUE (InvoiceNum,ClinicSectionId)
END
GO 




IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'Receive' AND COLUMN_NAME = 'InvoiceNum') 
BEGIN
	ALTER TABLE dbo.Receive ADD InvoiceNum NVARCHAR(10);
END
GO 


IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='ReceiveInvoiceNumberStartFrom' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab'))
BEGIN
	INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'ReceiveInvoiceNumberStartFrom',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Lab'),NULL)
END
GO


IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='ReceiveInvoiceNumberStartFrom' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital'))
BEGIN
	INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES (N'ReceiveInvoiceNumberStartFrom',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Hospital'),NULL)
END
GO 


IF NOT EXISTS (SELECT name FROM sys.indexes WHERE object_id=OBJECT_ID('dbo.Receive') AND name='UQ_Receive_InvoiceNum_ClinicSectionId')
BEGIN
	UPDATE dbo.Receive SET InvoiceNum=id;
	ALTER TABLE dbo.Receive ADD CONSTRAINT UQ_Receive_InvoiceNum_ClinicSectionId UNIQUE (InvoiceNum,ClinicSectionId)
END
GO 



UPDATE dbo.SubSystem SET Active=0 WHERE Name='MaterialStoreroom'
GO



IF NOT EXISTS (SELECT * FROM dbo.ClinicSectionSetting WHERE SName='CanAddReceptionToPreviousDays' AND	SectionTypeId=(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'))
BEGIN
INSERT INTO dbo.ClinicSectionSetting (SName,SectionTypeId,InputType) VALUES ('CanAddReceptionToPreviousDays',(SELECT Id FROM dbo.BaseInfoGeneral WHERE Name='Clinic'),'bool')
END
GO



IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SaleInvoiceDetails' AND COLUMN_NAME = 'OldSalePrice') 
BEGIN
	ALTER TABLE dbo.SaleInvoiceDetails ADD OldSalePrice numeric(20, 7);
END
GO 
