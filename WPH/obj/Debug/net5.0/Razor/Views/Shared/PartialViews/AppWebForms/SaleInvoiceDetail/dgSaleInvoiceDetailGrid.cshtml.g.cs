#pragma checksum "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a84d1b7186b1c929410c2d63509a3a22521ec52d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(WPH.Pages.Shared.PartialViews.AppWebForms.SaleInvoiceDetail.Views_Shared_PartialViews_AppWebForms_SaleInvoiceDetail_dgSaleInvoiceDetailGrid), @"mvc.1.0.view", @"/Views/Shared/PartialViews/AppWebForms/SaleInvoiceDetail/dgSaleInvoiceDetailGrid.cshtml")]
namespace WPH.Pages.Shared.PartialViews.AppWebForms.SaleInvoiceDetail
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "H:\Projects\WAS\WPH\Views\_ViewImports.cshtml"
using WPH;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "H:\Projects\WAS\WPH\Views\_ViewImports.cshtml"
using Kendo.Mvc.UI;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a84d1b7186b1c929410c2d63509a3a22521ec52d", @"/Views/Shared/PartialViews/AppWebForms/SaleInvoiceDetail/dgSaleInvoiceDetailGrid.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5221a2d8e2059d2e61789d73e7efe285a53b8943", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Shared_PartialViews_AppWebForms_SaleInvoiceDetail_dgSaleInvoiceDetailGrid : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Guid>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 6 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
  
            string font = "", pull = "", pullReverse = "", direction = "", align = "";
            if (HttpContextAccessor.HttpContext.Session.GetString("culture") == "en")
            {
                font = " MyFont-Roboto-grid ";
                pull = " pull-right ";
                pullReverse = " pull-left ";
                direction = " ";
                align = "right";

#line default
#line hidden
#nullable disable
            WriteLiteral("        <input class=\"hidden\" type=\"text\" id=\"RTL\" data-Value=\"False\" />\r\n");
#nullable restore
#line 16 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
    }
    else
    {
        font = " MyFont-Sarchia-grid ";
        pull = " pull-left ";
        pullReverse = " pull-right ";
        direction = " direction:rtl; ";
        align = "left";

#line default
#line hidden
#nullable disable
            WriteLiteral("        <input class=\"hidden\" type=\"text\" id=\"RTL\" data-Value=\"True\" />\r\n");
#nullable restore
#line 25 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
    }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<style>

    li span.k-link {
        color: rgba(0, 0, 0, 0.7)!important;
    }

    li span.k-link:hover {
        color: white!important;
    }

    .k-tabstrip-wrapper li .k-link {
        color: white !important;
    }

    .k-tabstrip-wrapper li.k-state-active .k-link {
        color: black !important;
    }

        .k-tabstrip-wrapper li.k-state-active .k-link:hover {
            color: white !important;
        }

</style>


<h1 id=""ProductNameText"" class=""hidden""></h1>

<h1 id=""StockSelection"" class=""hidden"">");
#nullable restore
#line 55 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                                  Write(ViewBag.stockSelection);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h1>\r\n\r\n<span id=\"Product-box\" class=\"emptybox hidden\" data-isEssential=\"true\" style=\"color:red;\">\r\n    ");
#nullable restore
#line 58 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
Write(Localizer["ThisFieldIsEmptyPleaseFillIt"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n</span>\r\n<span id=\"ProductExist-box\" class=\"emptybox hidden\" data-isEssential=\"true\" style=\"color:red;\">\r\n    ");
#nullable restore
#line 61 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
Write(Localizer["ThisProductNotExist"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n</span>\r\n<span id=\"ProductStock-box\" class=\"emptybox hidden\" data-isEssential=\"true\" style=\"color:red;\">\r\n    ");
#nullable restore
#line 64 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
Write(Localizer["DontHaveStock"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n</span>\r\n\r\n<div id=\"gridContent\" class=\"row\">\r\n\r\n    <div");
            BeginWriteAttribute("class", " class=\"", 1972, "\"", 1994, 2);
            WriteAttributeValue("", 1980, "col-sm-6", 1980, 8, true);
#nullable restore
#line 69 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
WriteAttributeValue(" ", 1988, pull, 1989, 5, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" id=\"SaleInvoiceDetailTotalPrice\" style=\"direction:ltr\">\r\n    </div>\r\n\r\n    <div");
            BeginWriteAttribute("class", " class=\"", 2075, "\"", 2104, 2);
            WriteAttributeValue("", 2083, "col-sm-6", 2083, 8, true);
#nullable restore
#line 72 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
WriteAttributeValue(" ", 2091, pullReverse, 2092, 12, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" >\r\n        <h4");
            BeginWriteAttribute("class", " class=\"", 2120, "\"", 2164, 5);
            WriteAttributeValue("", 2128, "smaller", 2128, 7, true);
            WriteAttributeValue(" ", 2135, "lighter", 2136, 8, true);
            WriteAttributeValue(" ", 2143, "blue", 2144, 5, true);
            WriteAttributeValue(" ", 2148, "no-margin", 2149, 10, true);
#nullable restore
#line 73 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
WriteAttributeValue(" ", 2158, font, 2159, 5, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" style=\"padding-top: 1rem\">\r\n            ");
#nullable restore
#line 74 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
       Write(Localizer["Stock"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(" : <span id=\"SaleInvoiceDetailModal-ProductStock\" style=\"color:black\"></span>\r\n        </h4>\r\n        <h4");
            BeginWriteAttribute("class", " class=\"", 2330, "\"", 2374, 5);
            WriteAttributeValue("", 2338, "smaller", 2338, 7, true);
            WriteAttributeValue(" ", 2345, "lighter", 2346, 8, true);
            WriteAttributeValue(" ", 2353, "blue", 2354, 5, true);
            WriteAttributeValue(" ", 2358, "no-margin", 2359, 10, true);
#nullable restore
#line 76 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
WriteAttributeValue(" ", 2368, font, 2369, 5, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" style=\"padding-top: 1rem\">\r\n            ");
#nullable restore
#line 77 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
       Write(Localizer["Stock"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(" - ");
#nullable restore
#line 77 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                             Write(Localizer["ThisExpire"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@": <span id=""SaleInvoiceDetailModal-ProductStockOfThisExpire"" style=""color:black""></span>
        </h4>

    </div>

</div>


<div class=""hr-10"">

</div>



<div class=""col-sm-12"" style=""direction:ltr;overflow:auto"">

    <div id=""SaleInvoiceDetailKendoGrid"" style=""overflow:auto""></div>

</div>



<div class=""row"" id=""CurrencyRecieving"" style=""display:flex;flex-direction:row-reverse"">

    

</div>


<div class=""row"" id=""TotalCurrencyRecieving"" style=""padding:1rem"">

    <div id=""CurrencyTabstrip"" style=""font-size: 1.4rem"">

        <ul id=""CurrencyTabstripList"">
        </ul>



    </div>


</div>

<style>

    .toolbarButton {
        color: white !important;
        background-color: white;
        font-size: 1.5rem !important;
        transition: all 0.5s;
    }

        .toolbarButton:hover {
            background-color: dodgerblue;
            color: white !important;
            border-color: darkblue;
            transition: all 0.5s;
        }");
            WriteLiteral("\r\n\r\n\r\n    #SaleInvoiceDetailKendoGrid .k-grid-content {\r\n        overflow-x: visible;\r\n    }\r\n\r\n\r\n</style>\r\n\r\n\r\n\r\n\r\n<h1 class=\"hidden\" id=\"newMedicine\">");
#nullable restore
#line 147 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                               Write(Localizer["New"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</h1>



<script type=""text/x-kendo-template"" id=""toolbarTemplate"">



    <div style=""font-size:0.5rem"">

        <a href=""\\#"" id=""newMedicineTxt"" class=""k-button toolbarButton"" title=""Add"" onclick=""AddNewRow()""></a>

    </div>


</script>

<script>

    var productWithBorcode_list = [];
    var productName_list = [];
    var Currency_list = [];
    var MoneyConvert_list = [];

    window.onresize = function (event) {
        
        let s = $(window).width() - 80;
        $(""#SaleInvoiceDetailKendoGrid"").css('width', s + 'px');
    };

    $(document).ready(function () {


        let s = $(window).width() - 80;
        $(""#SaleInvoiceDetailKendoGrid"").css('width', s + 'px');

        let RTL = $(""#RTL"").attr(""data-Value"");
        if (RTL === ""True"") {
            $(""#SaleInvoiceDetailKendoGrid"").kendoGrid({
                dataSource: {
                    //data: { Index: '1', ProductName: '1', Num: 1,FreeNum:1},

                    schema: {
               ");
            WriteLiteral(@"         model: {
                            fields: {
                                Guid: { type: ""string"" },
                                Index: { editable: false, type: ""string"" },
                                ProductName: { type: ""string"" },
                                ProductId: { type: ""string"" },
                                ExpireDate: { editable: false, type: ""string"" },
                                Num: { type: ""number"" },
                                FreeNum: { type: ""number"" },
                                PurchasePriceTxt: { editable: false, type: ""string"" },
                                PurchasePriceNumeric: { editable: false, type: ""number"" },
                                PurchasePrice: { editable: false, type: ""string"" },
                                PurchasePriceCurrency: { type: ""string"" },
                                PurchasePriceCurrencyId: { type: ""number"" },
                                SalePrice: { type: ""number"" },
               ");
            WriteLiteral(@"                 OldSalePrice: { editable: false, type: ""string"" },
                                FirstPrice: { editable: false, type: ""number"" },
                                Discount: { type: ""number"" },
                                Currency: { type: ""string"" },
                                CurrencyName: { type: ""string"" },
                                CurrencyNameId: { type: ""number"" },
                                FirstCurrencyId: { type: ""number"" },
                                WholesalePrice: { type: ""number"" },
                                Profit: { type: ""number"" },
                                Consideration: { type: ""string"" },
                                MoneyConvertTxtId: { type: ""string"" },
                                MoneyConvertTxt: { type: ""string"" },
                                MoneyConvert: { type: ""string"" },
                                InvoiceType: { type: ""string"" },
                                PurchaseInvoiceDetailId: { type: ""st");
            WriteLiteral(@"ring"" },
                                ChildrenGuids: { type: ""string"" },
                                ChildrenCount: { type: ""number"" },
                                RemainingNum: { type: ""number"" },
                                BujNumber: { type: ""string"" },
                            }
                        }
                    },
                    batch: true,
                    pageSize: 10,
                    transport: {
                        read: {
                            url: ""/SaleInvoiceDetail/GetAll?saleInvoiceId="" + $(""#Guid"").val(),

                        },
                    },
                    requestEnd: datasourceFinish,
                    sort: { field: ""Index"", dir: ""asc"" },
                },
                toolbar: kendo.template($(""#toolbarTemplate"").html()),
                detailInit: saledetail,
                edit: cellEdits,
                scrollable: true,
                sortable: true,
                pageable: {
    ");
            WriteLiteral(@"                refresh: true,
                    input: true,
                    numeric: false
                },
                columns: [
                    {

                        template: ""<i class='fa fa-trash-can bigger-120 red' style: 'cursor:pointer'> </i>"",
                        width: ""30px"",
                        attributes: {
                            ""onclick"": ""removeSaleInvoiceDetailGrid(this)"",
                            ""data-ChildrenGuids"": ""#: ChildrenGuids #"",
                            ""data-Guid"": ""#: Guid #"",
                            ""data-Count"": ""#: ChildrenCount #"",
                            ""data-Index"": ""#: Index #"",
                            style: ""cursor:pointer""
                        }
                    },
                    {
                        field: ""Consideration"",
                        title: '");
#nullable restore
#line 264 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Consideration"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        editor: ConsiderationEditor,
                        attributes: {
                            ""data-Guid"": ""#: Guid #"",
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Profit"",
                        title: '");
#nullable restore
#line 277 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Profit"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@" %',
                        width: ""80px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""WholesalePrice"",
                        title: '");
#nullable restore
#line 288 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["TotalAmount"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""120px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""MoneyConvert"",
                        title: '");
#nullable restore
#line 299 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["MoneyConvert"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        //width: ""150px"",
                        editor: MoneyConvertEditor,
                        hidden: true,
                        template: ""#=MoneyConvertTxt#"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""

                        }
                    },
                    {
                        field: ""Discount"",
                        title: '");
#nullable restore
#line 314 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Discount"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""70px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""SalePrice"",
                        title: '");
#nullable restore
#line 325 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["SalePrices"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""OldSalePrice"",
                        title: '");
#nullable restore
#line 336 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["OldSalePrice"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""120px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Currency"",
                        title: '");
#nullable restore
#line 347 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Currency"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""70px"",
                        editor: CurrencyEditor,
                        template: ""#=CurrencyName#"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }

                    },
                    {
                        field: ""PurchasePrice"",
                        title: '");
#nullable restore
#line 361 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["PurchasePrice"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""FreeNum"",
                        title: '");
#nullable restore
#line 369 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["FreeNum"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""80px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Num"",
                        title: '");
#nullable restore
#line 380 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Num"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""80px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""ExpireDate"",
                        title: '");
#nullable restore
#line 391 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["ExpireDate"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""ProductName"",
                        title: '");
#nullable restore
#line 399 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["ProductName"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        editor: ProductEditor,
                        width: ""300px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Index"",
                        title: '#',
                        width: ""35px"",
                        //editable:false,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        template: ""#if(ChildrenCount > 1){#<i class='fa-solid fa-caret-left bigger-120' style: 'cursor:pointer'  onclick = 'expandThisRow(this)'> </i>#}#"",
                        width: ""30px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        }
                    },
                    {
                        field: ""Inv");
            WriteLiteral(@"oiceType"",
                        title: 'InvoiceType',
                        hidden: true
                    },
                    {
                        field: ""CurrencyName"",
                        title: 'CurrencyName',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""MoneyConvertTxt"",
                        title: 'MoneyConvertTxt',
                        width: ""80px"",
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""MoneyConvertTxtId"",
                        title: 'MoneyConvertTxtId',
                        width: ""80px"",
                        hidden: true,
                        hea");
            WriteLiteral(@"derAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""CurrencyNameId"",
                        title: 'CurrencyNameId',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""PurchasePriceCurrencyId"",
                        title: 'PurchasePriceCurrencyId',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""PurchasePriceCurrency"",
                        title: 'PurchasePriceCurrency',
                        hidden: true,
                        width: ""2");
            WriteLiteral(@"00px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""PurchasePriceNumeric"",
                        title: 'PurchasePriceNumeric',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""ProductId"",
                        title: 'ProductId',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    
                    {
                        field: ""ChildrenGuids"",
                        title: 'ChildrenGuids',
                        hidden: true,
        ");
            WriteLiteral(@"                headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""FirstPrice"",
                        title: 'FirstPrice',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""ChildrenCount"",
                        title: 'ChildrenCount',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""RemainingNum"",
                        title: 'RemainingNum',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
               ");
            WriteLiteral(@"             style: ""text-align: center""
                        }
                    },
                    {
                        field: ""BujNumber"",
                        title: 'BujNumber',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                ],
                editable: true

            });
        }
        else {
            $(""#SaleInvoiceDetailKendoGrid"").kendoGrid({
                dataSource: {
                    //data: { Index: '1', ProductName: '1', Num: 1,FreeNum:1},

                    schema: {
                        model: {
                            fields: {
                                Guid: { type: ""string"" },
                                Index: { editable: false, type: ""string"" },
                                ProductName: { type: ""string"" },
          ");
            WriteLiteral(@"                      ProductId: { type: ""string"" },
                                ExpireDate: { editable: false, type: ""string"" },
                                Num: { type: ""number"" },
                                FreeNum: { type: ""number"" },
                                PurchasePriceTxt: { editable: false, type: ""string"" },
                                PurchasePriceNumeric: { editable: false, type: ""number"" },
                                PurchasePrice: { editable: false, type: ""string"" },
                                PurchasePriceCurrency: { type: ""string"" },
                                PurchasePriceCurrencyId: { type: ""number"" },
                                SalePrice: { type: ""number"" },
                                OldSalePrice: { editable: false, type: ""string"" },
                                FirstPrice: { editable: false, type: ""number"" },
                                Discount: { type: ""number"" },
                                Currency: { type: ""strin");
            WriteLiteral(@"g"" },
                                CurrencyName: { type: ""string"" },
                                CurrencyNameId: { type: ""number"" },
                                FirstCurrencyId: { type: ""number"" },
                                WholesalePrice: { type: ""number"" },
                                Profit: { type: ""number"" },
                                Consideration: { type: ""string"" },
                                MoneyConvertTxtId: { type: ""string"" },
                                MoneyConvertTxt: { type: ""string"" },
                                MoneyConvert: { type: ""string"" },
                                InvoiceType: { type: ""string"" },
                                PurchaseInvoiceDetailId: { type: ""string"" },
                                ChildrenGuids: { type: ""string"" },
                                ChildrenCount: { type: ""number"" },
                                RemainingNum: { type: ""number"" },
                                BujNumber: { type: ""strin");
            WriteLiteral(@"g"" },
                            }
                        }
                    },
                    batch: true,
                    pageSize: 10,
                    transport: {
                        read: {
                            //url: ""SaleInvoiceDetail/GetAll?saleInvoiceId="" + $(""#Guid"").val(),
                            url: ""/SaleInvoiceDetail/GetAll?saleInvoiceId="" + $(""#Guid"").val(),

                        },
                    },
                    requestEnd: datasourceFinish,
                    sort: { field: ""Index"", dir: ""asc"" },
                },
                toolbar: kendo.template($(""#toolbarTemplate"").html()),
                edit: cellEdits,
                detailInit: saledetail,
                scrollable: true,
                //height: 550,
                //width: 200,
                sortable: true,
                pageable: {
                    refresh: true,
                    input: true,
                    numeric: false
       ");
            WriteLiteral(@"         },
                columns: [
                    {
                        field: ""Index"",
                        title: '#',
                        width: ""35px"",
                        //editable:false,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""ProductName"",
                        title: '");
#nullable restore
#line 623 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["ProductName"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        editor: ProductEditor,
                        width: ""300px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""ExpireDate"",
                        title: '");
#nullable restore
#line 632 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["ExpireDate"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Num"",
                        title: '");
#nullable restore
#line 640 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Num"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""80px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""FreeNum"",
                        title: '");
#nullable restore
#line 651 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["FreeNum"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""80px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""PurchasePrice"",
                        title: '");
#nullable restore
#line 662 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["PurchasePrice"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Currency"",
                        title: '");
#nullable restore
#line 670 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Currency"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""70px"",
                        editor: CurrencyEditor,
                        template: ""#=CurrencyName#"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }

                    },
                    {
                        field: ""OldSalePrice"",
                        title: '");
#nullable restore
#line 684 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["OldSalePrice"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""120px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""SalePrice"",
                        title: '");
#nullable restore
#line 695 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["SalePrices"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Discount"",
                        title: '");
#nullable restore
#line 706 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Discount"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""70px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""MoneyConvert"",
                        title: '");
#nullable restore
#line 717 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["MoneyConvert"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        //width: ""150px"",
                        editor: MoneyConvertEditor,
                        hidden: true,
                        template: ""#=MoneyConvertTxt#"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""

                        }
                    },
                    {
                        field: ""WholesalePrice"",
                        title: '");
#nullable restore
#line 732 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["TotalAmount"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""120px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Profit"",
                        title: '");
#nullable restore
#line 743 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Profit"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@" %',
                        width: ""80px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Consideration"",
                        title: '");
#nullable restore
#line 754 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Consideration"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        editor: ConsiderationEditor,
                        attributes: {
                            //""onclick"": ""ConsiderationClick(event)"",
                            ""data-Guid"": ""#: Guid #"",
                            ""data-Index"": ""#: Index #"",

                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        template: ""<i class='fa fa-trash-can bigger-120 red' style: 'cursor:pointer'> </i>"",
                        width: ""30px"",
                        attributes: {
                            ""onclick"": ""removeSaleInvoiceDetailGrid(this)"",
                            ""data-ChildrenGuids"": ""#: ChildrenGuids #"",
                            ""data-Guid"": ""#: Guid #"",
                            ""data-Count"": ""#: ChildrenCount #"",
                            ""data-Inde");
            WriteLiteral(@"x"": ""#: Index #"",
                            style: ""cursor:pointer""
                        }
                    },
                    {
                        field: ""ProductId"",
                        title: 'ProductId',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""InvoiceType"",
                        title: 'InvoiceType',
                        hidden: true
                    },
                    {
                        field: ""MoneyConvertTxtId"",
                        title: 'MoneyConvertTxtId',
                        width: ""80px"",
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""M");
            WriteLiteral(@"oneyConvertTxt"",
                        title: 'MoneyConvertTxt',
                        width: ""80px"",
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""PurchasePriceCurrency"",
                        title: 'PurchasePriceCurrency',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""PurchasePriceCurrencyId"",
                        title: 'PurchasePriceCurrencyId',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
   ");
            WriteLiteral(@"                 },
                    {
                        field: ""CurrencyNameId"",
                        title: 'CurrencyNameId',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""FirstCurrencyId"",
                        title: 'FirstCurrencyId',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""CurrencyName"",
                        title: 'CurrencyName',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Purch");
            WriteLiteral(@"asePriceNumeric"",
                        title: 'PurchasePriceNumeric',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""ChildrenGuids"",
                        title: 'ChildrenGuids',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""FirstPrice"",
                        title: 'FirstPrice',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""ChildrenCount"",
                        ");
            WriteLiteral(@"title: 'ChildrenCount',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""RemainingNum"",
                        title: 'RemainingNum',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""BujNumber"",
                        title: 'BujNumber',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                ],
                editable: true

            });
        }



        GetAllProduct");
            WriteLiteral(@"sWithBarcode().done(function (data) {

            productWithBorcode_list = data;
            var productNameList = productWithBorcode_list.map(({ ProductId, ProductName }) => ({ ProductId, ProductName }));

            const key = 'ProductName';

            productName_list = [...new Map(productNameList.map(item =>
                [item[key], item])).values()];


        });


        let grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");
        grid.bind(""dataBound"", grid_dataBound);

        setTimeout(() => {
            let ss = $(""#newMedicine"").text();

            $(""#newMedicineTxt"").html('<span class=""k-icon k-i-plus"" ></span><span>' + ss + '</span>');

            let lock = $(""#lock"").text();

            if (lock.toLocaleLowerCase() == ""true"") {
                disablePage();
            }
            
            //grid.tbody.closest(""table"").children(""colgroup"").find(""col"").eq(idx).width(300);

        })

    });

    function disablePage() {

   ");
            WriteLiteral(@"     $(""#newCustomerbtn"").attr(""disabled"", true);
        $(""#NearestExpire"").attr(""disabled"", true);
        $(""#CurrentStock"").attr(""disabled"", true);
        $(""#LatestSellingPrice"").attr(""disabled"", true);
        $(""#CreateLine"").attr(""disabled"", true);
        $(""#btn-OkAndNew"").attr(""disabled"", true);
        $(""#btn-ShowCostsList"").attr(""disabled"", true);
        $(""#btn-AddMoneyConvert"").attr(""disabled"", true);
        $(""#btn-SaleInvoiceDetailModal-ok"").attr(""disabled"", true);
        $(""#btn-SaleInvoiceDetailModal-okandnew"").attr(""disabled"", true);
        $(""#newMedicineTxt"").attr(""disabled"", true);
        $("".fa-trash-can"").attr(""disabled"", true);
        $("".fa-clock-rotate-left"").attr(""disabled"", true);
        $(""#CustomerId"").attr(""disabled"", true);
        
    }
    
    function saledetail(e) {

        let RTL = $(""#RTL"").attr(""data-Value"");

        if (RTL === ""True"") {

            let grid = $(""<div/>"").appendTo(e.detailCell).kendoGrid({
                dataSo");
            WriteLiteral(@"urce: {
                    schema: {
                        model: {
                            fields: {
                                Guid: { type: ""string"" },
                                Index: { editable: false, type: ""string"" },
                                ProductName: { type: ""string"" },
                                ProductId: { type: ""string"" },
                                ExpireDate: { editable: false, type: ""string"" },
                                Num: { type: ""number"" },
                                FreeNum: { type: ""number"" },
                                PurchasePriceTxt: { editable: false, type: ""string"" },
                                PurchasePriceNumeric: { editable: false, type: ""number"" },
                                PurchasePrice: { editable: false, type: ""string"" },
                                PurchasePriceCurrency: { type: ""string"" },
                                PurchasePriceCurrencyId: { type: ""number"" },
                        ");
            WriteLiteral(@"        SalePrice: { type: ""number"" },
                                OldSalePrice: { editable: true, type: ""string"" },
                                FirstPrice: { editable: false, type: ""number"" },
                                Discount: { type: ""number"" },
                                Currency: { type: ""string"" },
                                CurrencyName: { type: ""string"" },
                                CurrencyNameId: { type: ""number"" },
                                FirstCurrencyId: { type: ""number"" },
                                WholesalePrice: { type: ""number"" },
                                Profit: { type: ""number"" },
                                Consideration: { type: ""string"" },
                                MoneyConvertTxtId: { type: ""string"" },
                                MoneyConvertTxt: { type: ""string"" },
                                MoneyConvert: { type: ""string"" },
                                InvoiceType: { type: ""string"" },
              ");
            WriteLiteral(@"                  PurchaseInvoiceDetailId: { type: ""string"" },
                                RemainingNum: { type: ""number"" },
                                BujNumber: { type: ""string"" },

                            }
                        }
                    },
                    batch: true,
                    pageSize: 10,
                    transport: {
                        read: {
                            url: ""/SaleInvoiceDetail/GetAllDetail?saleInvoiceDetailIds="" + e.data.ChildrenGuids,
                        },
                    },
                    requestEnd: datasourceDetailFinish,
                    sort: { field: ""Index"", dir: ""asc"" },
                },
                edit: cellDetailEdits,
                scrollable: true,
                sortable: true,
                pageable: {
                    refresh: true,
                    input: true,
                    numeric: false
                },
                columns: [
                ");
            WriteLiteral(@"    {

                        template: ""<i class='fa fa-trash-can bigger-120 red' style: 'cursor:pointer'> </i>"",
                        width: ""30px"",
                        attributes: {
                            ""onclick"": ""removeSaleInvoiceDetailGrid(this)"",
                            ""data-Guid"": ""#: Guid #"",
                            ""data-Index"": ""#: Index #"",
                            style: ""cursor:pointer""
                        }
                    },
                    {
                        field: ""Consideration"",
                        title: '");
#nullable restore
#line 1041 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Consideration"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        editor: ConsiderationEditor,
                        attributes: {
                            ""data-Guid"": ""#: Guid #"",
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Profit"",
                        title: '");
#nullable restore
#line 1054 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Profit"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@" %',
                        width: ""80px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""WholesalePrice"",
                        title: '");
#nullable restore
#line 1065 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["TotalAmount"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""120px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""MoneyConvert"",
                        title: '");
#nullable restore
#line 1076 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["MoneyConvert"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""150px"",
                        editor: MoneyConvertDetailEditor,
                        hidden: true,
                        template: ""#=MoneyConvertTxt#"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""

                        }
                    },
                    {
                        field: ""Discount"",
                        title: '");
#nullable restore
#line 1091 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Discount"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""70px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""SalePrice"",
                        title: '");
#nullable restore
#line 1102 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["SalePrices"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""OldSalePrice"",
                        title: '");
#nullable restore
#line 1113 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["OldSalePrice"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Currency"",
                        title: '");
#nullable restore
#line 1124 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Currency"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""70px"",
                        editor: CurrencyDetailEditor,
                        template: ""#=CurrencyName#"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }

                    },
                    {
                        field: ""PurchasePrice"",
                        title: '");
#nullable restore
#line 1138 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["PurchasePrice"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""FreeNum"",
                        title: '");
#nullable restore
#line 1146 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["FreeNum"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""80px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Num"",
                        title: '");
#nullable restore
#line 1157 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Num"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""80px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""ExpireDate"",
                        title: '");
#nullable restore
#line 1168 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["ExpireDate"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""ProductName"",
                        title: '");
#nullable restore
#line 1176 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["ProductName"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        editor: ProductEditor,
                        //width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Index"",
                        title: '#',
                        width: ""35px"",
                        //editable:false,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""InvoiceType"",
                        title: 'InvoiceType',
                        hidden: true
                    },
                    {
                        field: ""CurrencyName"",
                        title: 'CurrencyName',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
");
            WriteLiteral(@"                        }
                    },
                    {
                        field: ""MoneyConvertTxt"",
                        title: 'MoneyConvertTxt',
                        width: ""80px"",
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""MoneyConvertTxtId"",
                        title: 'MoneyConvertTxtId',
                        width: ""80px"",
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""CurrencyNameId"",
                        title: 'CurrencyNameId',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: ");
            WriteLiteral(@"center""
                        }
                    },
                    {
                        field: ""FirstCurrencyId"",
                        title: 'FirstCurrencyId',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""PurchasePriceCurrencyId"",
                        title: 'PurchasePriceCurrencyId',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""PurchasePriceCurrency"",
                        title: 'PurchasePriceCurrency',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
           ");
            WriteLiteral(@"                 style: ""text-align: center""
                        }
                    },
                    {
                        field: ""PurchasePriceNumeric"",
                        title: 'PurchasePriceNumeric',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""ProductId"",
                        title: 'ProductId',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""OldSalePrice"",
                        title: 'OldSalePrice',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: cen");
            WriteLiteral(@"ter""
                        }
                    },
                    {
                        field: ""RemainingNum"",
                        title: 'RemainingNum',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""BujNumber"",
                        title: 'BujNumber',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                ],
                editable: true
            }).data(""kendoGrid"");

            let number = Currency_list.length;

            if (number > 1) {
                grid.showColumn(""MoneyConvert"");

            }



        }
        else {");
            WriteLiteral(@"

            let grid = $(""<div/>"").appendTo(e.detailCell).kendoGrid({
                dataSource: {
                    schema: {
                        model: {
                            fields: {
                                Guid: { type: ""string"" },
                                Index: { editable: false, type: ""string"" },
                                ProductName: { type: ""string"" },
                                ProductId: { type: ""string"" },
                                ExpireDate: { editable: false, type: ""string"" },
                                Num: { type: ""number"" },
                                FreeNum: { type: ""number"" },
                                PurchasePriceTxt: { editable: false, type: ""string"" },
                                PurchasePriceNumeric: { editable: false, type: ""number"" },
                                PurchasePrice: { editable: false, type: ""string"" },
                                PurchasePriceCurrency: { type: ""string"" },
      ");
            WriteLiteral(@"                          PurchasePriceCurrencyId: { type: ""number"" },
                                SalePrice: { type: ""number"" },
                                OldSalePrice: { editable: true, type: ""string"" },
                                FirstPrice: { editable: false, type: ""number"" },
                                Discount: { type: ""number"" },
                                Currency: { type: ""string"" },
                                CurrencyName: { type: ""string"" },
                                CurrencyNameId: { type: ""number"" },
                                FirstCurrencyId: { type: ""number"" },
                                WholesalePrice: { type: ""number"" },
                                Profit: { type: ""number"" },
                                Consideration: { type: ""string"" },
                                MoneyConvertTxtId: { type: ""string"" },
                                MoneyConvertTxt: { type: ""string"" },
                                MoneyConvert: { typ");
            WriteLiteral(@"e: ""string"" },
                                InvoiceType: { type: ""string"" },
                                PurchaseInvoiceDetailId: { type: ""string"" },
                                RemainingNum: { type: ""number"" },
                                BujNumber: { type: ""string"" },
                            }
                        }
                    },
                    batch: true,
                    pageSize: 10,
                    transport: {
                        read: {
                            url: ""/SaleInvoiceDetail/GetAllDetail?saleInvoiceDetailIds="" + e.data.ChildrenGuids,
                        },
                    },
                    requestEnd: datasourceDetailFinish,
                    sort: { field: ""Index"", dir: ""asc"" },
                },
                edit: cellDetailEdits,
                scrollable: true,
                sortable: true,
                pageable: {
                    refresh: true,
                    input: true,
      ");
            WriteLiteral(@"              numeric: false
                },
                columns: [
                    {
                        field: ""Index"",
                        title: '#',
                        width: ""35px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""ProductName"",
                        title: '");
#nullable restore
#line 1383 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["ProductName"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        editor: ProductEditor,
                        //width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""ExpireDate"",
                        title: '");
#nullable restore
#line 1392 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["ExpireDate"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Num"",
                        title: '");
#nullable restore
#line 1400 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Num"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""80px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""FreeNum"",
                        title: '");
#nullable restore
#line 1411 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["FreeNum"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""80px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""PurchasePrice"",
                        title: '");
#nullable restore
#line 1422 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["PurchasePrice"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Currency"",
                        title: '");
#nullable restore
#line 1430 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Currency"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""70px"",
                        editor: CurrencyDetailEditor,
                        template: ""#=CurrencyName#"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }

                    },
                    {
                        field: ""OldSalePrice"",
                        title: '");
#nullable restore
#line 1444 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["OldSalePrice"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""SalePrice"",
                        title: '");
#nullable restore
#line 1455 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["SalePrices"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Discount"",
                        title: '");
#nullable restore
#line 1466 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Discount"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""70px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""MoneyConvert"",
                        title: '");
#nullable restore
#line 1477 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["MoneyConvert"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""150px"",
                        editor: MoneyConvertDetailEditor,
                        hidden: true,
                        template: ""#=MoneyConvertTxt#"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""

                        }
                    },
                    {
                        field: ""WholesalePrice"",
                        title: '");
#nullable restore
#line 1492 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["TotalAmount"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""120px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Profit"",
                        title: '");
#nullable restore
#line 1503 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Profit"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@" %',
                        width: ""80px"",
                        attributes: {
                            ""data-Index"": ""#: Index #"",
                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""Consideration"",
                        title: '");
#nullable restore
#line 1514 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                           Write(Localizer["Consideration"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        width: ""100px"",
                        editor: ConsiderationEditor,
                        attributes: {
                            //""onclick"": ""ConsiderationClick(event)"",
                            ""data-Guid"": ""#: Guid #"",
                            ""data-Index"": ""#: Index #"",

                        },
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {

                        template: ""<i class='fa fa-trash-can bigger-120 red' style: 'cursor:pointer'> </i>"",
                        width: ""30px"",
                        attributes: {
                            ""onclick"": ""removeSaleInvoiceDetailGrid(this)"",
                            ""data-Guid"": ""#: Guid #"",
                            ""data-Index"": ""#: Index #"",
                            style: ""cursor:pointer""
                        }
                    },
             ");
            WriteLiteral(@"       {
                        field: ""ProductId"",
                        title: 'ProductId',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""InvoiceType"",
                        title: 'InvoiceType',
                        hidden: true
                    },
                    {
                        field: ""MoneyConvertTxtId"",
                        title: 'MoneyConvertTxtId',
                        width: ""80px"",
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""MoneyConvertTxt"",
                        title: 'MoneyConvertTxt',
                        width: ""80px"",
                        hid");
            WriteLiteral(@"den: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""PurchasePriceCurrency"",
                        title: 'PurchasePriceCurrency',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""PurchasePriceCurrencyId"",
                        title: 'PurchasePriceCurrencyId',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""CurrencyNameId"",
                        title: 'CurrencyNa");
            WriteLiteral(@"meId',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""CurrencyName"",
                        title: 'CurrencyName',
                        hidden: true,
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""PurchasePriceNumeric"",
                        title: 'PurchasePriceNumeric',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""RemainingNum"",
                        title: 'RemainingNum',
                        hi");
            WriteLiteral(@"dden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },
                    {
                        field: ""BujNumber"",
                        title: 'BujNumber',
                        hidden: true,
                        width: ""200px"",
                        headerAttributes: {
                            style: ""text-align: center""
                        }
                    },

                ],
                editable: true
            }).data(""kendoGrid"");

            let number = Currency_list.length;

            if (number > 1) {
                grid.showColumn(""MoneyConvert"");

            }

        }

    }


    let expandedRows = [];

    function expandThisRow(element) {

        
            let grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");

            if ($(element).hasClass('fa-caret-l");
            WriteLiteral(@"eft')) {
                $(element).removeClass('fa-caret-left');
                $(element).addClass('fa-caret-down');
                grid.expandRow($(element).parent().parent());
                expandedRows.push($(element).parent().attr('data-index'));

            }
            else {
                $(element).removeClass('fa-caret-down');
                $(element).addClass('fa-caret-left');
                grid.collapseRow($(element).parent().parent());
                expandedRows.pop($(element).parent().attr('data-index'));
            }
        

        

    }

    function cellEdits(e) {
        $(""#SaleInvoiceDetailModal-ProductStockOfThisExpire"").text("""");
        let general;
        let Num = e.container.find(""input[name=Num]"").data(""kendoNumericTextBox"");
        let FreeNum = e.container.find(""input[name=FreeNum]"").data(""kendoNumericTextBox"");
        let Currency = e.container.find(""input[name=Currency]"").data(""kendoDropDownList"");
        let MoneyConvert = e.con");
            WriteLiteral(@"tainer.find(""input[name=MoneyConvert]"").data(""kendoDropDownList"");
        let SalePrice = e.container.find(""input[name=SalePrice]"").data(""kendoNumericTextBox"");
        let Discount = e.container.find(""input[name=Discount]"").data(""kendoNumericTextBox"");
        let WholesalePrice = e.container.find(""input[name=WholesalePrice]"").data(""kendoNumericTextBox"");
        let Profit = e.container.find(""input[name=Profit]"").data(""kendoNumericTextBox"");
        let Consideration = e.container.find(""input[name=Consideration]"").data(""kendoTextBox"");
        let ProductName = e.container.find(""input[name=ProductName]"").data(""kendoAutoComplete"");
        let grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");
        let RTL = $(""#RTL"").attr(""data-Value"");

        if (e.model.Guid === """") {

            if (Num !== undefined) {

                general = Num;
            }
            else if (FreeNum !== undefined) {
                general = FreeNum;
            }
            else if (SalePric");
            WriteLiteral(@"e !== undefined) {
                general = SalePrice;
            }
            else if (Discount !== undefined) {
                general = Discount;
            }
            else if (WholesalePrice !== undefined) {
                general = WholesalePrice;
            }
            else if (Profit !== undefined) {
                general = Profit;
            }
            else if (Consideration !== undefined) {
                general = Consideration;
            }
            else if (MoneyConvert !== undefined) {
                general = MoneyConvert;
            }
            
            if (general !== undefined)
                general.enable(false);
        }
        else {

            if (ProductName !== undefined) {
                ProductName.enable(false);
            }
            else if (Num !== undefined) {
                let lock = $(""#lock"").text();

                if (lock.toLocaleLowerCase() == ""true"") {
                    Num.enable(false);
      ");
            WriteLiteral(@"          }
                let index = parseInt($(e.container.find(""input[name=Num]"")).closest('td').attr('data-Index'));

                const freeNumChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='FreeNum']"");


                const freeNumIndex = $(freeNumChild).parent().children().index(freeNumChild);

                var data = getGridData(index);

                let childs = data.get(""ChildrenCount"");

                if (childs > 1)
                    Num.enable(false);
                let totalmax = $(""#SaleInvoiceDetailModal-ProductStock"").text();
                let max = data.get(""RemainingNum"");
                let currentStock = $(""#CurrentStock"").is("":checked"");

                let nearestExpire = $(""#NearestExpire"").is("":checked"");

                if (!nearestExpire)
                    currentStock = true;

                let stockSelection = $(""#StockSelection"").text();

                if (stockSelection.toLowerCase() == ""stock"") {
           ");
            WriteLiteral(@"         if (currentStock) 
                        Num.max(parseInt(max));
                    else
                        Num.max(parseInt(totalmax));
                }

                let previuseNum = data.get(""Num"");

                let stock = data.get(""RemainingNum"");

                $(""#SaleInvoiceDetailModal-ProductStockOfThisExpire"").text(stock);

                if (data.get(""Guid"") != """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                    Num.bind(""change"", function () {
                        AddNewSaleInvoiceDetail(data, index, true, false);

                    });
                }

                $(e.container.find(""input[name=Num]"")).on(""keypress"", function (e) {
                    
                    if (e.which === 13) {

                        //let stock = $(""#SaleInvoiceDetailModal-ProductStockOfThisExpire"").text();

                        
                   ");
            WriteLiteral(@"     let numMax = totalmax;

                        if (currentStock)
                            numMax = max;
                        let freeNum = data.get(""FreeNum"");
                        console.log(freeNum);
                        console.log(numMax);
                        console.log(currentStock);
                        console.log(max);
                        if (Num.value() + parseInt(freeNum) > numMax && numMax != """") {
                            $(this).focus();
                            if (stockSelection.toLowerCase() == ""stock"") {
                                Num.value(numMax - freeNum);
                            }
                            else {
                                Num.value(previuseNum);
                            }
                            //Num.value(previuseNum);
                            return;
                        }

                        //if (stockSelection.toLowerCase() == ""stock"") {
                        //    Num.ma");
            WriteLiteral(@"x(parseInt(totalmax));
                        //}
                        //else {
                        //    Num.max(parseInt(previuseNum));
                        //}

                        WholePrice(index);
                        let data_zero = getGridData(0);

                        if (data_zero !== undefined) {
                            index += 1;
                        }

                        grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + freeNumIndex + "")""));

                        //if (RTL === ""True"")
                        //    grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + freeNumIndex+"")""));
                        //else
                        //    grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + freeNumIndex +"")""));

                    }
                });


                $(e.container.find(""input[name=Num]"")).on(""focus"", function (e) {

              ");
            WriteLiteral(@"      let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
            else if (FreeNum !== undefined) {
                let lock = $(""#lock"").text();

                if (lock.toLocaleLowerCase() == ""true"") {
                    FreeNum.enable(false);
                }
                let index = parseInt($(e.container.find(""input[name=FreeNum]"")).closest('td').attr('data-Index'));
                var data = getGridData(index);
                let childs = data.get(""ChildrenCount"");
                let stock = data.get(""RemainingNum"");

                $(""#SaleInvoiceDetailModal-ProductStockOfThisExpire"").text(stock);
                if (childs > 1)
                    FreeNum.enable(false);
                if (data.get(""Guid"") != """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                  ");
            WriteLiteral(@"  FreeNum.bind(""change"", function () {

                        AddNewSaleInvoiceDetail(data, index, true, false);

                    });
                }

                const saleChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='SalePrice']"");
                let previuseNum = data.get(""FreeNum"");

                const saleIndex = $(saleChild).parent().children().index(saleChild);
                let first = true;
                $(e.container.find(""input[name=FreeNum]"")).on(""keypress"", function (e) {

                    

                    if (e.which === 13) {

                        if (first) {
                            first = false;
                            let max = stock;
                            let totalmax = $(""#SaleInvoiceDetailModal-ProductStock"").text();
                            let currentStock = $(""#CurrentStock"").is("":checked"");
                            let nearestExpire = $(""#NearestExpire"").is("":checked"");
                       ");
            WriteLiteral(@"     let FreenumMax = 0;

                            if (currentStock || totalmax == """")
                                FreenumMax = parseFloat(max);
                            else
                                FreenumMax = parseFloat(totalmax);

                            let stockSelection = $(""#StockSelection"").text();

                            let num = data.get(""Num"");

                            if (stockSelection.toLowerCase() == ""stock"") {
                                if ((FreeNum.value() + parseFloat(num)) > FreenumMax && FreenumMax != """") {
                                    first = true;
                                    $(this).focus();
                                    
                                    FreeNum.value(FreenumMax - num);
                                    data.set(""FreeNum"", FreenumMax - num);
                                    return;
                                }
                            }
                            else {
    ");
            WriteLiteral(@"                            if ((FreeNum.value() + parseFloat(num)) > FreenumMax && FreenumMax != """") {
                                    first = true;
                                    $(this).focus();
                                    FreeNum.value(previuseNum);
                                    data.set(""FreeNum"", previuseNum);
                                    return;
                                }

                            }


                            let data_zero = getGridData(0);

                            if (data_zero !== undefined) {
                                index += 1;
                            }

                            let salePrice = data.get(""SalePrice"");

                            if (parseFloat(salePrice) == 0) {
                                grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + saleIndex + "")""));
                            }
                            else {
                              ");
            WriteLiteral(@"  AddNewSaleInvoiceDetail(data, index, true, true);
                            }

                        //if (RTL === ""True"")
                        //    grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + currencyIndex + "")""));
                        //else
                        //    grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + currencyIndex + "")""));
                        }
                        

                    }
                });

                $(e.container.find(""input[name=FreeNum]"")).on(""focus"", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
            else if (Currency !== undefined) {
                let lock = $(""#lock"").text();

                if (lock.toLocaleLowerCase() == ""true"") {
                    Currency.enable(false);
          ");
            WriteLiteral(@"      }
                Currency.open();
                let index = parseInt($(e.container.find(""input[name=Currency]"")).closest('td').attr('data-Index'));

                var data = getGridData(index);
                let childs = data.get(""ChildrenCount"");

                if (childs > 1)
                    Currency.enable(false);
                const SalePriceChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='SalePrice']"");


                const SalePriceIndex = $(SalePriceChild).parent().children().index(SalePriceChild);

                $(e.container.find(""input[name=Currency]"")).parent().on(""keypress"", function (e) {

                    if (e.which === 13) {

                        let data_zero = getGridData(0);

                        if (data_zero !== undefined) {
                            index += 1;
                        }

                        if (RTL === ""True"")
                            grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + ");
            WriteLiteral(@"(index) + "") td:eq("" + SalePriceIndex + "")""));
                        else
                            grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + SalePriceIndex + "")""));

                    }
                });

            }
            else if (SalePrice !== undefined) {
                let lock = $(""#lock"").text();

                if (lock.toLocaleLowerCase() == ""true"") {
                    SalePrice.enable(false);
                }
                let index = parseInt($(e.container.find(""input[name=SalePrice]"")).closest('td').attr('data-Index'));

                var data = getGridData(index);

                let childs = data.get(""ChildrenCount"");

                if (childs > 1)
                    SalePrice.enable(false);

                if (data.get(""Guid"") != """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                    SalePrice.bind(""change"", functi");
            WriteLiteral(@"on () {
                        AddNewSaleInvoiceDetail(data, index, false, false);

                    });
                }

                const DiscountChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='Discount']"");

                const DiscountIndex = $(DiscountChild).parent().children().index(DiscountChild);

                $(e.container.find(""input[name=SalePrice]"")).on(""keypress"", function (e) {

                    if (e.which === 13) {

                        

                        var data = getGridData(index);

                        console.log(data.get(""FirstPrice""));

                        WholePrice(index);
                        let purchasePrice = data.get(""PurchasePrice"");

                        let PPrice = purchasePrice.match(/\d/g);
                        PPrice = PPrice.join("""");

                        let PCurrency = purchasePrice.split("" "");


                        let salePrice = $(this).val();
                        let");
            WriteLiteral(@" saleCurrency = data.get(""CurrencyName"");
                        let moneyConvert = data.get(""MoneyConvertTxt"");
                        setProfit(parseFloat(PPrice), PCurrency[1], parseFloat(salePrice), saleCurrency, moneyConvert, index);

                        let data_zero = getGridData(0);

                        if (data_zero !== undefined) {
                            index += 1;
                        }

                        grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + DiscountIndex + "")""));

                    }
                });

                $(e.container.find(""input[name=SalePrice]"")).on(""focus"", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });
            }
            else if (Discount !== undefined) {
                let lock = $(""#lock"").text();

                if (lock.toLocaleLowerC");
            WriteLiteral(@"ase() == ""true"") {
                    Discount.enable(false);
                }
                let index = parseInt($(e.container.find(""input[name=Discount]"")).closest('td').attr('data-Index'));

                var data = getGridData(index);

                let childs = data.get(""ChildrenCount"");

                if (childs > 1)
                    Discount.enable(false);

                if (data.get(""Guid"") != """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                    Discount.bind(""change"", function () {
                        AddNewSaleInvoiceDetail(data, index, false, false);

                    });

                }


                $(e.container.find(""input[name=Discount]"")).on(""keypress"", function (e) {

                    if (e.which === 13) {

                        var data = getGridData(index);
                        let sale = data.get('SalePrice');
                      ");
            WriteLiteral(@"  let discount = $(this).val();
                        if (discount > sale) {
                            $(this).select();
                            return;
                        }

                        let data_zero = getGridData(0);

                        if (data_zero !== undefined) {
                            index += 1;
                        }

                        let purchasePrice = data.get(""PurchasePrice"");
                        let saleCurrency = data.get(""CurrencyName"");
                        let PCurrency = purchasePrice.split("" "");


                        let currencyEqualant = true;
                        if (saleCurrency == PCurrency[1]) {
                            currencyEqualant = true;
                        }
                        else {
                            currencyEqualant = false;
                        }

                        const MoneyConvertChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='MoneyConvert']""");
            WriteLiteral(@");

                        const MoneyConvertIndex = $(MoneyConvertChild).parent().children().index(MoneyConvertChild);

                        const WholesalePriceChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='WholesalePrice']"");

                        const WholesalePriceIndex = $(WholesalePriceChild).parent().children().index(WholesalePriceChild);

                        if (currencyEqualant)
                            grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + WholesalePriceIndex + "")""));
                        else
                            grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + MoneyConvertIndex + "")""));

                        //if (RTL === ""True"") {
                        //    if (currencyEqualant)
                        //        grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + WholesalePriceIndex + "")""));
                        //    else
             ");
            WriteLiteral(@"           //        grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + MoneyConvertIndex + "")""));

                        //}
                        //else {
                        //    if (currencyEqualant)
                        //        grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + WholesalePriceIndex + "")""));
                        //    else
                        //        grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + MoneyConvertIndex + "")""));
                        //}

                    }
                });

                $(e.container.find(""input[name=Discount]"")).on(""focus"", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });
            }
            else if (MoneyConvert !== undefined) {
                let lock = $(""#lock"").text();

 ");
            WriteLiteral(@"               if (lock.toLocaleLowerCase() == ""true"") {
                    MoneyConvert.enable(false);
                }
                let index = parseInt($(e.container.find(""input[name=MoneyConvert]"")).closest('td').attr('data-Index'));

                var data = getGridData(index);

                let childs = data.get(""ChildrenCount"");

                if (childs > 1)
                    MoneyConvert.enable(false);

                let purchasePrice = data.get(""PurchasePrice"");
                let saleCurrency = data.get(""CurrencyName"");
                let PCurrency = purchasePrice.split("" "");

                if (saleCurrency == PCurrency[1]) {
                    MoneyConvert.enable(false);
                }

                const WholesalePriceChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='WholesalePrice']"");

                const WholesalePriceIndex = $(WholesalePriceChild).parent().children().index(WholesalePriceChild);

                MoneyConvert.ope");
            WriteLiteral(@"n();

                $(e.container.find(""input[name=MoneyConvert]"")).parent().on(""keypress"", function (e) {

                    if (e.which === 13) {

                        let data_zero = getGridData(0);

                        if (data_zero !== undefined) {
                            index += 1;
                        }

                        grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + WholesalePriceIndex + "")""));

                        //if (RTL === ""True"")
                        //    grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq(3)""));
                        //else
                        //    grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq(11)""));


                    }
                });

            }
            else if (WholesalePrice !== undefined) {
                let lock = $(""#lock"").text();

                if (lock.toLocaleLowerCase() == ""true"") {
               ");
            WriteLiteral(@"     WholesalePrice.enable(false);
                }
                let index = parseInt($(e.container.find(""input[name=WholesalePrice]"")).closest('td').attr('data-Index'));

                var data = getGridData(index);

                let childs = data.get(""ChildrenCount"");

                if (childs > 1)
                    WholesalePrice.enable(false);

                if (data.get(""Guid"") != """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                    WholesalePrice.bind(""change"", function () {
                        AddNewSaleInvoiceDetail(data, index, false, false);

                    });

                }

                const ProfitChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='Profit']"");

                const ProfitIndex = $(ProfitChild).parent().children().index(ProfitChild);


                $(e.container.find(""input[name=WholesalePrice]"")).on(""keypress"", funct");
            WriteLiteral(@"ion (e) {

                    if (e.which === 13) {

                        var data = getGridData(index);
                        let whole = WholesalePrice.value();
                        let num = data.get(""Num"");
                        let price = whole / num;
                        data.set(""SalePrice"", price.toFixed(2));

                        let purchasePrice = data.get(""PurchasePrice"");

                        let PPrice = purchasePrice.match(/\d/g);
                        PPrice = PPrice.join("""");

                        let PCurrency = purchasePrice.split("" "");

                        let salePrice = data.get(""SalePrice"");
                        let saleCurrency = data.get(""CurrencyName"");
                        let moneyConvert = data.get(""MoneyConvertTxt"");

                        setProfit(parseFloat(PPrice), PCurrency[1], parseFloat(salePrice), saleCurrency, moneyConvert, index);

                        let data_zero = getGridData(0);

                   ");
            WriteLiteral(@"     if (data_zero !== undefined) {
                            index += 1;
                        }

                        grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + ProfitIndex + "")""));

                    }
                });


                $(e.container.find(""input[name=WholesalePrice]"")).on(""focus"", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
            else if (Profit !== undefined) {

                let lock = $(""#lock"").text();

                if (lock.toLocaleLowerCase() == ""true"") {
                    Profit.enable(false);
                }

                let index = parseInt($(e.container.find(""input[name=Profit]"")).closest('td').attr('data-Index'));

                var data = getGridData(index);

                let childs = data.get(""ChildrenCount"");

       ");
            WriteLiteral(@"         if (childs > 1)
                    Profit.enable(false);

                if (data.get(""Guid"") != """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                    Profit.bind(""change"", function () {
                        let purchasePrice = data.get(""PurchasePrice"");

                        let profit = data.get(""Profit"");

                        let PPrice = purchasePrice.match(/\d/g);
                        PPrice = PPrice.join("""");

                        let PCurrency = purchasePrice.split("" "");

                        let salePrice = data.get(""SalePrice"");
                        let saleCurrency = data.get(""CurrencyName"");
                        let moneyConvert = data.get(""MoneyConvertTxt"");
                        SetSellPrice(profit, parseInt(PPrice), PCurrency[1], parseInt(salePrice), saleCurrency, moneyConvert, index);

                        AddNewSaleInvoiceDetail(data, index, ");
            WriteLiteral(@"false, false);

                    });

                }

                const ConsiderationChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='Consideration']"");

                const ConsiderationIndex = $(ConsiderationChild).parent().children().index(ConsiderationChild);


                $(e.container.find(""input[name=Profit]"")).on(""keypress"", function (e) {

                    if (e.which === 13) {

                        let data_zero = getGridData(0);

                        if (data_zero !== undefined) {
                            index += 1;
                        }

                        grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + ConsiderationIndex+"")""));

                        //if (RTL === ""True"")
                        //    grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq(1)""));
                        //else
                        //    grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:");
            WriteLiteral(@"eq("" + (index) + "") td:eq(13)""));

                    }

                    //SetSellPrice(profit, purchasePrice, purchaseCurrency, salePrice, saleCurrency, moneyConvert, index)
                });

                $(e.container.find(""input[name=Profit]"")).on(""focus"", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
            else if (Consideration !== undefined) {

                let lock = $(""#lock"").text();

                if (lock.toLocaleLowerCase() == ""true"") {
                    Consideration.enable(false);
                }

                let index = parseInt($(e.container.find(""input[name=Consideration]"")).closest('td').attr('data-Index'));
                var data = getGridData(index);
                let childs = data.get(""ChildrenCount"");

                if (childs > 1)
                    Consideration.enab");
            WriteLiteral(@"le(false);


                $(e.container.find(""input[name=Consideration]"")).on(""keypress"", function (e) {

                    if (e.which === 13) {

                        let ms = $(this).val();
                        var data = getGridData(index);
                        data.set(""Consideration"", ms);

                        AddNewSaleInvoiceDetail(data, index, true,true);

                    }
                });

                $(e.container.find(""input[name=Consideration]"")).on(""focus"", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
        }


    }

    function WholePrice(index) {
        var data = getGridData(index);

        let salePrice = data.get(""SalePrice"");
        let num = data.get(""Num"");
        let price = salePrice * num;
        data.set(""WholesalePrice"", price.toFixed(2));
    }

    f");
            WriteLiteral(@"unction getGridData(index) {
        var grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");
        let data = grid.dataSource._data.find(a => a.Index == index);

        return data;
    }

    let newL = false;

    let doubleClick = false;

    let total = [];

    function datasourceFinish(e) {
        //SetTotalPricess();
        total = [];

        for (let i = 0; i < e.response.length; i++) {

            let ex = total.find(a => a.CurrencyId == e.response[i].CurrencyId);



            if (ex != undefined) {

                ex.Total += (e.response[i].SalePrice * e.response[i].Num) - e.response[i].Discount;

            }
            else {
                total.push({ CurrencyId: e.response[i].CurrencyId, CurrencyName: e.response[i].CurrencyName, Total: ((e.response[i].SalePrice * e.response[i].Num) - e.response[i].Discount) });
            }
        }


        $(""#CurrencyRecieving"").empty();
        for (let i = 0; i < total.length; i++) {
            $");
            WriteLiteral(@".ajax({
                data: { Id: total[i].CurrencyId, Name: total[i].CurrencyName, Number: total.length },
                url: ""/SaleInvoiceDetail/CurrencyModal"",
                success: function (response) {

                    CreateCurrencyModals(response, i);


                }
            });
        }

        GetAllCurrenceis().done(function (data) {

            Currency_list = data.sort(
                (p1, p2) => (p1.Id > p2.Id) ? 1 : (p1.Id < p2.Id) ? -1 : 0);
            let number = Currency_list.length;

            if (number > 1 /*&& e.response.length>0*/) {
                let grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");
                grid.showColumn(""MoneyConvert"");

            }

            if (number == 1) {

                RemainAfterRecieve(Currency_list[0].Id);

                //CreateCurrencyTab(Currency_list[0]);

            }

            if (number === 2) {
                $(""#TotalCurrencyRecieving"").removeClass('hidden'");
            WriteLiteral(@");

                GetAllMoneyConverts(Currency_list[0].Id, Currency_list[1].Id).done(function (data) {

                    const key = 'ShowMoneyConvert';

                    MoneyConvert_list = [...new Map(data.map(item =>
                        [item[key], item])).values()];

                    for (let i = 0; i < number; i++) {
                        RemainAfterRecieve(Currency_list[i].Id);
                    }

                    CreateCurrencyTab(Currency_list, true);

                });

            }

            if (number > 2) {

                $(""#TotalCurrencyRecieving"").removeClass('hidden');

                CreateCurrencyTab(Currency_list, false);

            }

        });

    }

    function CreateCurrencyModals(response, ind) {

        $(""#CurrencyRecieving"").append(response);

        $(""#Total-"" + total[ind].CurrencyId).text(total[ind].Total);

        GetReceiveAndDiscount($(""#Guid"").val(), total[ind].CurrencyId);



    }


    fun");
            WriteLiteral(@"ction CreateCurrencyTab(CurrencyList, HasMoneyConvert) {

        $(""#CurrencyTabstrip"").empty();
        $(""#CurrencyTabstrip"").append(""<ul id='CurrencyTabstripList'></ul >"");
        for (let i = 0; i < CurrencyList.length; i++) {

            $(""#CurrencyTabstripList"").append(""<li>"" + CurrencyList[i].Name + ""</li>"");


            let all = """";

            for (let j = 0; j < CurrencyList.length; j++) {

                if (CurrencyList[i].Id != CurrencyList[j].Id) {

                    let totalTxt = ""<div class='col-sm-12' style = 'display:flex;align-items:center;margin-top:0.5rem;padding-top:0.5rem;font-size:1.5rem;'><div class='col-sm-6 col-lg-2' style='display:flex'><span>");
#nullable restore
#line 2528 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                                                                                                                                                                                                                 Write(Localizer["Remain"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</span> <span style='margin: 0 0.2rem'>"" + CurrencyList[j].Name + ""</span><span style='margin: 0 0.5rem'> : </span><span>""  /*$(""#RemainAfterRecieve-"" + CurrencyList[j].Id).text() */+ ""</span></div>"";

                    let moneyConvert = ""<div  class='col-sm-3' style='direction:ltr'><input id='TotalMoneyConvertId"" + CurrencyList[i].Id + CurrencyList[j].Id + ""' class='dropDownMoneyConvert'"" +
                        "" data-base='"" + CurrencyList[i].Id +
                        ""' data-dest='"" + CurrencyList[j].Id + ""'  /></div>"";

                    let totalConvertedPrice = ""<div class='col-sm-3' style='margin: 0 0.5rem'> : <span id='TotalConvertedPrice-"" + CurrencyList[i].Id + CurrencyList[j].Id + ""'></span></div></div>"";

                    all += totalTxt + moneyConvert + totalConvertedPrice;
                }
                else {

                    let totalTxt = ""<div class='col-sm-12' style = 'display:flex;align-items:center;margin-top:0.5rem;padding-top:0.5rem;font-size:1.5rem;'><d");
            WriteLiteral("iv class=\'col-sm-6 col-lg-2\' style=\'display:flex\'><span>");
#nullable restore
#line 2540 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                                                                                                                                                                                                                 Write(Localizer["Remain"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</span> <span style='margin: 0 0.2rem'>"" + CurrencyList[j].Name + ""</span><span style='margin: 0 0.5rem'> : </span><span>""  /*$(""#RemainAfterRecieve-"" + CurrencyList[j].Id).text()*/ + ""</span></div>"";

                    let moneyConvert = ""<div  class='col-sm-3' style='direction:ltr'><span>1"" + CurrencyList[j].Name + "" = 1 "" + CurrencyList[j].Name + ""</span></div>"";

                    let remainAfterRecieve = $(""#RemainAfterRecieve-"" + CurrencyList[j].Id).text();

                    if (remainAfterRecieve == """")
                        remainAfterRecieve = 0;

                    let totalConvertedPrice = ""<div class='col-sm-3' style='margin: 0 0.5rem'> : <span id='TotalConvertedPrice-"" + CurrencyList[i].Id + CurrencyList[j].Id + ""'>"" + remainAfterRecieve +""</span></div></div>"";

                    all += totalTxt + moneyConvert + totalConvertedPrice;

                }
            }


            let addTotalButton = "" <div class='col-sm-12' style='border-top:gray dotted 1px; margin-to");
            WriteLiteral(@"p:1rem;padding-top:1rem'><div class='col-sm-6 col-lg-2'></div><div class='col-sm-3'></div><div class='col-sm-3'><span id='TotalPrice-"" + CurrencyList[i].Id + ""'></span><button id='btn-addTotal-accept"" + CurrencyList[i].Id + ""' class='k-button k-primary' style='margin: 0 1rem' data-base='"" + CurrencyList[i].Id + ""' onclick='ReceiveTotalConvertedMoney(this)'>");
#nullable restore
#line 2557 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Write(Localizer["Receive"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</button></div></div>"";


            $(""#CurrencyTabstrip"").append(""<div  id='currencyTab"" + CurrencyList[i].Id + ""'"" +
                ""style = 'display:flex;align-items:center;margin-top:0.5rem;padding-top:0.5rem;font-size:1.5rem;flex-wrap: wrap' > "" +
                all + addTotalButton + ""</div> "");



        }

        if (HasMoneyConvert) {

            let dropdown = $("".dropDownMoneyConvert"");

            for (let i = 0; i < dropdown.length; i++) {

                $(dropdown[i]).kendoDropDownList({
                    dataTextField: ""ShowMoneyConvert"",
                    dataValueField: ""Guid"",
                    dataSource: MoneyConvert_list,
                    change: CalculateTotalPrices
                });

            }

        }
        else {

            let dropdown = $("".dropDownMoneyConvert"");

            for (let i = 0; i < dropdown.length; i++) {

                let base = $(dropdown[i]).attr('data-base');
                let dest = $(dropdown[");
            WriteLiteral(@"i]).attr('data-dest');

                $(dropdown[i]).kendoDropDownList({
                    dataTextField: ""ShowMoneyConvert"",
                    dataValueField: ""Guid"",
                    dataSource: {
                        transport: {
                            read: ""/MoneyConvert/GetLatestMoneyConvertsWithIsMain?baseCurrencyId="" + base + ""&&destCurrencyId="" + dest
                        },
                        requestEnd: dropDownFinish,
                    }
                });

            }

        }


        $(""#CurrencyTabstrip"").kendoTabStrip({
            animation: false,
            //collapsible: true
        }).data(""kendoTabStrip"").select(1);

        $(""#CurrencyTabstrip"").data(""kendoTabStrip"").select(0);

        CalculateTotalPrices();

    }

    function ReceiveTotalConvertedMoney(element) {
        let lock = $(""#lock"").text();
        if (lock.toLocaleLowerCase() == ""true"") {
            return;
        }

        let currencyId = $(elem");
            WriteLiteral(@"ent).attr('data-base');

        let ReceiveAmounts = [];

        for (let i = 0; i < Currency_list.length; i++) {
            let amount = parseFloat($(""#TotalConvertedPrice-"" + currencyId + Currency_list[i].Id).text().split(' ')[0]);

            if (amount > 0) {

                if (currencyId == Currency_list[i].Id) {

                    ReceiveAmounts.push({
                        Amount: amount,
                        BaseCurrencyId: currencyId,
                        CurrencyId: currencyId,
                        BaseAmount: 1,
                        DestAmount: 1
                    });
                }
                else {


                    let dataItem = $(""#TotalMoneyConvertId"" + currencyId + Currency_list[i].Id).data(""kendoDropDownList"").dataItem();

                    if (currencyId == dataItem.BaseCurrencyId) {
                        ReceiveAmounts.push({
                            Amount: amount,
                            BaseCurrencyId: Currency_l");
            WriteLiteral(@"ist[i].Id,
                            CurrencyId: currencyId,
                            BaseAmount: dataItem.BaseAmount,
                            DestAmount: dataItem.DestAmount
                        });
                    }
                    else {

                        ReceiveAmounts.push({
                            Amount: amount,
                            BaseCurrencyId: Currency_list[i].Id,
                            CurrencyId: currencyId,
                            BaseAmount: dataItem.DestAmount,
                            DestAmount: dataItem.BaseAmount
                        });

                    }

                }

            }

        }


        if (ReceiveAmounts.length > 0) {
            let saleId = $(""#Guid"").val();

            let customerId = $(""#CustomerId"").val();




            let data = {
                ReceiveAmounts: ReceiveAmounts,
                SaleInvoiceId: saleId,
                CustomerId: customerId
      ");
            WriteLiteral(@"      }


            $.ajax({
                data: data,
                type: ""post"",
                url: ""/Receive/AddOrUpdate"",
                success: function (response) {

                    for (let i = 0; i < Currency_list.length; i++) {

                        GetReceiveAndDiscount($(""#Guid"").val(), Currency_list[i].Id);

                    }


                }
            });
        }


    }


    function dropDownFinish(e) {

        CalculateTotalPrices();

    }

    function CalculateTotalPrices() {


        for (let i = 0; i < Currency_list.length; i++) {

            let total=0;

            for (let j = 0; j < Currency_list.length; j++) {

                if (Currency_list[i].Id != Currency_list[j].Id) {

                    let dropdown = $(""#TotalMoneyConvertId"" + Currency_list[i].Id + Currency_list[j].Id).data(""kendoDropDownList"");

                    if (dropdown != undefined) {
                        var dataItem = dropdown.dataIt");
            WriteLiteral(@"em();

                        if (dataItem != undefined) {

                            let totalConvertedPrice;
                            let currency;

                            if (Currency_list[i].Id == dataItem.BaseCurrencyId) {

                                let dest = $(""#RemainAfterRecieve-"" + dataItem.DestCurrencyId).text();
                                let base = $(""#RemainAfterRecieve-"" + dataItem.BaseCurrencyId).text();

                                totalConvertedPrice = parseFloat(dest * (dataItem.BaseAmount / dataItem.DestAmount))/* + parseFloat(base)*/;

                                currency = dataItem.BaseCurrencyName;

                            }
                            else {

                                let dest = $(""#RemainAfterRecieve-"" + dataItem.BaseCurrencyId).text();
                                let base = $(""#RemainAfterRecieve-"" + dataItem.DestCurrencyId).text();

                                totalConvertedPrice = parseFloat(dest");
            WriteLiteral(@" * (dataItem.DestAmount / dataItem.BaseAmount))/* + parseFloat(base)*/;
                                currency = dataItem.DestCurrencyName;

                            }

                            $(""#TotalConvertedPrice-"" + Currency_list[i].Id + Currency_list[j].Id).text(totalConvertedPrice.toFixed(2) + "" "" + currency);
                        }
                    }


                }
                else {
                    let totalConvertedPrice;
                    let currency = Currency_list[i].Name;
                    totalConvertedPrice = parseFloat($(""#RemainAfterRecieve-"" + Currency_list[i].Id).text());

                    if (isNaN(totalConvertedPrice)) {

                        totalConvertedPrice = 0;
                    }
                    $(""#TotalConvertedPrice-"" + Currency_list[i].Id + Currency_list[j].Id).text(totalConvertedPrice.toFixed(2) + "" "" + currency);
                }

                let amount = $(""#TotalConvertedPrice-"" + Currency_list[i].Id ");
            WriteLiteral(@"+ Currency_list[j].Id).text();

                total += parseFloat(amount);

            }

            $(""#TotalPrice-"" + Currency_list[i].Id).text(total.toFixed(2) + "" "" + Currency_list[i].Name);


        }



    }

    function GetReceiveAndDiscount(saleId,currencyId) {

        $.when(GetSaleInvoiceDiscount(saleId, currencyId), GetSaleInvoiceReceive(saleId, currencyId)).done(function (discount, receive) {

            if (discount[0] != null) {

                let total = $(""#Total-"" + currencyId).text();

                $(""#Discount-"" + currencyId).data(""kendoNumericTextBox"").value(discount[0].Amount);

                let percent = (discount[0].Amount / parseFloat(total)) * 100;
                
                $(""#DiscountPercent-"" + currencyId).data(""kendoNumericTextBox"").value(percent);

                $(""#guid-"" + currencyId).text(discount[0].Guid);
            }

            if (receive[0] != null) {
                if (typeof receive[0] == 'number') {
      ");
            WriteLiteral(@"              $(""#Recieved-"" + currencyId).text(receive[0]);

                }
            }

            setTimeout(() => {
                RemainAfterRecieve(currencyId);
                CalculateTotalPrices();
            });
            

        });

    }


    function GetSaleInvoiceDiscount(saleInvoiceId, CurrencyId) {
        return $.ajax({
            data: { SaleInvoiceId: saleInvoiceId, CurrencyId: CurrencyId },
            url: ""/SaleInvoiceDiscount/GetSaleInvoiceDiscount"",
            
        });

    }

    function GetSaleInvoiceReceive(saleInvoiceId, CurrencyId) {
        return $.ajax({
            data: { SaleInvoiceId: saleInvoiceId, CurrencyId: CurrencyId},
            url: ""/Receive/GetSaleInvoiceReceives"",
           
        });

    }


    function grid_dataBound(e) {
        if(newL)
            AddNewRow();
        newL = false;


        var grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");

        let data = grid.dataSource.");
            WriteLiteral(@"_data;
        for (let i = 0; i < data.length; i++) {

            let purchasePrice = data[i].get(""PurchasePrice"");
            let purchasePriceNum = data[i].get(""PurchasePriceNumeric"");
            let ind = data[i].get(""Index"");

            let PPrice = purchasePrice.match(/\d/g);
            if (PPrice != null && ind != """" && ind != null) {
                PPrice = PPrice.join("""");

                let PCurrency = purchasePrice.split("" "");


                let salePrice = data[i].get(""SalePrice"");
                let saleCurrency = data[i].get(""CurrencyName"");
                let moneyConvert = data[i].get(""MoneyConvertTxt"");
                setProfit(parseFloat(purchasePriceNum), PCurrency[1], parseFloat(salePrice), saleCurrency, moneyConvert, ind);
            }


        }

        let RTL = $(""#RTL"").attr(""data-Value"");

        if (RTL === ""True"")
            $("".k-hierarchy-cell"").children().addClass('hidden');

        

        setTimeout(() => {
            cons");
            WriteLiteral(@"t freeNumChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(0) th[data-field='MoneyConvert']"");
            const idx = $(freeNumChild).parent().children().index(freeNumChild);

            if (grid.tbody.closest(""table"").children(""tbody"").children(""tr"").length > 0) {
                $(grid.thead.closest(""table"").children(""colgroup"").find(""col"").eq(idx)).css('min-width', '150px');
                $(grid.tbody.closest(""table"").children(""colgroup"").find(""col"").eq(idx)).css('min-width', '150px');
            }
            if (RTL === ""True"")
                $(""#SaleInvoiceDetailKendoGrid .k-auto-scrollable"").scrollLeft(1000);
            else 
                $(""#SaleInvoiceDetailKendoGrid .k-auto-scrollable"").scrollLeft(0);

            for (let i = 0; i < expandedRows.length; i++) {
                grid.expandRow("".k-master-row:eq("" + parseInt(expandedRows[i] - 1) + "")"");
                let sc = $(""#SaleInvoiceDetailKendoGrid .k-master-row:eq("" + parseInt(expandedRows[i] - 1) + "") .fa-caret-left"");
 ");
            WriteLiteral(@"               $(sc).removeClass('fa-caret-left');
                $(sc).addClass('fa-caret-down');

            }

        },500)
      

    }

    function AddNewSaleInvoiceDetail(data, index, changeNum, newLine) {
        let lock = $(""#lock"").text();
        if (lock.toLocaleLowerCase() == ""true"") {
            return;
        }
        if (!doubleClick) {

            doubleClick = true;

            const discountChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='Discount']"");


            const discountIndex = $(discountChild).parent().children().index(discountChild);

            let currentStock = $(""#CurrentStock"").is("":checked"");

            let nearestExpire = $(""#NearestExpire"").is("":checked"");

            var grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");

            if (parseInt(data.get(""Discount"")) > parseInt(data.get(""SalePrice""))) {
                if (RTL === ""True"")
                    grid.editCell($(""#SaleInvoiceDetailKendoGri");
            WriteLiteral(@"d tr:eq("" + (index) + "") td:eq("" + discountIndex + "")""));
                else
                    grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + discountIndex + "")""));
                return;
            }

            if (data.get(""SalePrice"") == 0)
                return;

            let saleInvoiceDetail = {

                Guid: data.get(""Guid""),
                SaleInvoiceId: $('#Guid').val(),
                Num: data.get(""Num""),
                SalePrice: data.get(""SalePrice""),
                //OldSalePrice: data.get(""FirstPrice""),
                SalePriceTxt: data.get(""SalePrice"").toString(),
                PurchaseInvoiceDetailId: data.get(""PurchaseInvoiceDetailId""),
                InvoiceType: data.get(""InvoiceType""),
                Consideration: data.get(""Consideration""),
                //ExpireDate: data.get(""ExpireDate""),
                FreeNum: data.get(""FreeNum""),
                Discount: data.get(""Discount""),
                Dis");
            WriteLiteral(@"countTxt: data.get(""Discount"").toString(),
                CurrencyId: data.get(""CurrencyNameId""),
                CurrencyName: data.get(""CurrencyName""),
                ProductId: data.get(""ProductId""),
                BujNumber: data.get(""BujNumber""),
                MoneyConvertId: data.get(""MoneyConvertTxtId""),
                ChangeNum: changeNum,
                CurrentStock: currentStock,
                NearestExpire: nearestExpire,
                WholesalePrice: data.get(""WholesalePrice""),
                ChildrenGuids: data.get(""ChildrenGuids""),
            }


            $.ajax({
                data: { SaleInvoiceDetail: saleInvoiceDetail },
                url: ""/SaleInvoiceDetail/AddOrUpdate"",
                type: ""Post"",
                success: function (response) {
                    doubleClick = false;
                    if (response == ""stocknotenough"") {
                        $(""#ProductStock-box"").removeClass(""hidden"");
                    }
               ");
            WriteLiteral(@"     else if (response != 0) {

                        if (newLine)
                            newL = true;

                        $(""#SaleInvoiceDetailKendoGrid"").find("".k-i-reload"").click();
                        $(""#ProductStock-box"").addClass(""hidden"");

                    }
                    else {
                        $(""#ProductStock-box"").removeClass(""hidden"");
                    }
                }
            });
        }


    }

    function SaveChanges(index) {
        let lock = $(""#lock"").text();
        if (lock.toLocaleLowerCase() == ""true"") {
            return;
        }

        var data = getGridData(index);


        let changeList = [];

        let grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");

        var data = grid.dataSource._data;

        for (let i = 0; i < data.length; i++) {

            if (data[i].dirty) {

                let saleInvoiceDetail =
                {
                    Guid: data[i].get(""Guid"")");
            WriteLiteral(@",
                    SaleInvoiceId: $('#Guid').val(),
                    Num: data[i].get(""Num""),
                    SalePrice: data[i].get(""SalePrice""),
                    PurchaseInvoiceDetailId: data[i].get(""PurchaseInvoiceDetailId""),
                    InvoiceType: data[i].get(""InvoiceType""),
                    Consideration: data[i].get(""Consideration""),
                    //ExpireDate: data.get(""ExpireDate""),
                    FreeNum: data[i].get(""FreeNum""),
                    Discount: data[i].get(""Discount""),
                    CurrencyId: data[i].get(""CurrencyNameId""),
                    ProductId: data[i].get(""ProductId""),
                    BujNumber: data[i].get(""BujNumber""),
                    MoneyConvertId: data[i].get(""MoneyConvertTxtId"")
                }


                //$.ajax({
                //    data: { SaleInvoiceDetail: saleInvoiceDetail },
                //    url: ""/SaleInvoiceDetail/AddOrUpdate"",
                //    type: ""Post"",
         ");
            WriteLiteral(@"       //    success: function (response) {
                //        if (response != 0 && ) {


                //        }
                //        else {
                //            $(""#ProductStock-box"").removeClass(""hidden"");
                //        }
                //    }
                //});

            }

        }

        let newData = data.find(a => a.Index == 0);

        if (newData != undefined) {

            changeList.push(
                {
                    Guid: newData.get(""Guid""),
                    SaleInvoiceId: $('#Guid').val(),
                    Num: newData.get(""Num""),
                    SalePrice: newData.get(""SalePrice""),
                    PurchaseInvoiceDetailId: newData.get(""PurchaseInvoiceDetailId""),
                    InvoiceType: newData.get(""InvoiceType""),
                    Consideration: newData.get(""Consideration""),
                    FreeNum: newData.get(""FreeNum""),
                    Discount: newData.get(""Discount""),
 ");
            WriteLiteral(@"                   CurrencyId: newData.get(""CurrencyNameId""),
                    ProductId: newData.get(""ProductId""),
                    BujNumber: newData.get(""BujNumber""),
                    MoneyConvertId: newData.get(""MoneyConvertTxtId"")
                }
            )

        }



    }

    function removeSaleInvoiceDetailGrid(element) {

        let lock = $(""#lock"").text();
        if (lock.toLocaleLowerCase() == ""true"") {
            return;
        }
        let childrenGuid = $(element).closest('td').attr('data-ChildrenGuids');
        let guid = $(element).closest('td').attr('data-Guid');
        let Count = $(element).closest('td').attr('data-Count');
        let index = $(element).closest('td').attr('data-Index');
        expandedRows.pop(index);

        if (Count == undefined || Count == """") {
            Count = 0;
        }

        var pattern = /^([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})|[0-9]+$/i;

        bootbox.confirm(");
            WriteLiteral(@"{
            message: ""Delete This Record?"",
            className: 'bootbox-class MyFont-Sarchia-grid',
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'k-primary k-button'
                },
                cancel: {
                    label: 'No',
                    className: 'k-button'
                }
            },
            callback: function (result) {

                if (result) {
                    if (Count > 1) {

                        $.ajax({
                            data: { Guids: childrenGuid },
                            url: ""/SaleInvoiceDetail/Remove"",
                            type: ""Post"",
                            success: function (response) {
                                if (response != 0) {

                                    $(""#SaleInvoiceDetailKendoGrid"").find("".k-i-reload"").click();

                                    let grid = $(""#SaleInvoiceDetailKendoGrid"").dat");
            WriteLiteral(@"a(""kendoGrid"");

                                    if ($(element).hasClass('fa-caret-left')) {
                                        $(element).removeClass('fa-caret-left');
                                        $(element).addClass('fa-caret-down');
                                        grid.expandRow($(element).parent());
                                    }
                                    else {
                                        $(element).removeClass('fa-caret-down');
                                        $(element).addClass('fa-caret-left');
                                        grid.collapseRow($(element).parent());
                                    }

                                }
                            }
                        });


                    }
                    else {
                        if (/*pattern.test(guid) !== true || */guid === ""00000000-0000-0000-0000-000000000000"" || guid === ""0"") {
                            var grid = ");
            WriteLiteral(@"$(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");
                            var data = getGridData(index);
                            grid.dataSource.remove(data);
                        }
                        else {
                            $.ajax({
                                data: { Guids: guid },
                                url: ""/SaleInvoiceDetail/Remove"",
                                type: ""Post"",
                                success: function (response) {
                                    if (response != 0) {

                                        $(""#SaleInvoiceDetailKendoGrid"").find("".k-i-reload"").click();

                                    }
                                }
                            });
                        }
                    }



                }
                else {
                    return;
                }
            }
        })




    }

    function editSaleInvoiceDetailGrid(element) {
       ");
            WriteLiteral(@" let lock = $(""#lock"").text();
        if (lock.toLocaleLowerCase() == ""true"") {
            return;
        }
        let index = parseInt($(element).closest('td').attr('data-Index'));

        var data = getGridData(index);

        if (data.dirty)
            AddNewSaleInvoiceDetail(data);
    }

    function ConsiderationClick(e) {
        var grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");

        setTimeout(() => {
            grid.closeCell();
        })


    }

    function GetAllProductsWithBarcode() {
        return $.ajax({
            type: ""Get"",
            url: ""/Product/GetAllProductsWithBarcodeForFilter"",
        });
    }

    function GetAllCurrenceis() {
        return $.ajax({
            type: ""Get"",
            url: ""/BaseInfo/GetAllCurrencies"",
        });
    }

    function GetAllMoneyConverts(baseCurrency, destCurrency) {
        return $.ajax({
            type: ""Get"",
            url: ""/MoneyConvert/GetLatestMoneyConvertsWithIsMa");
            WriteLiteral(@"in?baseCurrencyId="" + baseCurrency + ""&&destCurrencyId="" + destCurrency,
        });
    }

    function AddNewRow() {
        $(""#SalePriceTypeId-box"").addClass('hidden');
        expandedRows = [];

        let lock = $(""#lock"").text();
        if (lock.toLocaleLowerCase() == ""true"") {
            return;
        }
        let grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");
        //var data = grid.dataSource.at(0);
        var data = getGridData(0);

        let RTL = $(""#RTL"").attr(""data-Value"");
        let canAddRow = true;

        let guid = $(""#Guid"").val();

        if (guid == """" || guid == ""00000000-0000-0000-0000-000000000000"") {
            $(this).attr(""disabled"", true);
            let upd = UpdateSaleInvoiceMaster();
            if (!upd)
                return;
            $('#SalePriceTypeId').data('kendoDropDownList').enable(false);
        }
        else {
            let emptyData = grid.dataSource._data.find(a => a.Index == """");


            ");
            WriteLiteral(@"if (data != undefined) {
                if (data.get(""CurrencyNameId"") != 0)
                    AddNewSaleInvoiceDetail(data, 0, true, true);
                canAddRow = false;
            }

            if (emptyData != undefined)
                canAddRow = false;
            if (canAddRow) {
                grid.addRow();
                const freeNumChild = $(""#SaleInvoiceDetailKendoGrid tr:eq("" + (1) + "") td[data-field='ProductName']"");

                const freeNumIndex = $(freeNumChild).parent().children().index(freeNumChild);

                if (RTL === ""True"")
                    grid.editCell($(""#SaleInvoiceDetailKendoGrid td:eq("" + freeNumIndex + "")""));
                else
                    grid.editCell($(""#SaleInvoiceDetailKendoGrid td:eq("" + freeNumIndex + "")""));
            }
        }

    }

    function UpdateSaleInvoiceMaster() {
        let lock = $(""#lock"").text();
        if (lock.toLocaleLowerCase() == ""true"") {
            return false;
        }
    ");
            WriteLiteral(@"    $(""#addNewSaleInvoiceForm #ERROR_Data"").addClass(""hidden"");
            $(""#addNewSaleInvoiceForm #Date-valid"").addClass(""hidden"");
            $(""#addNewSaleInvoiceForm #ERROR_SomeThingWentWrong"").addClass(""hidden"");

            $('#addNewSaleInvoiceForm .emptybox').addClass('hidden');
            var isEmmpty = true;
            $('.emptybox').each(function () {
                if ($(this).attr('data-isEssential') === 'true') {
                    var empty = $(this).attr('id');
                    if ($('[data-checkEmpty=""' + empty + '""]').val() === """") {
                        $(this).removeClass('hidden');
                        isEmmpty = false;
                        $('#btn-addSaleSaleInvoice-accept').removeAttr(""disabled"");
                        return;
                    }
                }
            });

            if (isEmmpty === false) {
                return false;
            }

            var link = ""/SaleInvoice/AddOrUpdate"";

            let SaleInvoi");
            WriteLiteral(@"ce = {
                Guid: $(""#Guid"").val(),
                CustomerId: $(""#CustomerId"").val(),
                InvoiceDateTxt: $(""#InvoiceDateTxt"").val(),
                Description: $(""#Description"").val(),
                SalePriceTypeId: $(""#SalePriceTypeId"").val(),

            };

            var data = SaleInvoice;
            $("".loader"").removeClass(""hidden"");

            $.ajax({
                type: ""Post"",
                url: link,
                data: data,
                success: function (response) {

                    if (response !== 0) {

                        if (response === ""DateNotValid"") {

                            $('""#addNewSaleInvoiceForm #Date-valid""').removeClass('hidden');

                            $("".loader"").fadeIn(""slow"");
                            $("".loader"").addClass(""hidden"");

                        }
                        else if (response === ""DataNotValid"") {

                            $(""#addNewSaleInvoiceForm #E");
            WriteLiteral(@"RROR_Data"").removeClass(""hidden"");
                            $("".loader"").fadeIn(""slow"");
                            $("".loader"").addClass(""hidden"");

                        }
                        else if (response === ""ThereIsNoMoneyConvert"") {

                            bootbox.alert({
                                message: "" ");
#nullable restore
#line 3346 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                                      Write(Localizer["ThereIsNoMoneyConvert"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                                className: 'bootbox-class'
                            });
                            $("".loader"").fadeIn(""slow"");
                            $("".loader"").addClass(""hidden"");

                        }
                        else if (response.includes(""YouHaveJust"")) {

                            alert(response);
                            $("".loader"").fadeIn(""slow"");
                            $("".loader"").addClass(""hidden"");

                        }
                        else {

                            $("".loader"").fadeIn(""slow"");
                            $("".loader"").addClass(""hidden"");
                            $('#Guid').val(response);
                            let grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");
                            grid.dataSource.options.transport.read.url = ""/SaleInvoiceDetail/GetAll?saleInvoiceId="" + response;
                            $('#btn-ShowDiscountsList').removeClass('hidden');
 ");
            WriteLiteral(@"                           $('#btn-ShowCostsList').removeClass('hidden');
                            $('#btn-OkAndNew').removeClass('hidden');
                            $('#btn-AddMoneyConvert').removeClass('hidden');
                            grid.addRow();
                            if (RTL === ""True"")
                                grid.editCell($(""#SaleInvoiceDetailKendoGrid td:eq(20)""));
                            else
                                grid.editCell($(""#SaleInvoiceDetailKendoGrid td:eq(2)""));
                        }
                    } else {

                        $(""#addNewSaleInvoiceForm #ERROR_SomeThingWentWrong"").removeClass(""hidden"");
                        $("".loader"").fadeIn(""slow"");
                        $("".loader"").addClass(""hidden"");
                    }
                }
            });

    }

    function FilterProduct(product_list, filter) {

        var filter_list = product_list.filter(function (item) {
            if (this.count <");
            WriteLiteral(@" 20 && item.ProductName.toLowerCase().indexOf(filter) > -1) {
                this.count++;
                return true;
            }

            return false;

        }, { count: 0 });

        return filter_list;

    }

    function ConsiderationEditor(container, options) {
        $('<input id=""Consideration"" name=""' + options.field + '""/>')
            .appendTo(container)
            .kendoTextBox({
            });

    }

    function CurrencyEditor(container, options) {
        let index1 = $(container).closest('td').attr('data-Index');

        let grid1 = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");
        let data1 = grid1.dataSource._data.find(a => a.Index == index1);
        let cuName = data1.get(""CurrencyName"");

        $('<input id=""CurrencyId"" name=""' + options.field + '""/>')
            .appendTo(container)
            .kendoDropDownList({
                dataTextField: ""Name"",
                dataValueField: ""Name"",
                dataSource: Cu");
            WriteLiteral(@"rrency_list,
                change: selectCurrency,
                value: cuName
            });

        function selectCurrency(e) {

            let index = $(""#CurrencyId"").closest('td').attr('data-Index');
            debugger;
            var grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");
            let data = grid.dataSource._data.find(a => a.Index == index);

            let dateitem = this.dataItem(e.item);

            if (data.get(""CurrencyNameId"") != dateitem.Id) {
                
                data.set(""Currency"", dateitem.Name);
                data.set(""CurrencyName"", dateitem.Name);
                data.set(""CurrencyNameId"", dateitem.Id);

                let purchasePrice = data.get(""PurchasePrice"");

                let purchaseCurencyName = purchasePrice.split("" "");

                if (dateitem.Name == purchaseCurencyName[1]) {
                    
                    data.set(""MoneyConvertTxtId"", """");
                    data.set(""MoneyConvertT");
            WriteLiteral(@"xt"", ""1 "" + purchaseCurencyName[1] + "" = 1 "" + purchaseCurencyName[1]);
                    data.set(""MoneyConvert"", ""1 "" + purchaseCurencyName[1] + "" = 1 "" + purchaseCurencyName[1]);

                    let firstPrice = data.get(""PurchasePriceNumeric"");

                    let profit = data.get(""Profit"");

                    let sale = firstPrice + ((profit / 100) * firstPrice);

                    data.set(""SalePrice"", sale.toFixed(2));
                    data.set(""OldSalePrice"", sale.toFixed(2) + dateitem.Name);

                    WholePrice(index);

                    if (data.get(""Guid"") != """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                        expandedRows = [];

                        AddNewSaleInvoiceDetail(data, index, false, false);

                    }

                }
                else {

                    let guid = data.get(""PurchaseInvoiceDetailId"");
      ");
            WriteLiteral(@"              let currencyId = dateitem.Id;
                    let saleType = data.get(""InvoiceType"");

                    let priceTypeText = $(""#SalePriceTypeId"").data(""kendoDropDownList"").dataItem();

                    let priceType = priceTypeText.Name;

                    $.ajax({
                        type: ""Get"",
                        data: { PurchaseInvoiceDetailId: guid, CurrencyId: currencyId, PriceType: priceType, SaleType: saleType},
                        url: ""/PurchaseInvoiceDetail/GetPurchaseInvoiceDetailSalePrice"",
                        success: function (response) {
                            if (response == null) {
                                debugger;
                                let moneyconvert = MoneyConvert_list.find(a => a.BaseCurrencyName == dateitem.Name && a.DestCurrencyName == purchaseCurencyName[1]);

                                if (moneyconvert == undefined || moneyconvert == null) {

                                    moneyconvert = Mo");
            WriteLiteral(@"neyConvert_list.find(a => a.BaseCurrencyName == purchaseCurencyName[1] && a.DestCurrencyName == dateitem.Name);

                                }

                                if (moneyconvert == undefined || moneyconvert == null) {

                                    $(""#MoneyConvertModal #Date-valid"").addClass(""hidden"");
                                    $(""#MoneyConvertModal #ERROR_Data"").addClass(""hidden"");
                                    $(""#MoneyConvertModal #ERROR_SomeThingWentWrong"").addClass(""hidden"");

                                    var link = ""/MoneyConvert/AddNewModal"";
                                    $("".loader"").removeClass(""hidden"");


                                    $('#MoneyConvertModal').modal('toggle');
                                    $('#MoneyConvertModal-body').load(link, function () {
                                        $("".loader"").fadeIn(""slow"");
                                        $("".loader"").addClass(""hidden"");

                ");
            WriteLiteral(@"                        let firstCurrency = data.get(""FirstCurrencyId"");

                                        let base = $(""#BaseCurrencyId"").data(""kendoDropDownList"");
                                        base.value(firstCurrency);
                                        //base.enable(false);

                                        let dest = $(""#DestCurrencyId"").data(""kendoDropDownList"");
                                        dest.value(dateitem.Id);
                                        //dest.enable(false);

                                        //$(""#btn-MoneyConvertModal-close"").attr('disabled', true);
                                        //$(""#MoneyConvertModal-header-closebtn"").attr('disabled', true);

                                    });

                                }
                                else {

                                    data.set(""MoneyConvertTxtId"", moneyconvert.Guid);

                                    //let firstconvert = MoneyCon");
            WriteLiteral(@"vert_list.find(a => a.Guid == moneyConvert);
                                    data.set(""MoneyConvertTxt"", moneyconvert.ShowMoneyConvert);
                                    data.set(""MoneyConvert"", moneyconvert.ShowMoneyConvert);
                                    let splitedMoneyConvert = data.get(""MoneyConvertTxt"").split('=');

                                    let base = splitedMoneyConvert[0].match(/\d/g);
                                    let dest = splitedMoneyConvert[1].match(/\d/g);

                                    let baseAmount = base.join("""");
                                    let baseCurrency = splitedMoneyConvert[0].split("" "")[1];
                                    let destAmount = dest.join("""");

                                    let firstPrice = data.get(""PurchasePriceNumeric"");

                                    let profit = data.get(""Profit"");



                                    if (dateitem.Name == baseCurrency) {

                                  ");
            WriteLiteral(@"      min = firstPrice * (baseAmount / destAmount);
                                        let sale = (min + ((profit / 100) * min));
                                        data.set(""SalePrice"", sale.toFixed(2));

                                        let old = sale + dateitem.Name;
                                        data.set(""OldSalePrice"", old);

                                    }
                                    else {

                                        min = firstPrice * (destAmount / baseAmount);
                                        let sale = (min + ((profit / 100) * min));
                                        data.set(""SalePrice"", sale.toFixed(2));

                                        let old = sale + dateitem.Name;
                                        data.set(""OldSalePrice"", old);
                                    }


                                }

                            }
                            else {
                          ");
            WriteLiteral(@"      data.set(""MoneyConvertTxtId"", response);
                                let firstconvert = MoneyConvert_list.find(a => a.Guid == response);
                                data.set(""MoneyConvertTxt"", firstconvert.ShowMoneyConvert);
                                data.set(""MoneyConvert"", firstconvert.ShowMoneyConvert);

                                let splitedMoneyConvert = data.get(""MoneyConvertTxt"").split('=');

                                let base = splitedMoneyConvert[0].match(/\d/g);
                                let dest = splitedMoneyConvert[1].match(/\d/g);

                                let baseAmount = base.join("""");
                                let baseCurrency = splitedMoneyConvert[0].split("" "")[1];
                                let destAmount = dest.join("""");

                                let firstPrice = data.get(""PurchasePriceNumeric"");

                                let profit = data.get(""Profit"");

                                

             ");
            WriteLiteral(@"                   if (dateitem.Name == baseCurrency) {
                                    
                                    min = firstPrice * (baseAmount / destAmount);
                                    let sale = (min + ((profit / 100) * min));
                                    data.set(""SalePrice"", sale.toFixed(2));

                                    let old = sale + dateitem.Name;
                                    data.set(""OldSalePrice"", old);
                                    
                                }
                                else {

                                    min = firstPrice * (destAmount / baseAmount);
                                    let sale = (min + ((profit / 100) * min));
                                    data.set(""SalePrice"", sale.toFixed(2));

                                    let old = sale + dateitem.Name;
                                    data.set(""OldSalePrice"", old);
                                }

                   ");
            WriteLiteral(@"             
                            }

                            WholePrice(index);

                            if (data.get(""Guid"") != """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                                expandedRows = [];

                                AddNewSaleInvoiceDetail(data, index, false, false);

                            }
                        }
                    });

                }


                
            }


        }

    }

    function MoneyConvertEditor(container, options) {

        let index1 = $(container).closest('td').attr('data-Index');

        let grid1 = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");
        let data1 = grid1.dataSource._data.find(a => a.Index == index1);
        let cuName = data1.get(""MoneyConvertTxt"");

        let number = Currency_list.length;

        if (number === 2) {
            $('<input id=""MoneyCo");
            WriteLiteral(@"nvertId"" name=""' + options.field + '""/>')
                .appendTo(container)
                .kendoDropDownList({
                    dataTextField: ""ShowMoneyConvert"",
                    dataValueField: ""ShowMoneyConvert"",
                    dataSource: MoneyConvert_list,
                    change: selectCurrency,
                    value: cuName
                });
        }
        else {

            let index = $(""#MoneyConvertId"").closest('td').attr('data-Index');

            //var data = grid.dataSource.at(index);
            var data = getGridData(index);
            let base = data.get(""PurchasePriceCurrencyId"");
            let dest = data.get(""CurrencyNameId"");

            $('<input id=""MoneyConvertId"" name=""' + options.field + '""/>')
                .appendTo(container)
                .kendoDropDownList({
                    dataTextField: ""ShowMoneyConvert"",
                    dataValueField: ""ShowMoneyConvert"",
                    dataSource: {
                ");
            WriteLiteral(@"        transport: {
                            read: {
                                url: ""/MoneyConvert/GetLatestMoneyConverts?baseCurrencyId="" + base + ""&&destCurrencyId="" + dest,
                            }
                        }
                    },
                    change: selectCurrency

                });

        }

        function selectCurrency(e) {
            let dateitem = this.dataItem(e.item);
            let index = parseInt($(""#MoneyConvertId"").closest('td').attr('data-Index'));
            var data = getGridData(index);

            if (data.get(""MoneyConvertTxtId"") != dateitem.Guid) {
                data.set(""MoneyConvert"", dateitem.ShowMoneyConvert);
                data.set(""MoneyConvertTxt"", dateitem.ShowMoneyConvert);
                data.set(""MoneyConvertTxtId"", dateitem.Guid);


                let splitedMoneyConvert = dateitem.ShowMoneyConvert.split('=');

                let base = splitedMoneyConvert[0].match(/\d/g);
                let d");
            WriteLiteral(@"est = splitedMoneyConvert[1].match(/\d/g);

                let baseAmount = base.join("""");
                let baseCurrency = splitedMoneyConvert[0].split("" "")[1];
                let destAmount = dest.join("""");

                let firstPrice = data.get(""PurchasePriceNumeric"");

                let profit = data.get(""Profit"");

                let salePrice = firstPrice + ((profit / 100) * firstPrice);

                //let salePrice = data.get(""FirstPrice"").split(' ');
                let currency = data.get(""CurrencyName"");

                if (currency == baseCurrency) {

                    min = salePrice * (baseAmount / destAmount);

                }
                else {

                    min = salePrice * (destAmount / baseAmount);
                }

                data.set(""SalePrice"", min.toFixed(2));

                //var count = data.get(""Num"");
                //var price = min * count;
                //data.set(""WholesalePrice"", price.toFixed(2));

     ");
            WriteLiteral(@"           WholePrice(index);

                let purchasePriceProfit = data.get(""PurchasePrice"");

                let PPrice = purchasePriceProfit.match(/\d/g);
                PPrice = PPrice.join("""");

                let PCurrency = purchasePriceProfit.split("" "");


                let saleCurrencyProfit = data.get(""CurrencyName"");
                let moneyConvertProfit = data.get(""MoneyConvertTxt"");

                setProfit(parseFloat(PPrice), PCurrency[1], parseFloat(min), saleCurrencyProfit, moneyConvertProfit, index);


                if (data.get(""Guid"") != """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                    expandedRows = [];

                    AddNewSaleInvoiceDetail(data, index, false, false);
                }
            }

        }

    }

    function ProductEditor(container, options) {


        $('<input id=""ProductName"" name=""' + options.field + '""/>')
     ");
            WriteLiteral(@"       .appendTo(container)
            .kendoAutoComplete({
                dataTextField: ""ProductName"",
                filter: ""contains"",
                close: OnCloseProduct,
                select: OnCloseProduct
                //dataSource: data,
                //separator: "", ""
                //dataSource: {
                //    //type: ""odata"",
                //    transport: {
                //        read: ""/Product/GetAllProductsWithBarcodeForFilter""
                //    }
                //}
            });
        $('#ProductName').on('input', function () {

            $(""#Product-box"").addClass(""hidden"");
            $(""#ProductStock-box"").addClass(""hidden"");
            $(""#ProductExist-box"").addClass(""hidden"");

            var txt = $(""#ProductName"").val();

            var filter_list = FilterProduct(productName_list, txt);

            $(""#ProductName"").data(""kendoAutoComplete"").dataSource.data(filter_list);

        });

        $(""#ProductName"").on(");
            WriteLiteral(@"""keypress"", function (e) {
            if (e.which === 13) {
                OnCloseProduct();
                var grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");
                let RTL = $(""#RTL"").attr(""data-Value"");
                if (RTL === ""True"")
                    grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq(19)""));
                else
                    grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq(4)""));


                //grid.editCell($(""#SaleInvoiceDetailKendoGrid td:eq(19)""));
            }
        });
    }

    let selected = false;

    function OnCloseProduct(e) {
        setTimeout(() => {
            $(""#ProductNameText"").text($(""#ProductName"").val());
            if (!selected) {
                selected = true;
                var txt = $(""#ProductName"").val().toString();
                let fr;
                var reg = /^\d+$/;
                let digi = reg.test(txt);
                if");
            WriteLiteral(@" (digi) {
                    fr = productWithBorcode_list.find(element => element.Barcode === txt);
                    if (fr === null || fr === undefined) {
                        //$(""#ProductName"").val("""");
                        $(""#ProductExist-box"").removeClass(""hidden"");
                        return;
                    }
                    $(""#ProductName"").val(fr.ProductName);
                    $(""#ProductNameText"").text(fr.ProductName);
                }
                else {
                    fr = productName_list.find(element => element.ProductName === txt);
                    if (txt === """")
                        return;
                    if (fr === null || fr === undefined) {
                        //$(""#ProductName"").val("""");
                        $(""#ProductExist-box"").removeClass(""hidden"");
                        return;
                    }
                    //grid.editCell($(""#SaleInvoiceDetailKendoGrid td:eq(9)""));
                }

          ");
            WriteLiteral(@"      let productId = fr.ProductId;

                let exp = $(""#NearestExpire"").is("":checked"");
                let latsetPrice = $(""#LatestSellingPrice"").is("":checked"");


                if (exp) {
                    GetProductDetails(productId, latsetPrice);
                }
                else {

                    GetProductExpires(productId);

                }


            }
            else {
                selected = false;
            }

        })

        SetTotalPrice();

    }

    function GetProductDetails(productId, latsetPrice) {

        let saleTypeText = $(""#SalePriceTypeId"").data(""kendoDropDownList"").dataItem();

        let saleType = saleTypeText.Name;

        //let saleType = $(""#SalePriceTypeId"").data(""kendoDropDownList"").text();
        $("".loader"").removeClass(""hidden"");


        $.ajax({
            data: { ProductId: productId, LatestPrice: latsetPrice, SaleType: saleType },
            url: ""/Product/GetProductDetails"",
        ");
            WriteLiteral(@"    success: function (response) {

                $("".loader"").fadeIn(""slow"");
                $("".loader"").addClass(""hidden"");
                if (response != 0) {
                    SetProductDetails(response, productId);
                    let RTL = $(""#RTL"").attr(""data-Value"");
                    let newLine = $(""#CreateLine"").is("":checked"");
                    if (newLine) {

                        var data = getGridData(0);

                        const freeNumChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='ProductName']"");

                        const freeNumIndex = $(freeNumChild).parent().children().index(freeNumChild);

                        AddNewSaleInvoiceDetail(data,0,false,true);
                        let grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");

                        if (RTL === ""True"")
                            grid.editCell($(""#SaleInvoiceDetailKendoGrid td:eq("" + freeNumIndex + "")""));
                        else
     ");
            WriteLiteral(@"                       grid.editCell($(""#SaleInvoiceDetailKendoGrid td:eq("" + freeNumIndex + "")""));


                        //grid.editCell($(""#SaleInvoiceDetailKendoGrid td:eq(21)""));
                    }
                    else {
                        let grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");

                        const freeNumChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='Num']"");

                        const freeNumIndex = $(freeNumChild).parent().children().index(freeNumChild);

                        if (RTL === ""True"")
                            grid.editCell($(""#SaleInvoiceDetailKendoGrid td:eq("" + freeNumIndex + "")""));
                        else
                            grid.editCell($(""#SaleInvoiceDetailKendoGrid td:eq("" + freeNumIndex + "")""));


                        //grid.editCell($(""#SaleInvoiceDetailKendoGrid td:eq(19)""));
                    }

                }
                else {
                    $(""#Produc");
            WriteLiteral(@"tStock-box"").removeClass(""hidden"");
                }
            }
        });

    }

    function GetProductExpires(productId) {

        $('#ExpireListModal').modal('toggle');
        var link = ""/Product/GetAllProductExpireListModal?Id="";
        $("".loader"").removeClass(""hidden"");
        $('#ExpireListModal-body').load(link + productId + '', function () {
            $("".loader"").fadeIn(""slow"");
            $("".loader"").addClass(""hidden"");
            $("".modal-backdrop:last"").css('z-index', '998');
        });

    }

    function closedExpireListModal() {

        $('#ExpireListModal').modal('hide');
        $('#ExpireListModal-body').empty();

    }

    function SetProductDetails(response, productId) {


        var grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");
        var data = grid.dataSource.at(0);
        var count = 1;
        var whole = response.SellingPrice;
        var price = whole * count;
        let wholeSale;

        if (price) {
  ");
            WriteLiteral(@"          wholeSale = price.toFixed(2);
        }

        let purchasePrice = response.PurchasePriceTxt;

        let purchaseCurencyName = purchasePrice.split("" "");
        let MoneyConvertTxtId = """";
        let MoneyConvertTxt = """";
        let MoneyConvert = """";
        let profit = """";
        let min = response.SellingPrice;

        if (response.CurrencyName == purchaseCurencyName[1]) {

            MoneyConvertTxtId = """";
            MoneyConvertTxt = ""1 "" + purchaseCurencyName[1] + "" = 1 "" + purchaseCurencyName[1];
            MoneyConvert = ""1 "" + purchaseCurencyName[1] + "" = 1 "" + purchaseCurencyName[1];
            profit = ((response.SellingPrice - parseInt(response.PurchasePrice)) / parseInt(response.PurchasePrice)) * 100;

        }
        else {

            let number = Currency_list.length;

            if (number === 2) {

                if (response.MoneyConvertId != null) {

                    let salePrice = response.SellingPrice;

                    le");
            WriteLiteral(@"t splitedMoneyConvert = MoneyConvert_list.find(a => a.Guid == response.MoneyConvertId);

                    try {
                        let baseAmount = splitedMoneyConvert.BaseAmount;
                        let baseCurrency = splitedMoneyConvert.BaseCurrencyName;
                        let destAmount = splitedMoneyConvert.DestAmount;

                        if (response.CurrencyName == baseCurrency) {

                            min = salePrice * (baseAmount / destAmount);

                        }
                        else {

                            min = salePrice * (destAmount / baseAmount);
                        }

                        MoneyConvertTxtId = response.MoneyConvertId;
                        MoneyConvertTxt = splitedMoneyConvert.ShowMoneyConvert;
                        MoneyConvert = splitedMoneyConvert.ShowMoneyConvert;
                        wholeSale = min.toFixed(2);
                    }
                    catch {
                        Mone");
            WriteLiteral(@"yConvertTxtId = """";
                        MoneyConvertTxt = ""1 "" + purchaseCurencyName[1] + "" = 1 "" + purchaseCurencyName[1];
                        MoneyConvert = ""1 "" + purchaseCurencyName[1] + "" = 1 "" + purchaseCurencyName[1];
                        profit = ((response.SellingPrice - parseInt(response.PurchasePrice)) / parseInt(response.PurchasePrice)) * 100;
                    }
                    




                }
                else {
                    MoneyConvertTxtId = MoneyConvert_list[0].Guid;
                    MoneyConvertTxt = MoneyConvert_list[0].ShowMoneyConvert;
                    MoneyConvert = MoneyConvert_list[0].ShowMoneyConvert;
                }


            }
            else {

                MoneyConvertTxtId = """";
                MoneyConvertTxt = """";
                MoneyConvert = """";

            }

        }

        let currencyName;
        let currencyId;
        if (min == response.SellingPrice) {

            currencyName = ");
            WriteLiteral(@"purchaseCurencyName[1];
            currencyId = response.CurrencyId;
        }
        else {
            currencyName = response.CurrencyName;
            currencyId = response.SellingCurrencyId;
        }



        grid.dataSource.add({
            Guid: ""0"",
            PurchaseInvoiceDetailId: response.Guid,
            Index: 0,
            ProductId: productId,
            ProductName: $(""#ProductNameText"").text(),
            ExpireDate: response.ExpireDateTxt,
            Num: 1,
            FreeNum: 0,
            PurchasePrice: response.PurchasePriceTxt,
            SalePrice: min,
            OldSalePrice: min + "" "" + currencyName,
            FirstPrice: response.FirstPrice,
            Discount: 0,
            Currency: currencyName,
            CurrencyName: currencyName,
            CurrencyNameId: currencyId,
            FirstCurrencyId: response.FirstCurrencyId,
            WholesalePrice: wholeSale,
            MoneyConvertTxtId: MoneyConvertTxtId,
           ");
            WriteLiteral(@" MoneyConvertTxt: MoneyConvertTxt,
            MoneyConvert: MoneyConvert,
            FirstMoneyConvertId: MoneyConvertTxtId,
            InvoiceType: response.SaleType,
            Profit: Math.floor(profit),
            PurchasePriceTxt: response.PurchasePrice,
            PurchasePriceNumeric: response.PurchasePrice,
            ChildrenCount: response.ChildrenCount,
            ChildrenGuids: response.ChildrenGuids,
            RemainingNum: response.Stock,
            BujNumber: response.BujNumber
        });

        setTimeout(() => {

            $(""#tostText"").text(response.Consideration);
            $(""#myToast"").css('visibility', 'visible');
            $(""#myToast"").css('opacity', '1');
            setTimeout(() => {
                $(""#myToast"").css('opacity', '0');
                setTimeout(() => {
                    $(""#myToast"").css('visibility', 'hidden');
                }, 500);
            }, 3000);
        });

        $(""#SaleInvoiceDetailModal-ProductStock""");
            WriteLiteral(@").text(response.TotalStock);
        $(""#SaleInvoiceDetailModal-ProductStockOfThisExpire"").text(response.Stock);

        grid.dataSource.remove(data);

    }

    function setProfit(purchase, purchaseCurrency, salePrice, saleCurrency, moneyConvert, index) {

        let min;
        let splitedMoneyConvert = moneyConvert.split('=');

        let base = splitedMoneyConvert[0].match(/\d/g);
        let dest = splitedMoneyConvert[1].match(/\d/g);

        let baseAmount = base.join("""");
        let baseCurrency = splitedMoneyConvert[0].split("" "")[1];

        let destAmount = dest.join("""");
        let destCurrency = splitedMoneyConvert[1].split("" "")[1];

        if (purchaseCurrency == saleCurrency) {

            min = ((salePrice - purchase) / purchase) * 100;

        } else if (saleCurrency == baseCurrency) {

            min = (((salePrice * (destAmount / baseAmount)) - purchase) / purchase) * 100;

        } else {

            min = (((salePrice * (baseAmount / destAmount)");
            WriteLiteral(@") - purchase) / purchase) * 100;
        }

        if (min == 'NaN' || min == 'Infinity')
            min = 0;

        var data = getGridData(index);

        data.set(""Profit"", Math.floor(min));


    }

    function SetSellPrice(profit, purchasePrice, purchaseCurrency, salePrice, saleCurrency, moneyConvert, index) {



        let splitedMoneyConvert = moneyConvert.split('=');

        let base = splitedMoneyConvert[0].match(/\d/g);
        let dest = splitedMoneyConvert[1].match(/\d/g);

        let baseAmount = base.join("""");
        let baseCurrency = splitedMoneyConvert[0].split("" "")[1];

        let destAmount = dest.join("""");
        let destCurrency = splitedMoneyConvert[1].split("" "")[1];

        if (purchaseCurrency == saleCurrency) {

            purchasePrice = purchasePrice;

        } else if (saleCurrency == baseCurrency) {
            purchasePrice = purchasePrice * (baseAmount / destAmount)
            //am = am * purchasePrice / salePrice;

        } el");
            WriteLiteral(@"se {
            purchasePrice = purchasePrice * (destAmount / baseAmount)
            //am = am * salePrice / purchasePrice;
        }
        let am = ((profit / 100) * purchasePrice) + purchasePrice;

        var data = getGridData(index);
        data.set(""SalePrice"", am.toFixed(2));
        //data.set(""SalePriceNum"", am);
    }

    var groupBy = function (xs, key) {
        return xs.reduce(function (rv, x) {
            (rv[x[key]] = rv[x[key]] || []).push(x);
            return rv;
        }, {});
    };

    function SetTotalPricess() {
        let saleInvoice = $(""#Guid"").val();

        $.ajax({
            data: { SaleInvoiceId: saleInvoice },
            url: ""/SaleInvoice/GetTotalPrice"",
            success: function (response) {
                //if (response != 0) {
                if (response == null) {
                    response = 0;
                }

                if (response != 0) {
                    let total = """";
                    total += ""<di");
            WriteLiteral("v class=\'col-sm-12\' style=\'margin:0.5rem 0;align-text:");
#nullable restore
#line 4207 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                                                                                  Write(align);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'>"";

                    let splitted = response.split('_');


                    for (let i = 0; i < splitted.length; i++) {

                        let cur = splitted[i].split(' ');

                        total += ""<h3 id='SaleInvoiceDetailTotalPrice"" + cur[0] +""' class='");
#nullable restore
#line 4216 "H:\Projects\WAS\WPH\Views\Shared\PartialViews\AppWebForms\SaleInvoiceDetail\dgSaleInvoiceDetailGrid.cshtml"
                                                                                      Write(font);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' style = 'font-size: 1.7rem;margin-top:1rem' > "" + cur[0] + "" : "" + cur[1] + ""</h3 > "";


                    }

                    total += ""</div >"";

                    $(""#SaleInvoiceDetailTotalPrice"").html();
                    $(""#SaleInvoiceDetailTotalPrice"").html(total);
                }



                let all = [];

                var grid = $(""#SaleInvoiceDetailKendoGrid"").data(""kendoGrid"");
                var gridData = grid.dataSource;

                for (let i = 0; i < gridData._data.length; i++) {
                    let data = gridData.at(i);
                    let purchase = data.get(""PurchasePriceNumeric"");
                    let currency = data.get(""CurrencyName"");
                    all.push({ currency: currency, purchase: parseFloat(purchase)})
                    //all += parseFloat(purchase);

                }

                let gr = groupBy(all, ""currency"");


                let currencyTotal = 0;

                let allpurchases = []");
            WriteLiteral(@";

                for (let i = 0; i < Object.keys(gr).length; i++) {

                    for (let j = 0; j < gr[Object.keys(gr)[i]].length; j++) {
                        currencyTotal += gr[Object.keys(gr)[i]][j].purchase;
                    }

                    allpurchases.push({ currency: Object.keys(gr)[0], total: currencyTotal });
                }

                if (response != 0) {

                    let splitted = response.split('_');

                    for (let i = 0; i < splitted.length; i++) {

                        let cur = splitted[i].split(' ');

                        if (allpurchases.find(a => a.currency == cur[0]) != undefined) {
                            let purchase = allpurchases.find(a => a.currency == cur[0]).total;
                        }





                    }



                }

                //}
                //else {
                //    $(""#ProductStock-box"").removeClass(""hidden"");
                //}
            }");
            WriteLiteral("\r\n        });\r\n\r\n");
            WriteLiteral(@"
        //total1 = total.substring(0, total.length - 2);

        //$(""#SaleInvoiceDetailTotalPrice"").html();
        //$(""#SaleInvoiceDetailTotalPrice"").html(total);

    }

    ///////////////////////////////////////////detailGrid

    function setDetailProfit(purchase, purchaseCurrency, salePrice, saleCurrency, moneyConvert, index) {
        let min;

        let splitedMoneyConvert = moneyConvert.split('=');

        let base = splitedMoneyConvert[0].match(/\d/g);
        let dest = splitedMoneyConvert[1].match(/\d/g);

        let baseAmount = base.join("""");
        let baseCurrency = splitedMoneyConvert[0].split("" "")[1];

        let destAmount = dest.join("""");
        let destCurrency = splitedMoneyConvert[1].split("" "")[1];

        if (purchaseCurrency == saleCurrency) {

            min = ((salePrice - purchase) / purchase) * 100;

        } else if (saleCurrency == baseCurrency) {

            min = (((salePrice * (destAmount / baseAmount)) - purchase) / purchase) * 10");
            WriteLiteral(@"0;

        } else {

            min = (((salePrice * (baseAmount / destAmount)) - purchase) / purchase) * 100;
        }

        if (min == 'NaN' || min == 'Infinity')
            min = 0;

        return min;

    }

    function SetSellDetailPrice(profit, purchasePrice, purchaseCurrency, salePrice, saleCurrency, moneyConvert, index) {



        let splitedMoneyConvert = moneyConvert.split('=');

        let base = splitedMoneyConvert[0].match(/\d/g);
        let dest = splitedMoneyConvert[1].match(/\d/g);

        let baseAmount = base.join("""");
        let baseCurrency = splitedMoneyConvert[0].split("" "")[1];

        let destAmount = dest.join("""");
        let destCurrency = splitedMoneyConvert[1].split("" "")[1];

        if (purchaseCurrency == saleCurrency) {

            purchasePrice = purchasePrice;

        } else if (saleCurrency == baseCurrency) {
            purchasePrice = purchasePrice * (baseAmount / destAmount)
            //am = am * purchasePrice / saleP");
            WriteLiteral(@"rice;

        } else {
            purchasePrice = purchasePrice * (destAmount / baseAmount)
            //am = am * salePrice / purchasePrice;
        }
        let am = ((profit / 100) * purchasePrice) + purchasePrice;

        return am;

        //var data = getGridData(index);
        //data.set(""SalePrice"", am.toFixed(2));
        //data.set(""SalePriceNum"", am);
    }


    function cellDetailEdits(e) {

        let general;
        let Num = e.container.find(""input[name=Num]"").data(""kendoNumericTextBox"");
        let FreeNum = e.container.find(""input[name=FreeNum]"").data(""kendoNumericTextBox"");
        let Currency = e.container.find(""input[name=Currency]"").data(""kendoDropDownList"");
        let MoneyConvert = e.container.find(""input[name=MoneyConvert]"").data(""kendoDropDownList"");
        let SalePrice = e.container.find(""input[name=SalePrice]"").data(""kendoNumericTextBox"");
        let Discount = e.container.find(""input[name=Discount]"").data(""kendoNumericTextBox"");
        let");
            WriteLiteral(@" WholesalePrice = e.container.find(""input[name=WholesalePrice]"").data(""kendoNumericTextBox"");
        let Profit = e.container.find(""input[name=Profit]"").data(""kendoNumericTextBox"");
        let Consideration = e.container.find(""input[name=Consideration]"").data(""kendoTextBox"");
        let ProductName = e.container.find(""input[name=ProductName]"").data(""kendoAutoComplete"");
        let grid = $(e.container.closest(""div[data-role = 'grid']"")).data(""kendoGrid"");
        let RTL = $(""#RTL"").attr(""data-Value"");

        let lock = $(""#lock"").text();
        if (lock.toLocaleLowerCase() == ""true"") {
            return;
        }

        if (e.model.Guid === """") {

            if (Num !== undefined) {

                general = Num;
            }
            else if (FreeNum !== undefined) {
                general = FreeNum;
            }
            else if (SalePrice !== undefined) {
                general = SalePrice;
            }
            else if (Discount !== undefined) {
       ");
            WriteLiteral(@"         general = Discount;
            }
            else if (WholesalePrice !== undefined) {
                general = WholesalePrice;
            }
            else if (Profit !== undefined) {
                general = Profit;
            }
            else if (Consideration !== undefined) {
                general = Consideration;
            }
            else if (MoneyConvert !== undefined) {
                general = MoneyConvert;
            }
            if (general !== undefined)
                general.enable(false);
        }
        else {

            if (ProductName !== undefined) {
                ProductName.enable(false);
            }
            else if (Num !== undefined) {

                let index = parseInt($(e.container.find(""input[name=Num]"")).closest('td').attr('data-Index'));

                let data = grid.dataSource._data.find(a => a.Index == index);


                let stockSelection = $(""#StockSelection"").text();

                let previuse");
            WriteLiteral(@"Num = data.get(""Num"");

                let max = data.get(""RemainingNum"");

                let stock = data.get(""RemainingNum"");

                $(""#SaleInvoiceDetailModal-ProductStockOfThisExpire"").text(stock);

                if (data.get(""Guid"") != """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                    Num.bind(""change"", function () {
                        AddNewSaleInvoiceDetail(data, index, true, false);

                    });
                }

                $(e.container.find(""input[name=Num]"")).on(""keypress"", function (e) {

                    if (e.which === 13) {

                        let freeNum = data.get(""FreeNum"");

                        if (Num.value() + parseInt(freeNum) > max && max != """") {
                            $(this).focus();
                            if (stockSelection.toLowerCase() == ""stock"") {
                                Num.value(max - freeN");
            WriteLiteral(@"um);
                            }
                            else {
                                Num.value(previuseNum);
                            }
                            return;
                        }

                        let salePrice = data.get(""SalePrice"");
                        let num = data.get(""Num"");
                        let price = salePrice * num;
                        data.set(""WholesalePrice"", price.toFixed(2));

                    }
                });


                $(e.container.find(""input[name=Num]"")).on(""focus"", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
            else if (FreeNum !== undefined) {

                let index = parseInt($(e.container.find(""input[name=FreeNum]"")).closest('td').attr('data-Index'));

                let data = grid.dataSource._data.find(a => a");
            WriteLiteral(@".Index == index);

                let stockSelection = $(""#StockSelection"").text();

                let previuseFreeNum = data.get(""FreeNum"");

                let max = data.get(""RemainingNum"");

                if (data.get(""Guid"") != """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                    FreeNum.bind(""change"", function () {
                        AddNewSaleInvoiceDetail(data, index, true, false);

                    });
                }

                $(e.container.find(""input[name=FreeNum]"")).on(""keypress"", function (e) {

                    if (e.which === 13) {


                        let num = data.get(""Num"");

                        if (stockSelection.toLowerCase() == ""stock"") {
                            if ((FreeNum.value() + parseFloat(num)) > max && max != """") {
                                $(this).focus();
                                FreeNum.value(max - num);
 ");
            WriteLiteral(@"                               return;
                            }
                        }
                        else {
                            if ((FreeNum.value() + parseFloat(num)) > max && max != """") {
                                $(this).focus();
                                FreeNum.value(previuseFreeNum);
                                return;
                            }

                        }


                    }
                });

                $(e.container.find(""input[name=FreeNum]"")).on(""focus"", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
            else if (Currency !== undefined) {

                //Currency.open();

                //let index = parseInt($(e.container.find(""input[name=Currency]"")).closest('td').attr('data-Index'));

                //var data = getGridData(inde");
            WriteLiteral(@"x);

                //const SalePriceChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='SalePrice']"");


                //const SalePriceIndex = $(SalePriceChild).parent().children().index(SalePriceChild);

                //$(e.container.find(""input[name=Currency]"")).parent().on(""keypress"", function (e) {

                //    if (e.which === 13) {

                //        let data_zero = getGridData(0);

                //        if (data_zero !== undefined) {
                //            index += 1;
                //        }

                //        if (RTL === ""True"")
                //            grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + SalePriceIndex + "")""));
                //        else
                //            grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + SalePriceIndex + "")""));

                //    }
                //});

            }
            else if (SalePrice !== undef");
            WriteLiteral(@"ined) {

                let index = parseInt($(e.container.find(""input[name=SalePrice]"")).closest('td').attr('data-Index'));

                let data = grid.dataSource._data.find(a => a.Index == index);

                if (data.get(""Guid"") != """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                    SalePrice.bind(""change"", function () {
                        AddNewSaleInvoiceDetail(data, index, false, false);

                    });
                }

                $(e.container.find(""input[name=SalePrice]"")).on(""keypress"", function (e) {

                    //if (e.which === 13) {

                    //    var data = getGridData(index);

                    //    WholePrice(index);
                    //    let purchasePrice = data.get(""PurchasePrice"");

                    //    let PPrice = purchasePrice.match(/\d/g);
                    //    PPrice = PPrice.join("""");

            ");
            WriteLiteral(@"        //    let PCurrency = purchasePrice.split("" "");


                    //    let salePrice = $(this).val();
                    //    let saleCurrency = data.get(""CurrencyName"");
                    //    let moneyConvert = data.get(""MoneyConvertTxt"");

                    //    setDetailProfit(parseFloat(PPrice), PCurrency[1], parseFloat(salePrice), saleCurrency, moneyConvert, index)


                    //}
                });

                $(e.container.find(""input[name=SalePrice]"")).on(""focus"", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });
            }
            else if (Discount !== undefined) {

                let index = parseInt($(e.container.find(""input[name=Discount]"")).closest('td').attr('data-Index'));

                let data = grid.dataSource._data.find(a => a.Index == index);
                if (data.get(""Guid"") !");
            WriteLiteral(@"= """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                    Discount.bind(""change"", function () {
                        AddNewSaleInvoiceDetail(data, index, false, false);

                    });

                }


                $(e.container.find(""input[name=Discount]"")).on(""keypress"", function (e) {

                    if (e.which === 13) {

                        let data = grid.dataSource._data.find(a => a.Index == index);
                        let sale = data.get('SalePrice');
                        let discount = $(this).val();
                        if (discount > sale) {
                            $(this).select();
                            return;
                        }

                        //let data_zero = getGridData(0);

                        //if (data_zero !== undefined) {
                        //    index += 1;
                        //}

            ");
            WriteLiteral(@"            //let purchasePrice = data.get(""PurchasePrice"");
                        //let saleCurrency = data.get(""CurrencyName"");
                        //let PCurrency = purchasePrice.split("" "");


                        //let currencyEqualant = true;
                        //if (saleCurrency == PCurrency[1]) {
                        //    currencyEqualant = true;
                        //}
                        //else {
                        //    currencyEqualant = false;
                        //}

                        //const MoneyConvertChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='MoneyConvert']"");

                        //const MoneyConvertIndex = $(MoneyConvertChild).parent().children().index(MoneyConvertChild);

                        //const WholesalePriceChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='WholesalePrice']"");

                        //const WholesalePriceIndex = $(WholesalePriceChild).parent().children().index(Wholes");
            WriteLiteral(@"alePriceChild);

                        //if (currencyEqualant)
                        //    grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + WholesalePriceIndex + "")""));
                        //else
                        //    grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + MoneyConvertIndex + "")""));

                        //if (RTL === ""True"") {
                        //    if (currencyEqualant)
                        //        grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + WholesalePriceIndex + "")""));
                        //    else
                        //        grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + MoneyConvertIndex + "")""));

                        //}
                        //else {
                        //    if (currencyEqualant)
                        //        grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" ");
            WriteLiteral(@"+ WholesalePriceIndex + "")""));
                        //    else
                        //        grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + MoneyConvertIndex + "")""));
                        //}

                    }
                });

                $(e.container.find(""input[name=Discount]"")).on(""focus"", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });
            }
            else if (MoneyConvert !== undefined) {

                let index = parseInt($(e.container.find(""input[name=MoneyConvert]"")).closest('td').attr('data-Index'));

                let data = grid.dataSource._data.find(a => a.Index == index);

                let purchasePrice = data.get(""PurchasePrice"");
                let saleCurrency = data.get(""CurrencyName"");
                let PCurrency = purchasePrice.split("" "");

            ");
            WriteLiteral(@"    if (saleCurrency == PCurrency[1]) {
                    MoneyConvert.enable(false);
                }

                //const WholesalePriceChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='WholesalePrice']"");

                //const WholesalePriceIndex = $(WholesalePriceChild).parent().children().index(WholesalePriceChild);

                //MoneyConvert.open();

                //$(e.container.find(""input[name=MoneyConvert]"")).parent().on(""keypress"", function (e) {

                //    if (e.which === 13) {

                //        let data_zero = getGridData(0);

                //        if (data_zero !== undefined) {
                //            index += 1;
                //        }

                //        grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + WholesalePriceIndex + "")""));

                //        //if (RTL === ""True"")
                //        //    grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index)");
            WriteLiteral(@" + "") td:eq(3)""));
                //        //else
                //        //    grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq(11)""));


                //    }
                //});

            }
            else if (WholesalePrice !== undefined) {

                let index = parseInt($(e.container.find(""input[name=WholesalePrice]"")).closest('td').attr('data-Index'));

                let data = grid.dataSource._data.find(a => a.Index == index);

                if (data.get(""Guid"") != """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                    WholesalePrice.bind(""change"", function () {
                        AddNewSaleInvoiceDetail(data, index, false, false);

                    });

                }

                //const ProfitChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='Profit']"");

                //const ProfitIndex = $(ProfitChild).pa");
            WriteLiteral(@"rent().children().index(ProfitChild);


                //$(e.container.find(""input[name=WholesalePrice]"")).on(""keypress"", function (e) {

                //    if (e.which === 13) {

                //        var data = getGridData(index);
                //        let whole = WholesalePrice.value();
                //        let num = data.get(""Num"");
                //        let price = whole / num;
                //        data.set(""SalePrice"", price.toFixed(2));

                //        let purchasePrice = data.get(""PurchasePrice"");

                //        let PPrice = purchasePrice.match(/\d/g);
                //        PPrice = PPrice.join("""");

                //        let PCurrency = purchasePrice.split("" "");

                //        let salePrice = data.get(""SalePrice"");
                //        let saleCurrency = data.get(""CurrencyName"");
                //        let moneyConvert = data.get(""MoneyConvertTxt"");

                //        setProfit(parseFloat(PPri");
            WriteLiteral(@"ce), PCurrency[1], parseFloat(salePrice), saleCurrency, moneyConvert, index);

                //        let data_zero = getGridData(0);

                //        if (data_zero !== undefined) {
                //            index += 1;
                //        }

                //        grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + ProfitIndex + "")""));

                //    }
                //});


                $(e.container.find(""input[name=WholesalePrice]"")).on(""focus"", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
            else if (Profit !== undefined) {
                let index = parseInt($(e.container.find(""input[name=Profit]"")).closest('td').attr('data-Index'));

                let data = grid.dataSource._data.find(a => a.Index == index);

                if (data.get(""Guid"")");
            WriteLiteral(@" != """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                    Profit.bind(""change"", function () {
                        let purchasePrice = data.get(""PurchasePrice"");

                        let profit = data.get(""Profit"");

                        let PPrice = purchasePrice.match(/\d/g);
                        PPrice = PPrice.join("""");

                        let PCurrency = purchasePrice.split("" "");

                        let salePrice = data.get(""SalePrice"");
                        let saleCurrency = data.get(""CurrencyName"");
                        let moneyConvert = data.get(""MoneyConvertTxt"");
                        let newsalePrice = SetSellDetailPrice(profit, parseInt(PPrice), PCurrency[1], parseInt(salePrice), saleCurrency, moneyConvert, index);
                        data.set(""SalePrice"", newsalePrice.toFixed(2));
                        AddNewSaleInvoiceDetail(data, index, false, fals");
            WriteLiteral(@"e);

                    });

                }

                //const ConsiderationChild = $(""#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='Consideration']"");

                //const ConsiderationIndex = $(ConsiderationChild).parent().children().index(ConsiderationChild);


                //$(e.container.find(""input[name=Profit]"")).on(""keypress"", function (e) {

                //    if (e.which === 13) {

                //        let data_zero = getGridData(0);

                //        if (data_zero !== undefined) {
                //            index += 1;
                //        }

                //        grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq("" + ConsiderationIndex + "")""));

                //        //if (RTL === ""True"")
                //        //    grid.editCell($(""#SaleInvoiceDetailKendoGrid tr:eq("" + (index) + "") td:eq(1)""));
                //        //else
                //        //    grid.editCell($(""#SaleInvoiceDe");
            WriteLiteral(@"tailKendoGrid tr:eq("" + (index) + "") td:eq(13)""));

                //    }

                //    //SetSellPrice(profit, purchasePrice, purchaseCurrency, salePrice, saleCurrency, moneyConvert, index)
                //});

                $(e.container.find(""input[name=Profit]"")).on(""focus"", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
            else if (Consideration !== undefined) {

                let index = parseInt($(e.container.find(""input[name=Consideration]"")).closest('td').attr('data-Index'));

                $(e.container.find(""input[name=Consideration]"")).on(""keypress"", function (e) {

                    if (e.which === 13) {

                        let ms = $(this).val();
                        let data = grid.dataSource._data.find(a => a.Index == index);
                        data.set(""Consideration"", ms)");
            WriteLiteral(@";

                        AddNewSaleInvoiceDetail(data, index, true, true);

                    }
                });

                $(e.container.find(""input[name=Consideration]"")).on(""focus"", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
        }


    }

    function datasourceDetailFinish(e) {

        for (let i = 0; i < e.response.length; i++) {

            let purchasePrice = e.response[i].PurchasePrice;


            let PPrice = purchasePrice.match(/\d/g);

            if (PPrice != null) {
                PPrice = PPrice.join("""");

                let PCurrency = purchasePrice.split("" "");


                let salePrice = e.response[i].SalePrice;
                let saleCurrency = e.response[i].CurrencyName;
                let moneyConvert = e.response[i].MoneyConvertTxt;

                let min;
");
            WriteLiteral(@"
                let splitedMoneyConvert = moneyConvert.split('=');

                let base = splitedMoneyConvert[0].match(/\d/g);
                let dest = splitedMoneyConvert[1].match(/\d/g);

                let baseAmount = base.join("""");
                let baseCurrency = splitedMoneyConvert[0].split("" "")[1];

                let destAmount = dest.join("""");
                let destCurrency = splitedMoneyConvert[1].split("" "")[1];

                if (PCurrency[1] == saleCurrency) {

                    min = ((salePrice - parseFloat(PPrice)) / parseFloat(PPrice)) * 100;

                } else if (saleCurrency == baseCurrency) {

                    min = (((salePrice * (destAmount / baseAmount)) - parseFloat(PPrice)) / parseFloat(PPrice)) * 100;

                } else {

                    min = (((salePrice * (baseAmount / destAmount)) - parseFloat(PPrice)) / parseFloat(PPrice)) * 100;
                }

                if (min == 'NaN' || min == 'Infinity')
              ");
            WriteLiteral(@"      min = 0;

                e.response[i].Profit = Math.floor(min);

            }

        }

    }

    function CurrencyDetailEditor(container, options) {
        let index1 = $(container).closest('td').attr('data-Index');

        let grid1 = $(container).closest(""div[data-role = 'grid']"").data(""kendoGrid"");
        let data1 = grid1.dataSource._data.find(a => a.Index == index1);
        let cuName = data1.get(""CurrencyName"");

        $('<input id=""CurrencyId"" name=""' + options.field + '""/>')
            .appendTo(container)
            .kendoDropDownList({
                dataTextField: ""Name"",
                dataValueField: ""Name"",
                dataSource: Currency_list,
                change: selectCurrency,
                value: cuName
            });

        function selectCurrency(e) {
            let index = $(""#CurrencyId"").closest('td').attr('data-Index');

            var grid = $(container).closest(""div[data-role = 'grid']"").data(""kendoGrid"");
        ");
            WriteLiteral(@"    let data = grid.dataSource._data.find(a => a.Index == index);

            let dateitem = this.dataItem(e.item);

            if (data.get(""CurrencyNameId"") != dateitem.Id) {

                data.set(""Currency"", dateitem.Name);
                data.set(""CurrencyName"", dateitem.Name);
                data.set(""CurrencyNameId"", dateitem.Id);

                let purchasePrice = data.get(""PurchasePrice"");

                let purchaseCurencyName = purchasePrice.split("" "");

                if (dateitem.Name == purchaseCurencyName[1]) {

                    data.set(""MoneyConvertTxtId"", """");
                    data.set(""MoneyConvertTxt"", ""1 "" + purchaseCurencyName[1] + "" = 1 "" + purchaseCurencyName[1]);
                    data.set(""MoneyConvert"", ""1 "" + purchaseCurencyName[1] + "" = 1 "" + purchaseCurencyName[1]);

                    let firstPrice = data.get(""PurchasePriceNumeric"");

                    let profit = data.get(""Profit"");

                    let sale = firstPrice + ((");
            WriteLiteral(@"profit / 100) * firstPrice);

                    data.set(""SalePrice"", sale.toFixed(2));
                    data.set(""OldSalePrice"", sale.toFixed(2) + dateitem.Name);

                    WholePrice(index);

                    if (data.get(""Guid"") != """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                        expandedRows = [];
                        AddNewSaleInvoiceDetail(data, index, false, false);

                    }

                }
                else {

                    let guid = data.get(""PurchaseInvoiceDetailId"");
                    let currencyId = dateitem.Id;
                    let saleType = data.get(""InvoiceType"");

                    let priceTypeText = $(""#SalePriceTypeId"").data(""kendoDropDownList"").dataItem();

                    let priceType = priceTypeText.Name;

                    $.ajax({
                        type: ""Get"",
                        data");
            WriteLiteral(@": { PurchaseInvoiceDetailId: guid, CurrencyId: currencyId, PriceType: priceType, SaleType: saleType },
                        url: ""/PurchaseInvoiceDetail/GetPurchaseInvoiceDetailSalePrice"",
                        success: function (response) {
                            if (response == null) {

                                let moneyconvert = MoneyConvert_list.find(a => a.BaseCurrencyName == dateitem.Name && a.DestCurrencyName == purchaseCurencyName[1]);

                                if (moneyconvert == undefined || moneyconvert == null) {

                                    moneyconvert = MoneyConvert_list.find(a => a.BaseCurrencyName == purchaseCurencyName[1] && a.DestCurrencyName == dateitem.Name);

                                }

                                if (moneyconvert == undefined || moneyconvert == null) {

                                    $(""#MoneyConvertModal #Date-valid"").addClass(""hidden"");
                                    $(""#MoneyConvertModal #ERROR_Data");
            WriteLiteral(@""").addClass(""hidden"");
                                    $(""#MoneyConvertModal #ERROR_SomeThingWentWrong"").addClass(""hidden"");

                                    var link = ""/MoneyConvert/AddNewModal"";
                                    $("".loader"").removeClass(""hidden"");


                                    $('#MoneyConvertModal').modal('toggle');
                                    $('#MoneyConvertModal-body').load(link, function () {
                                        $("".loader"").fadeIn(""slow"");
                                        $("".loader"").addClass(""hidden"");

                                        let firstCurrency = data.get(""FirstCurrencyId"");

                                        let base = $(""#BaseCurrencyId"").data(""kendoDropDownList"");
                                        base.value(firstCurrency);
                                        //base.enable(false);

                                        let dest = $(""#DestCurrencyId"").data(""kendoDropDownList"")");
            WriteLiteral(@";
                                        dest.value(dateitem.Id);
                                        //dest.enable(false);

                                        //$(""#btn-MoneyConvertModal-close"").attr('disabled', true);
                                        //$(""#MoneyConvertModal-header-closebtn"").attr('disabled', true);

                                    });

                                }
                                else {

                                    data.set(""MoneyConvertTxtId"", moneyConvert);

                                    //let firstconvert = MoneyConvert_list.find(a => a.Guid == moneyConvert);
                                    data.set(""MoneyConvertTxt"", moneyConvert.ShowMoneyConvert);
                                    data.set(""MoneyConvert"", moneyConvert.ShowMoneyConvert);

                                }

                            }
                            else {
                                data.set(""MoneyConvertTxtId"", respon");
            WriteLiteral(@"se);
                                let firstconvert = MoneyConvert_list.find(a => a.Guid == response);
                                data.set(""MoneyConvertTxt"", firstconvert.ShowMoneyConvert);
                                data.set(""MoneyConvert"", firstconvert.ShowMoneyConvert);

                                let splitedMoneyConvert = data.get(""MoneyConvertTxt"").split('=');

                                let base = splitedMoneyConvert[0].match(/\d/g);
                                let dest = splitedMoneyConvert[1].match(/\d/g);

                                let baseAmount = base.join("""");
                                let baseCurrency = splitedMoneyConvert[0].split("" "")[1];
                                let destAmount = dest.join("""");

                                let firstPrice = data.get(""PurchasePriceNumeric"");

                                let profit = data.get(""Profit"");



                                if (dateitem.Name == baseCurrency) {

               ");
            WriteLiteral(@"                     min = firstPrice * (baseAmount / destAmount);
                                    let sale = (min + ((profit / 100) * min));
                                    data.set(""SalePrice"", sale.toFixed(2));

                                    let old = sale + dateitem.Name;
                                    data.set(""OldSalePrice"", old);

                                }
                                else {

                                    min = firstPrice * (destAmount / baseAmount);
                                    let sale = (min + ((profit / 100) * min));
                                    data.set(""SalePrice"", sale.toFixed(2));

                                    let old = sale + dateitem.Name;
                                    data.set(""OldSalePrice"", old);
                                }


                            }

                            WholePrice(index);

                            if (data.get(""Guid"") != """" && data.get(""Guid"") != ""0");
            WriteLiteral(@"0000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {
                                expandedRows = [];
                                AddNewSaleInvoiceDetail(data, index, false, false);

                            }
                        }
                    });

                }



            }


        }

    }

    function MoneyConvertDetailEditor(container, options) {
        
        let index1 = $(container).closest('td').attr('data-Index');

        let grid1 = $(container).closest(""div[data-role = 'grid']"").data(""kendoGrid"");
        let data1 = grid1.dataSource._data.find(a => a.Index == index1);
        let cuName = data1.get(""MoneyConvertTxt"");

        let number = Currency_list.length;

        if (number === 2) {
            $('<input id=""MoneyConvertId"" name=""' + options.field + '""/>')
                .appendTo(container)
                .kendoDropDownList({
                    dataTextField: ""ShowMoneyCon");
            WriteLiteral(@"vert"",
                    dataValueField: ""ShowMoneyConvert"",
                    dataSource: MoneyConvert_list,
                    change: selectCurrency,
                    value: cuName
                });
        }
        else {

            let index = $(""#MoneyConvertId"").closest('td').attr('data-Index');

            //var data = grid.dataSource.at(index);
            var data = getGridData(index);
            let base = data.get(""PurchasePriceCurrencyId"");
            let dest = data.get(""CurrencyNameId"");

            $('<input id=""MoneyConvertId"" name=""' + options.field + '""/>')
                .appendTo(container)
                .kendoDropDownList({
                    dataTextField: ""ShowMoneyConvert"",
                    dataValueField: ""ShowMoneyConvert"",
                    dataSource: {
                        transport: {
                            read: {
                                url: ""/MoneyConvert/GetLatestMoneyConverts?baseCurrencyId="" + base + ""&&dest");
            WriteLiteral(@"CurrencyId="" + dest,
                            }
                        }
                    },
                    change: selectCurrency

                });

        }

        function selectCurrency(e) {
            let dateitem = this.dataItem(e.item);
            let index = parseInt($(""#MoneyConvertId"").closest('td').attr('data-Index'));
            var data = grid1.dataSource._data.find(a => a.Index == index);

            if (data.get(""MoneyConvertTxtId"") != dateitem.Guid) {
                data.set(""MoneyConvert"", dateitem.ShowMoneyConvert);
                data.set(""MoneyConvertTxt"", dateitem.ShowMoneyConvert);
                data.set(""MoneyConvertTxtId"", dateitem.Guid);


                let splitedMoneyConvert = dateitem.ShowMoneyConvert.split('=');

                let base = splitedMoneyConvert[0].match(/\d/g);
                let dest = splitedMoneyConvert[1].match(/\d/g);

                let baseAmount = base.join("""");
                let baseCurrency = split");
            WriteLiteral(@"edMoneyConvert[0].split("" "")[1];
                let destAmount = dest.join("""");

                let firstPrice = data.get(""PurchasePriceNumeric"");

                let profit = data.get(""Profit"");

                let salePrice = firstPrice + ((profit / 100) * firstPrice);

                //let salePrice = data.get(""FirstPrice"").split(' ');
                let currency = data.get(""CurrencyName"");

                if (currency == baseCurrency) {

                    min = salePrice * (baseAmount / destAmount);

                }
                else {

                    min = salePrice * (destAmount / baseAmount);
                }

                data.set(""SalePrice"", min.toFixed(2));

                //var count = data.get(""Num"");
                //var price = min * count;
                //data.set(""WholesalePrice"", price.toFixed(2));

                WholePrice(index);

                let purchasePriceProfit = data.get(""PurchasePrice"");

                let PPrice = p");
            WriteLiteral(@"urchasePriceProfit.match(/\d/g);
                PPrice = PPrice.join("""");

                let PCurrency = purchasePriceProfit.split("" "");


                let saleCurrencyProfit = data.get(""CurrencyName"");
                let moneyConvertProfit = data.get(""MoneyConvertTxt"");

                setProfit(parseFloat(PPrice), PCurrency[1], parseFloat(min), saleCurrencyProfit, moneyConvertProfit, index);


                if (data.get(""Guid"") != """" && data.get(""Guid"") != ""00000000-0000-0000-0000-000000000000"" && data.get(""Guid"") != undefined && data.get(""Guid"") != ""0"") {

                    AddNewSaleInvoiceDetail(data, index, false, false);
                }
            }

        }

    }

</script>


<style>

    .k-header a {
        color: black !important;
        font-family: ""Roboto"";
        font-weight: 900;
        font-size: medium;
    }

    th.k-header .k-link {
        color: white !important;
        font-family: ""Roboto"" !important;
        font-weight: 900");
            WriteLiteral(@" !important;
        font-size: 1.3rem !important;
    }

    .k-grid .k-hierarchy-col {
        width: 0;
        /*display: none;*/
    }

    .k-grid .k-detail-row .k-detail-cell {
        width: 0;
        /*display: none;*/
    }
</style>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public WPH.Resources.SharedViewLocalizer Localizer { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IHttpContextAccessor HttpContextAccessor { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Guid> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
