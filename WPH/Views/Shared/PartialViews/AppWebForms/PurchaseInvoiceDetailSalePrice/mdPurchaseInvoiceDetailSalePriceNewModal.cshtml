@model WPH.Models.PurchaseInvoiceDetailSalePrice.PurchaseInvoiceDetailSalePriceViewModel
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject WPH.Resources.SharedViewLocalizer Localizer

@{
    string textalign = "";
    if (HttpContextAccessor.HttpContext.Session.GetString("culture") == "en")
    {
        textalign = " text-align: left; ";
    }
    else
    {
        textalign = " text-align: right; ";
    }
}

<script>

    function CurrencyIdChange(e) {
        var dataItem = this.dataItem(e.item);
        var currency = $("#BaseCurrencyId").val();

        var moneyConvert = $("#MoneyConvertId").data("kendoDropDownList");

        $("#lblDestAmount").text(dataItem.Name);
        if (dataItem.Id == currency || dataItem.Id == '') {

            moneyConvert.dataSource.data("");
            $("#MoneyConvertContainer").addClass("hidden");

        } else {

            $(".loader").removeClass("hidden");
            $.ajax({
                type: "Get",
                url: "/MoneyConvert/GetLatestMoneyConverts",
                data: {
                    baseCurrencyId: currency,
                    destCurrencyId: dataItem.Id,
                    moneyConvertId: '@Model.MoneyConvertId'
                },
                success: function (response) {

                    moneyConvert.dataSource.data(response);
                    moneyConvert.value(`${$("#money").val()}`);
                    moneyConvert.trigger("change");

                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                }
            });
        }

        CheckCurrency();
    }

    function MoneyConvertIdChange(e) {

        var dataItem = this.dataItem(e.item);

        if (dataItem.Guid == '') {
            $("#MoneyConvertContainer").removeClass("hidden");

            //$('#BaseAmount').data("kendoNumericTextBox").value(1);
            //$('#DestAmount').data("kendoNumericTextBox").value(1);

            $('#BaseAmount').data("kendoNumericTextBox").value($("#BaseAmountTxt").val());
            $('#DestAmount').data("kendoNumericTextBox").value($("#DestAmountTxt").val());

        } else {

            let base_currency = $("#CurrencyName").val();
            if (base_currency == dataItem.BaseCurrencyName) {
                $('#BaseAmount').data("kendoNumericTextBox").value(dataItem.BaseAmount);
                $('#DestAmount').data("kendoNumericTextBox").value(dataItem.DestAmount);

                $("#lblBaseAmount").text(dataItem.BaseCurrencyName);
                $("#lblDestAmount").text(dataItem.DestCurrencyName);

            } else {
                $('#DestAmount').data("kendoNumericTextBox").value(dataItem.BaseAmount);
                $('#BaseAmount').data("kendoNumericTextBox").value(dataItem.DestAmount);

                $("#lblDestAmount").text(dataItem.BaseCurrencyName);
                $("#lblBaseAmount").text(dataItem.DestCurrencyName);

            }

            $("#MoneyConvertContainer").addClass("hidden");
        }

        setTimeout(function () {
            CalculatePrice();
        }, 200);
    }

    function TypeIdChange(e) {
        setTimeout(function () {
            CalculatePrice();
        }, 200);
    }

    function CheckCurrency() {
        
        let base_currency = $("#CurrencyName").val();
        let dest_currency = $("#CurrencyId").data("kendoDropDownList").text();
        let dest_currency_id = $("#CurrencyId").val();

        if (base_currency == dest_currency || dest_currency_id == '') {
            $("#ErrorCurrency").removeClass("hidden");
            $('#btn-AddNewSalePrice-accept').attr("disabled", true);
            $("#resultAmount").text('');

        } else {
            $("#ErrorCurrency").addClass("hidden");
            $('#btn-AddNewSalePrice-accept').removeAttr("disabled");

            setTimeout(function () {
                CalculatePrice();
            }, 200);
        }
    }

    function CalculatePrice() {

        let dd = $("#TypeId").data("kendoDropDownList").dataItem();
        let type = dd.Name;
        let price = 0;
        if (type == 'WholePrice') {
            price = Number($("#WholeSellPrice").val());

        } else if (type == 'MiddelPrice') {
            price = Number($("#MiddleSellPrice").val());

        } else {

            price = Number($("#SellingPrice").val());
        }

        let result = 0;
        let main_currency = $("#CurrencyName").val();
        let base_currency = $("#lblBaseAmount").text();
        let dest_currency = $("#lblDestAmount").text();
        let base_amount = Number($('#BaseAmount').val());
        let dest_amount = Number($('#DestAmount').val());

        if (main_currency == base_currency) {

            result = price * dest_amount / base_amount;

        } else if (main_currency == dest_currency) {

            result = price * base_amount / dest_amount;
        }

        if (isNaN(result))
            result = 0;

        if (result < 1) {
            $("#resultAmount").removeClass("light-grey");
            $("#resultAmount").addClass("red");

        } else {
            $("#resultAmount").removeClass("red");
            $("#resultAmount").addClass("light-grey");
        }


        $("#resultAmount").text(`result : ${parseFloat(result).toLocaleString('en')}`);
    }

    function CurrencyIdDataBound(e) {
        CheckCurrency();
    }

</script>

<div id="signup-box" class="signup-box no-border">
    <div class="widget-body">
        <div class="widget-main">
            <form id="addNewSalePriceForm">
                <fieldset>
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.Guid)
                    @Html.HiddenFor(m => m.PurchaseInvoiceDetailId)
                    @Html.HiddenFor(m => m.BaseCurrencyId)
                    @Html.HiddenFor(m => m.CurrencyName)
                    @Html.HiddenFor(m => m.SellingPrice)
                    @Html.HiddenFor(m => m.MiddleSellPrice)
                    @Html.HiddenFor(m => m.WholeSellPrice)
                    @Html.HiddenFor(m => m.BaseAmountTxt)
                    @Html.HiddenFor(m => m.DestAmountTxt)
                    <input type="hidden" value="@Model.MoneyConvertId" id="money" />

                    <label class="block clearfix">
                        <label class="block clearfix">
                            <label for="form-field-8"> @Localizer["Type"] @Localizer["SalePrice"] :</label>
                            <span class="block input-icon input-icon-right">

                                @(Html.Kendo().DropDownList()
                                .Name("TypeId")
                                .DataTextField("ShowName")
                                .DataValueField("Id")
                                .Events(e => e.Change("TypeIdChange"))
                                .DataSource(source =>
                                {
                                    source.Read(read =>
                                    {
                                        read.Action("GetAllSalePriceType", "BaseInfo");
                                    })
                                    .ServerFiltering(false);
                                })
                                .Value(Model.TypeId?.ToString())
                                .HtmlAttributes(new { style = "width: 100%;", @data_checkEmpty = "SalePriceTypeId-box" })
                                )

                            </span>
                            <span id="SalePriceTypeId-box" class="emptybox hidden" data-isEssential="true" style="color:red;font-size: 11px;">
                                @Localizer["ThisFieldIsEmptyPleaseFillIt"]
                            </span>
                        </label>
                    </label>

                    <label class="block clearfix">
                        <label class="block clearfix ">
                            <label for="form-field-8">@Localizer["Type"] @Localizer["Currency"]: </label>
                            <span class="block input-icon input-icon-right">
                                @(Html.Kendo().DropDownList()
                                .Name("CurrencyId")
                                .DataTextField("Name")
                                .DataValueField("Id")
                                .Events(e => e.Change("CurrencyIdChange").DataBound("CurrencyIdDataBound"))
                                .OptionLabel(" ")
                                .DataSource(source =>
                                {
                                    source.Read(read =>
                                    {
                                        read.Action("GetAllCurrenciesExcept", "BaseInfo", new { currencyId = Model.BaseCurrencyId });
                                    })
                                    .ServerFiltering(false);
                                })
                                .Value(Model.Guid == Guid.Empty ? "" : Model.CurrencyId.ToString())
                                .HtmlAttributes(new { style = "width: 100%;", @data_checkEmpty = "CurrencyId-box" })
                                )
                            </span>
                            <span id="CurrencyId-box" class="emptybox hidden" data-isEssential="true" style="color:red;font-size: 11px;">
                                @Localizer["ThisFieldIsEmptyPleaseFillIt"]
                            </span>
                        </label>
                    </label>

                    <label class="block clearfix">
                        <label class="block clearfix ">
                            <label for="form-field-8"> @Localizer["MoneyConvert"]: </label>
                            <span class="block input-icon input-icon-right">
                                @(Html.Kendo().DropDownList()
                                    .Name("MoneyConvertId")
                                    .DataTextField("ShowMoneyConvert")
                                    .DataValueField("Guid")
                                    .Events(e => e.Change("MoneyConvertIdChange"))
                                    .OptionLabel(" ")
                                    //.DataSource(source =>
                                    //{
                                    //    source.Read(read =>
                                    //    {
                                    //        read.Action("GetAllCurrencies", "BaseInfo");
                                    //    })
                                    //    .ServerFiltering(false);
                                    //})
                                    .HtmlAttributes(new { style = $"width: 100%;direction: ltr;{textalign} " })
                                    )
                            </span>
                        </label>
                    </label>

                    <div class="col-sm-12 hidden" style="padding:0px;" id="MoneyConvertContainer">
                        <div class="col-sm-6">
                            <label class="block clearfix ">
                                <label id="lblBaseAmount" for="form-field-8"></label>
                                <span class="block input-icon input-icon-right">
                                    @(Html.Kendo().NumericTextBox<decimal>()
                                        .Name("BaseAmount")
                                        .Culture("en-US")
                                        .Format("N0")
                                        .Decimals(0)
                                        .Min(1)
                                        .SelectOnFocus(true)
                                        //.Value(1)
                                        .HtmlAttributes(new { style = "width: 100%"})
                                        )
                                </span>
                            </label>
                        </div>

                        <div class="col-sm-6">
                            <label class="block clearfix ">
                                <label id="lblDestAmount" for="form-field-8"></label>
                                <span class="block input-icon input-icon-right">
                                    @(Html.Kendo().NumericTextBox<decimal>()
                                        .Name("DestAmount")
                                        .Culture("en-US")
                                        .Format("N0")
                                        .Decimals(0)
                                        .Min(1)
                                        .SelectOnFocus(true)
                                        //.Value(1)
                                        .HtmlAttributes(new { style = "width: 100%"})
                                        )
                                </span>
                            </label>
                        </div>
                    </div>

                    <label class="block clearfix" style="padding:5px;">
                        <label class="block clearfix ">
                            <label class="light-grey" id="resultAmount" for="form-field-8"> </label>
                        </label>
                    </label>

                    <label class=" clearfix hidden" style="padding:5px;" id="ErrorCurrency">
                        <label class="block clearfix ">
                            <label class="red" for="form-field-8">@Localizer["CurrencyNotValid"]</label>
                        </label>
                    </label>

                </fieldset>
            </form>
        </div>
    </div><!-- /.widget-body -->
</div><!-- /.signup-box -->

<script>

    $(document).ready(function () {

        $("#lblBaseAmount").text($("#CurrencyName").val());

        setTimeout(function () {
            $('#TypeId').data("kendoDropDownList").focus();

            if ('@Model.Guid' != '@Guid.Empty') {
                $(".loader").removeClass("hidden");
                $.ajax({
                    type: "Get",
                    url: "/MoneyConvert/GetLatestMoneyConverts",
                    data: {
                        baseCurrencyId: '@Model.BaseCurrencyId',
                        destCurrencyId: '@Model.CurrencyId',
                        moneyConvertId: '@Model.MoneyConvertId'
                    },
                    success: function (response) {

                        var moneyConvert = $("#MoneyConvertId").data("kendoDropDownList");
                        moneyConvert.dataSource.data(response);
                        moneyConvert.value(`${$("#money").val()}`);
                        moneyConvert.trigger("change");

                        $(".loader").fadeIn("slow");
                        $(".loader").addClass("hidden");
                    }
                });
            }

        }, 200);

    });

    $("#TypeId").parent().on("keypress", function (e) {
        if (e.which === 13) {
            $('#CurrencyId').data("kendoDropDownList").focus();
        }
    });

    $("#CurrencyId").parent().on("keypress", function (e) {
        if (e.which === 13) {
            $('#MoneyConvertId').data("kendoDropDownList").focus();
        }
    });

    $("#MoneyConvertId").parent().on("keypress", function (e) {
        if (e.which === 13) {

            if ($("#MoneyConvertContainer").hasClass("hidden")) {
                $('#btn-AddNewSalePrice-accept').focus();

            } else {

                $('#BaseAmount').data("kendoNumericTextBox").focus();
            }
        }
    });


    $('#BaseAmount').focus(function () {
        $("#BaseAmount").select();
    });

    $("#BaseAmount").focusout(function () {

        CalculatePrice();

    });

    $('#BaseAmount').on('keypress', function (e) {
        if (e.which === 13) {
            $('#DestAmount').data("kendoNumericTextBox").focus();
        }
    });

    $('#DestAmount').focus(function () {
        $("#DestAmount").select();
    });

    $("#DestAmount").focusout(function () {

        CalculatePrice();

    });

    $('#DestAmount').on('keypress', function (e) {
        if (e.which === 13) {
            $('#btn-AddNewSalePrice-accept').focus();
        }
    });


</script>
