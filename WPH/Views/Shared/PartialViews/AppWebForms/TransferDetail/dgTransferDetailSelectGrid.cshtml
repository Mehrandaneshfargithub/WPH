
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject WPH.Resources.SharedViewLocalizer Localizer


<div style=" width: 100%;">

    <div style="clear:both;">

        @(Html.Kendo().Grid<WPH.Models.Product.ProductPricesViewModel>()
        .Name("purchaseHistoryKendoGrid")
        .Columns(columns =>
        {

            if (HttpContextAccessor.HttpContext.Session.GetString("culture") != "en")
            {

                columns.Bound("").Title("").Filterable(false).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).ClientTemplate("#= CheckBox_Databound(Guid,InvoiceType,PurchasePrice,SellingPrice,MiddleSellPrice,WholeSellPrice,RemainingNum)#");
                columns.Bound(x => x.Consideration).Title(Localizer["Consideration"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.RemainingNum).Title(Localizer["Rem"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });

                if((bool)(ViewBag.AccessCanUseWholeSellPrice ?? false))
                {
                    columns.Bound(x => x.WholeSellPrice).Title(Localizer["WholeSellPrice"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                }
                else
                {
                    columns.Bound(x => x.WholeSellPrice).Hidden();
                }

                if((bool)(ViewBag.AccessCanUseMiddleSellPrice ?? false))
                {
                    columns.Bound(x => x.MiddleSellPrice).Title(Localizer["MiddleSellPrice"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                }
                else
                {
                    columns.Bound(x => x.MiddleSellPrice).Hidden();
                }

                columns.Bound(x => x.SellingPrice).Title(Localizer["SellingPrice"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.PurchasePrice).Title(Localizer["PurchasePrice"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.ExpireDate).Title(Localizer["ExpDate"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.BujNumber).Title(Localizer["BujNumber"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.InvoiceDate).Title(Localizer["Date"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.InvoiceType).Title(Localizer["Type"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.Index).Filterable(false).Width(20).Title("#").HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.Guid).Hidden();
            }
            else
            {
                columns.Bound(x => x.Guid).Hidden();
                columns.Bound(x => x.Index).Filterable(false).Width(20).Title("#").HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.InvoiceType).Title(Localizer["Type"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.InvoiceDate).Title(Localizer["Date"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.BujNumber).Title(Localizer["BujNumber"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.ExpireDate).Title(Localizer["ExpDate"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.PurchasePrice).Title(Localizer["PurchasePrice"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.SellingPrice).Title(Localizer["SellingPrice"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });

                if ((bool)(ViewBag.AccessCanUseMiddleSellPrice ?? false))
                {
                    columns.Bound(x => x.MiddleSellPrice).Title(Localizer["MiddleSellPrice"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                }
                else
                {
                    columns.Bound(x => x.MiddleSellPrice).Hidden();
                }

                if ((bool)(ViewBag.AccessCanUseWholeSellPrice ?? false))
                {
                    columns.Bound(x => x.WholeSellPrice).Title(Localizer["WholeSellPrice"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                }
                else
                {
                    columns.Bound(x => x.WholeSellPrice).Hidden();
                }

                columns.Bound(x => x.RemainingNum).Title(Localizer["Rem"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.Consideration).Title(Localizer["Consideration"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound("").Title("").Filterable(false).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).ClientTemplate("#= CheckBox_Databound(Guid,InvoiceType,PurchasePrice,SellingPrice,MiddleSellPrice,WholeSellPrice,RemainingNum)#");
            }
        })

            .DataSource(dataSource => dataSource
            .Ajax()
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.Index);
            })
            .PageSize(10)
            .Read(read => read.Action("GetAllProductLastPricesById", "Product").Data("GetProductInfo"))
            )
            .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
            .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
            .Pageable(pageable => pageable
            .Input(true)
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5)
            .Numeric(true)) // Enable paging
            .Sortable().HtmlAttributes(new { @style = "direction:ltr;" }) // Enable sorting
        )
    </div>
</div>


<script>


    function CheckBox_Databound(Guid, InvoiceType, PurchasePrice, SellingPrice, MiddleSellPrice, WholeSellPrice, RemainingNum) {

        return `<div style=''> <input type="checkbox" class="k-checkbox select_detail" style="" data-rem="${RemainingNum}" data-price="${PurchasePrice}" data-sell="${SellingPrice}" data-middle="${MiddleSellPrice}" data-whole="${WholeSellPrice}" data-id="${Guid}" data-type="${InvoiceType}"  /> </div>`;
    }

    $(document).ready(function () {

        //$("#purchaseHistoryKendoGrid").on("dblclick", "tr.k-state-selected", function (element) {

        //    $("#purchaseHistoryKendoGrid").find("tr.k-state-selected td a.edit").click();

        //});

    })

</script>