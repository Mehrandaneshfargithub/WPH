@model Guid
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject WPH.Resources.SharedViewLocalizer Localizer

@{
    string edit_title = Localizer["EditSalePrice"];
    string remove_title = Localizer["RemoveSalePrice"];
}


<div>
    @(Html.Kendo().Grid<WPH.Models.PurchaseInvoiceDetailSalePrice.PurchaseInvoiceDetailSalePriceViewModel>()
    .Name("salePriceKendoGrid")
    .Columns(columns =>
    {

        if (HttpContextAccessor.HttpContext.Session.GetString("culture") != "en")
        {
            if ((bool)ViewBag.AccessDeleteTransferDetailSalePrice)
            {
                columns.Bound("").Title("").Width(10).Filterable(false).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).ClientTemplate("#= Delete_Databound(Guid,TypeId)#");
            }

            if ((bool)ViewBag.AccessEditTransferDetailSalePrice)
            {
                columns.Bound("").Title("").Width(10).Filterable(false).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).ClientTemplate("#= Edit_Databound(Guid,TypeId,AmountTxt,TypeName)#");
            }
            columns.Bound(x => x.MoneyConvertName).Filterable(false).Title(Localizer["MoneyConvert"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.AmountTxt).Filterable(false).Title(Localizer["Amount"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.CurrencyName).Filterable(false).Title(Localizer["Currency"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.TypeName).Filterable(false).Title(Localizer["Type"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.Index).Filterable(false).Width(20).Title("#").HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.Guid).Hidden();

        }
        else
        {
            columns.Bound(x => x.Guid).Hidden();
            columns.Bound(x => x.Index).Filterable(false).Title("#").Width(20).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
            columns.Bound(x => x.TypeName).Filterable(false).Title(Localizer["Type"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.CurrencyName).Filterable(false).Title(Localizer["Currency"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.AmountTxt).Filterable(false).Title(Localizer["Amount"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.MoneyConvertName).Filterable(false).Title(Localizer["MoneyConvert"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });

            if ((bool)ViewBag.AccessEditTransferDetailSalePrice)
            {
                columns.Bound("").Title("").Width(10).Filterable(false).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).ClientTemplate("#= Edit_Databound(Guid,TypeId,AmountTxt,TypeName)#");
            }

            if ((bool)ViewBag.AccessDeleteTransferDetailSalePrice)
            {
                columns.Bound("").Title("").Width(10).Filterable(false).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).ClientTemplate("#= Delete_Databound(Guid,TypeId)#");
            }
        }
    })

        .DataSource(dataSource => dataSource
        .Ajax()
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(p => p.Guid);
        })
        .PageSize(10)
        .Read(read => read.Action("GetAll", "TransferDetailSalePrice", new { transferDetailId = Model }))
        )
        .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
        .Pageable(pageable => pageable
        .Input(true)
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5)
        .Numeric(true)) // Enable paging
        .Sortable().HtmlAttributes(new { @style = "direction: ltr;margin-top:2rem;overflow:auto" }) // Enable sorting
    )
</div>

<script>

    function Edit_Databound(Guid, TypeId, Price, TypeName) {

        if (TypeId > 0) {
            return `<a class='tooltip-success grid-btn edit' onClick='EditMainSalePrice(this)' data-id='${Guid}' data-typeId='${TypeId}' data-price='${Price}' data-typeName='${TypeName}' data-rel='tooltip' title='@edit_title' data-original-title='Edit'>
                        <span class='green'>
                            <i class='ace-icon fa fa-pencil bigger-120'></i>
                        </span>
                    </a>`;
        }

        return `<a class='tooltip-success grid-btn edit' onClick='EditSalePrice(this)' data-id='${Guid}' data-rel='tooltip' title='@edit_title' data-original-title='Edit'>
                    <span class='green'>
                        <i class='ace-icon fa fa-pencil bigger-120'></i>
                    </span>
                </a>`;
    }

    function Delete_Databound(Guid, TypeId) {

        if (TypeId > 0) {
            return "";
        }

        return `<a class='tooltip-error grid-btn' onClick='DeleteSalePriceFunction(this)' data-id='${Guid}' data-rel='tooltip' title='@remove_title' data-original-title='Delete'>
                    <span class='red'>
                        <i class='ace-icon fa fa-trash-can bigger-120'></i>
                    </span>
                </a>`;
    }

    $(document).ready(function () {

        $("#salePriceKendoGrid").on("dblclick", "tr.k-state-selected", function (element) {

            $("#salePriceKendoGrid").find("tr.k-state-selected td a.edit").click();

        });

    })


</script>