@model Guid
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject WPH.Resources.SharedViewLocalizer Localizer

@{
            string font = "", pull = "", pullReverse = "", direction = "", align = "";
            if (HttpContextAccessor.HttpContext.Session.GetString("culture") == "en")
            {
                font = " MyFont-Roboto-grid ";
                pull = " pull-right ";
                pullReverse = " pull-left ";
                direction = " ";
                align = "right";
        <input class="hidden" type="text" id="RTL" data-Value="False" />
    }
    else
    {
        font = " MyFont-Sarchia-grid ";
        pull = " pull-left ";
        pullReverse = " pull-right ";
        direction = " direction:rtl; ";
        align = "left";
        <input class="hidden" type="text" id="RTL" data-Value="True" />
    }
}

<style>

    li span.k-link {
        color: rgba(0, 0, 0, 0.7)!important;
    }

    li span.k-link:hover {
        color: white!important;
    }

    .k-tabstrip-wrapper li .k-link {
        color: white !important;
    }

    .k-tabstrip-wrapper li.k-state-active .k-link {
        color: black !important;
    }

        .k-tabstrip-wrapper li.k-state-active .k-link:hover {
            color: white !important;
        }

</style>


<h1 id="ProductNameText" class="hidden"></h1>

<h1 id="StockSelection" class="hidden">@ViewBag.stockSelection</h1>

<span id="Product-box" class="emptybox hidden" data-isEssential="true" style="color:red;">
    @Localizer["ThisFieldIsEmptyPleaseFillIt"]
</span>
<span id="ProductExist-box" class="emptybox hidden" data-isEssential="true" style="color:red;">
    @Localizer["ThisProductNotExist"]
</span>
<span id="ProductStock-box" class="emptybox hidden" data-isEssential="true" style="color:red;">
    @Localizer["DontHaveStock"]
</span>

<div id="gridContent" class="row">

    <div class="col-sm-6 @pull" id="SaleInvoiceDetailTotalPrice" style="direction:ltr">
    </div>

    <div class="col-sm-6 @pullReverse" >
        <h4 class="smaller lighter blue no-margin @font" style="padding-top: 1rem">
            @Localizer["Stock"] : <span id="SaleInvoiceDetailModal-ProductStock" style="color:black"></span>
        </h4>
        <h4 class="smaller lighter blue no-margin @font" style="padding-top: 1rem">
            @Localizer["Stock"] - @Localizer["ThisExpire"]: <span id="SaleInvoiceDetailModal-ProductStockOfThisExpire" style="color:black"></span>
        </h4>

    </div>

</div>


<div class="hr-10">

</div>



<div class="col-sm-12" style="direction:ltr;overflow:auto">

    <div id="SaleInvoiceDetailKendoGrid" style="overflow:auto"></div>

</div>



<div class="row" id="CurrencyRecieving" style="display:flex;flex-direction:row-reverse">

    

</div>


<div class="row" id="TotalCurrencyRecieving" style="padding:1rem">

    <div id="CurrencyTabstrip" style="font-size: 1.4rem">

        <ul id="CurrencyTabstripList">
        </ul>



    </div>


</div>

<style>

    .toolbarButton {
        color: white !important;
        background-color: white;
        font-size: 1.5rem !important;
        transition: all 0.5s;
    }

        .toolbarButton:hover {
            background-color: dodgerblue;
            color: white !important;
            border-color: darkblue;
            transition: all 0.5s;
        }


    #SaleInvoiceDetailKendoGrid .k-grid-content {
        overflow-x: visible;
    }


</style>




<h1 class="hidden" id="newMedicine">@Localizer["New"]</h1>



<script type="text/x-kendo-template" id="toolbarTemplate">



    <div style="font-size:0.5rem">

        <a href="\\#" id="newMedicineTxt" class="k-button toolbarButton" title="Add" onclick="AddNewRow()"></a>

    </div>


</script>

<script>

    var productWithBorcode_list = [];
    var productName_list = [];
    var Currency_list = [];
    var MoneyConvert_list = [];

    window.onresize = function (event) {
        
        let s = $(window).width() - 80;
        $("#SaleInvoiceDetailKendoGrid").css('width', s + 'px');
    };

    $(document).ready(function () {


        let s = $(window).width() - 80;
        $("#SaleInvoiceDetailKendoGrid").css('width', s + 'px');

        let RTL = $("#RTL").attr("data-Value");
        if (RTL === "True") {
            $("#SaleInvoiceDetailKendoGrid").kendoGrid({
                dataSource: {
                    //data: { Index: '1', ProductName: '1', Num: 1,FreeNum:1},

                    schema: {
                        model: {
                            fields: {
                                Guid: { type: "string" },
                                Index: { editable: false, type: "string" },
                                ProductName: { type: "string" },
                                ProductId: { type: "string" },
                                ExpireDate: { editable: false, type: "string" },
                                Num: { type: "number" },
                                FreeNum: { type: "number" },
                                PurchasePriceTxt: { editable: false, type: "string" },
                                PurchasePriceNumeric: { editable: false, type: "number" },
                                PurchasePrice: { editable: false, type: "string" },
                                PurchasePriceCurrency: { type: "string" },
                                PurchasePriceCurrencyId: { type: "number" },
                                SalePrice: { type: "number" },
                                OldSalePrice: { editable: false, type: "string" },
                                FirstPrice: { editable: false, type: "number" },
                                Discount: { type: "number" },
                                Currency: { type: "string" },
                                CurrencyName: { type: "string" },
                                CurrencyNameId: { type: "number" },
                                FirstCurrencyId: { type: "number" },
                                WholesalePrice: { type: "number" },
                                Profit: { type: "number" },
                                Consideration: { type: "string" },
                                MoneyConvertTxtId: { type: "string" },
                                MoneyConvertTxt: { type: "string" },
                                MoneyConvert: { type: "string" },
                                InvoiceType: { type: "string" },
                                PurchaseInvoiceDetailId: { type: "string" },
                                ChildrenGuids: { type: "string" },
                                ChildrenCount: { type: "number" },
                                RemainingNum: { type: "number" },
                                BujNumber: { type: "string" },
                            }
                        }
                    },
                    batch: true,
                    pageSize: 10,
                    transport: {
                        read: {
                            url: "/SaleInvoiceDetail/GetAll?saleInvoiceId=" + $("#Guid").val(),

                        },
                    },
                    requestEnd: datasourceFinish,
                    sort: { field: "Index", dir: "asc" },
                },
                toolbar: kendo.template($("#toolbarTemplate").html()),
                detailInit: saledetail,
                edit: cellEdits,
                scrollable: true,
                sortable: true,
                pageable: {
                    refresh: true,
                    input: true,
                    numeric: false
                },
                columns: [
                    {

                        template: "<i class='fa fa-trash-can bigger-120 red' style: 'cursor:pointer'> </i>",
                        width: "30px",
                        attributes: {
                            "onclick": "removeSaleInvoiceDetailGrid(this)",
                            "data-ChildrenGuids": "#: ChildrenGuids #",
                            "data-Guid": "#: Guid #",
                            "data-Count": "#: ChildrenCount #",
                            "data-Index": "#: Index #",
                            style: "cursor:pointer"
                        }
                    },
                    {
                        field: "Consideration",
                        title: '@Localizer["Consideration"]',
                        width: "100px",
                        editor: ConsiderationEditor,
                        attributes: {
                            "data-Guid": "#: Guid #",
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Profit",
                        title: '@Localizer["Profit"] %',
                        width: "80px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "WholesalePrice",
                        title: '@Localizer["TotalAmount"]',
                        width: "120px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "MoneyConvert",
                        title: '@Localizer["MoneyConvert"]',
                        //width: "150px",
                        editor: MoneyConvertEditor,
                        hidden: true,
                        template: "#=MoneyConvertTxt#",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"

                        }
                    },
                    {
                        field: "Discount",
                        title: '@Localizer["Discount"]',
                        width: "70px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "SalePrice",
                        title: '@Localizer["SalePrices"]',
                        width: "100px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "OldSalePrice",
                        title: '@Localizer["OldSalePrice"]',
                        width: "120px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Currency",
                        title: '@Localizer["Currency"]',
                        width: "70px",
                        editor: CurrencyEditor,
                        template: "#=CurrencyName#",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }

                    },
                    {
                        field: "PurchasePrice",
                        title: '@Localizer["PurchasePrice"]',
                        width: "100px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "FreeNum",
                        title: '@Localizer["FreeNum"]',
                        width: "80px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Num",
                        title: '@Localizer["Num"]',
                        width: "80px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "ExpireDate",
                        title: '@Localizer["ExpireDate"]',
                        width: "100px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "ProductName",
                        title: '@Localizer["ProductName"]',
                        editor: ProductEditor,
                        width: "300px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Index",
                        title: '#',
                        width: "35px",
                        //editable:false,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        template: "#if(ChildrenCount > 1){#<i class='fa-solid fa-caret-left bigger-120' style: 'cursor:pointer'  onclick = 'expandThisRow(this)'> </i>#}#",
                        width: "30px",
                        attributes: {
                            "data-Index": "#: Index #",
                        }
                    },
                    {
                        field: "InvoiceType",
                        title: 'InvoiceType',
                        hidden: true
                    },
                    {
                        field: "CurrencyName",
                        title: 'CurrencyName',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "MoneyConvertTxt",
                        title: 'MoneyConvertTxt',
                        width: "80px",
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "MoneyConvertTxtId",
                        title: 'MoneyConvertTxtId',
                        width: "80px",
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "CurrencyNameId",
                        title: 'CurrencyNameId',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "PurchasePriceCurrencyId",
                        title: 'PurchasePriceCurrencyId',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "PurchasePriceCurrency",
                        title: 'PurchasePriceCurrency',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "PurchasePriceNumeric",
                        title: 'PurchasePriceNumeric',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "ProductId",
                        title: 'ProductId',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    
                    {
                        field: "ChildrenGuids",
                        title: 'ChildrenGuids',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "FirstPrice",
                        title: 'FirstPrice',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "ChildrenCount",
                        title: 'ChildrenCount',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "RemainingNum",
                        title: 'RemainingNum',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "BujNumber",
                        title: 'BujNumber',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                ],
                editable: true

            });
        }
        else {
            $("#SaleInvoiceDetailKendoGrid").kendoGrid({
                dataSource: {
                    //data: { Index: '1', ProductName: '1', Num: 1,FreeNum:1},

                    schema: {
                        model: {
                            fields: {
                                Guid: { type: "string" },
                                Index: { editable: false, type: "string" },
                                ProductName: { type: "string" },
                                ProductId: { type: "string" },
                                ExpireDate: { editable: false, type: "string" },
                                Num: { type: "number" },
                                FreeNum: { type: "number" },
                                PurchasePriceTxt: { editable: false, type: "string" },
                                PurchasePriceNumeric: { editable: false, type: "number" },
                                PurchasePrice: { editable: false, type: "string" },
                                PurchasePriceCurrency: { type: "string" },
                                PurchasePriceCurrencyId: { type: "number" },
                                SalePrice: { type: "number" },
                                OldSalePrice: { editable: false, type: "string" },
                                FirstPrice: { editable: false, type: "number" },
                                Discount: { type: "number" },
                                Currency: { type: "string" },
                                CurrencyName: { type: "string" },
                                CurrencyNameId: { type: "number" },
                                FirstCurrencyId: { type: "number" },
                                WholesalePrice: { type: "number" },
                                Profit: { type: "number" },
                                Consideration: { type: "string" },
                                MoneyConvertTxtId: { type: "string" },
                                MoneyConvertTxt: { type: "string" },
                                MoneyConvert: { type: "string" },
                                InvoiceType: { type: "string" },
                                PurchaseInvoiceDetailId: { type: "string" },
                                ChildrenGuids: { type: "string" },
                                ChildrenCount: { type: "number" },
                                RemainingNum: { type: "number" },
                                BujNumber: { type: "string" },
                            }
                        }
                    },
                    batch: true,
                    pageSize: 10,
                    transport: {
                        read: {
                            //url: "SaleInvoiceDetail/GetAll?saleInvoiceId=" + $("#Guid").val(),
                            url: "/SaleInvoiceDetail/GetAll?saleInvoiceId=" + $("#Guid").val(),

                        },
                    },
                    requestEnd: datasourceFinish,
                    sort: { field: "Index", dir: "asc" },
                },
                toolbar: kendo.template($("#toolbarTemplate").html()),
                edit: cellEdits,
                detailInit: saledetail,
                scrollable: true,
                //height: 550,
                //width: 200,
                sortable: true,
                pageable: {
                    refresh: true,
                    input: true,
                    numeric: false
                },
                columns: [
                    {
                        field: "Index",
                        title: '#',
                        width: "35px",
                        //editable:false,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "ProductName",
                        title: '@Localizer["ProductName"]',
                        editor: ProductEditor,
                        width: "300px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "ExpireDate",
                        title: '@Localizer["ExpireDate"]',
                        width: "100px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Num",
                        title: '@Localizer["Num"]',
                        width: "80px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "FreeNum",
                        title: '@Localizer["FreeNum"]',
                        width: "80px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "PurchasePrice",
                        title: '@Localizer["PurchasePrice"]',
                        width: "100px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Currency",
                        title: '@Localizer["Currency"]',
                        width: "70px",
                        editor: CurrencyEditor,
                        template: "#=CurrencyName#",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }

                    },
                    {
                        field: "OldSalePrice",
                        title: '@Localizer["OldSalePrice"]',
                        width: "120px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "SalePrice",
                        title: '@Localizer["SalePrices"]',
                        width: "100px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Discount",
                        title: '@Localizer["Discount"]',
                        width: "70px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "MoneyConvert",
                        title: '@Localizer["MoneyConvert"]',
                        //width: "150px",
                        editor: MoneyConvertEditor,
                        hidden: true,
                        template: "#=MoneyConvertTxt#",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"

                        }
                    },
                    {
                        field: "WholesalePrice",
                        title: '@Localizer["TotalAmount"]',
                        width: "120px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Profit",
                        title: '@Localizer["Profit"] %',
                        width: "80px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Consideration",
                        title: '@Localizer["Consideration"]',
                        width: "100px",
                        editor: ConsiderationEditor,
                        attributes: {
                            //"onclick": "ConsiderationClick(event)",
                            "data-Guid": "#: Guid #",
                            "data-Index": "#: Index #",

                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        template: "<i class='fa fa-trash-can bigger-120 red' style: 'cursor:pointer'> </i>",
                        width: "30px",
                        attributes: {
                            "onclick": "removeSaleInvoiceDetailGrid(this)",
                            "data-ChildrenGuids": "#: ChildrenGuids #",
                            "data-Guid": "#: Guid #",
                            "data-Count": "#: ChildrenCount #",
                            "data-Index": "#: Index #",
                            style: "cursor:pointer"
                        }
                    },
                    {
                        field: "ProductId",
                        title: 'ProductId',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "InvoiceType",
                        title: 'InvoiceType',
                        hidden: true
                    },
                    {
                        field: "MoneyConvertTxtId",
                        title: 'MoneyConvertTxtId',
                        width: "80px",
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "MoneyConvertTxt",
                        title: 'MoneyConvertTxt',
                        width: "80px",
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "PurchasePriceCurrency",
                        title: 'PurchasePriceCurrency',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "PurchasePriceCurrencyId",
                        title: 'PurchasePriceCurrencyId',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "CurrencyNameId",
                        title: 'CurrencyNameId',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "FirstCurrencyId",
                        title: 'FirstCurrencyId',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "CurrencyName",
                        title: 'CurrencyName',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "PurchasePriceNumeric",
                        title: 'PurchasePriceNumeric',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "ChildrenGuids",
                        title: 'ChildrenGuids',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "FirstPrice",
                        title: 'FirstPrice',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "ChildrenCount",
                        title: 'ChildrenCount',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "RemainingNum",
                        title: 'RemainingNum',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "BujNumber",
                        title: 'BujNumber',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                ],
                editable: true

            });
        }



        GetAllProductsWithBarcode().done(function (data) {

            productWithBorcode_list = data;
            var productNameList = productWithBorcode_list.map(({ ProductId, ProductName }) => ({ ProductId, ProductName }));

            const key = 'ProductName';

            productName_list = [...new Map(productNameList.map(item =>
                [item[key], item])).values()];


        });


        let grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");
        grid.bind("dataBound", grid_dataBound);

        setTimeout(() => {
            let ss = $("#newMedicine").text();

            $("#newMedicineTxt").html('<span class="k-icon k-i-plus" ></span><span>' + ss + '</span>');

            let lock = $("#lock").text();

            if (lock.toLocaleLowerCase() == "true") {
                disablePage();
            }
            
            //grid.tbody.closest("table").children("colgroup").find("col").eq(idx).width(300);

        })

    });

    function disablePage() {

        $("#newCustomerbtn").attr("disabled", true);
        $("#NearestExpire").attr("disabled", true);
        $("#CurrentStock").attr("disabled", true);
        $("#LatestSellingPrice").attr("disabled", true);
        $("#CreateLine").attr("disabled", true);
        $("#btn-OkAndNew").attr("disabled", true);
        $("#btn-ShowCostsList").attr("disabled", true);
        $("#btn-AddMoneyConvert").attr("disabled", true);
        $("#btn-SaleInvoiceDetailModal-ok").attr("disabled", true);
        $("#btn-SaleInvoiceDetailModal-okandnew").attr("disabled", true);
        $("#newMedicineTxt").attr("disabled", true);
        $(".fa-trash-can").attr("disabled", true);
        $(".fa-clock-rotate-left").attr("disabled", true);
        $("#CustomerId").attr("disabled", true);
        
    }
    
    function saledetail(e) {

        let RTL = $("#RTL").attr("data-Value");

        if (RTL === "True") {

            let grid = $("<div/>").appendTo(e.detailCell).kendoGrid({
                dataSource: {
                    schema: {
                        model: {
                            fields: {
                                Guid: { type: "string" },
                                Index: { editable: false, type: "string" },
                                ProductName: { type: "string" },
                                ProductId: { type: "string" },
                                ExpireDate: { editable: false, type: "string" },
                                Num: { type: "number" },
                                FreeNum: { type: "number" },
                                PurchasePriceTxt: { editable: false, type: "string" },
                                PurchasePriceNumeric: { editable: false, type: "number" },
                                PurchasePrice: { editable: false, type: "string" },
                                PurchasePriceCurrency: { type: "string" },
                                PurchasePriceCurrencyId: { type: "number" },
                                SalePrice: { type: "number" },
                                OldSalePrice: { editable: true, type: "string" },
                                FirstPrice: { editable: false, type: "number" },
                                Discount: { type: "number" },
                                Currency: { type: "string" },
                                CurrencyName: { type: "string" },
                                CurrencyNameId: { type: "number" },
                                FirstCurrencyId: { type: "number" },
                                WholesalePrice: { type: "number" },
                                Profit: { type: "number" },
                                Consideration: { type: "string" },
                                MoneyConvertTxtId: { type: "string" },
                                MoneyConvertTxt: { type: "string" },
                                MoneyConvert: { type: "string" },
                                InvoiceType: { type: "string" },
                                PurchaseInvoiceDetailId: { type: "string" },
                                RemainingNum: { type: "number" },
                                BujNumber: { type: "string" },

                            }
                        }
                    },
                    batch: true,
                    pageSize: 10,
                    transport: {
                        read: {
                            url: "/SaleInvoiceDetail/GetAllDetail?saleInvoiceDetailIds=" + e.data.ChildrenGuids,
                        },
                    },
                    requestEnd: datasourceDetailFinish,
                    sort: { field: "Index", dir: "asc" },
                },
                edit: cellDetailEdits,
                scrollable: true,
                sortable: true,
                pageable: {
                    refresh: true,
                    input: true,
                    numeric: false
                },
                columns: [
                    {

                        template: "<i class='fa fa-trash-can bigger-120 red' style: 'cursor:pointer'> </i>",
                        width: "30px",
                        attributes: {
                            "onclick": "removeSaleInvoiceDetailGrid(this)",
                            "data-Guid": "#: Guid #",
                            "data-Index": "#: Index #",
                            style: "cursor:pointer"
                        }
                    },
                    {
                        field: "Consideration",
                        title: '@Localizer["Consideration"]',
                        width: "100px",
                        editor: ConsiderationEditor,
                        attributes: {
                            "data-Guid": "#: Guid #",
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Profit",
                        title: '@Localizer["Profit"] %',
                        width: "80px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "WholesalePrice",
                        title: '@Localizer["TotalAmount"]',
                        width: "120px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "MoneyConvert",
                        title: '@Localizer["MoneyConvert"]',
                        width: "150px",
                        editor: MoneyConvertDetailEditor,
                        hidden: true,
                        template: "#=MoneyConvertTxt#",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"

                        }
                    },
                    {
                        field: "Discount",
                        title: '@Localizer["Discount"]',
                        width: "70px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "SalePrice",
                        title: '@Localizer["SalePrices"]',
                        width: "100px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "OldSalePrice",
                        title: '@Localizer["OldSalePrice"]',
                        width: "100px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Currency",
                        title: '@Localizer["Currency"]',
                        width: "70px",
                        editor: CurrencyDetailEditor,
                        template: "#=CurrencyName#",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }

                    },
                    {
                        field: "PurchasePrice",
                        title: '@Localizer["PurchasePrice"]',
                        width: "100px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "FreeNum",
                        title: '@Localizer["FreeNum"]',
                        width: "80px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Num",
                        title: '@Localizer["Num"]',
                        width: "80px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "ExpireDate",
                        title: '@Localizer["ExpireDate"]',
                        width: "100px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "ProductName",
                        title: '@Localizer["ProductName"]',
                        editor: ProductEditor,
                        //width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Index",
                        title: '#',
                        width: "35px",
                        //editable:false,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "InvoiceType",
                        title: 'InvoiceType',
                        hidden: true
                    },
                    {
                        field: "CurrencyName",
                        title: 'CurrencyName',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "MoneyConvertTxt",
                        title: 'MoneyConvertTxt',
                        width: "80px",
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "MoneyConvertTxtId",
                        title: 'MoneyConvertTxtId',
                        width: "80px",
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "CurrencyNameId",
                        title: 'CurrencyNameId',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "FirstCurrencyId",
                        title: 'FirstCurrencyId',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "PurchasePriceCurrencyId",
                        title: 'PurchasePriceCurrencyId',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "PurchasePriceCurrency",
                        title: 'PurchasePriceCurrency',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "PurchasePriceNumeric",
                        title: 'PurchasePriceNumeric',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "ProductId",
                        title: 'ProductId',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "OldSalePrice",
                        title: 'OldSalePrice',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "RemainingNum",
                        title: 'RemainingNum',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "BujNumber",
                        title: 'BujNumber',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                ],
                editable: true
            }).data("kendoGrid");

            let number = Currency_list.length;

            if (number > 1) {
                grid.showColumn("MoneyConvert");

            }



        }
        else {

            let grid = $("<div/>").appendTo(e.detailCell).kendoGrid({
                dataSource: {
                    schema: {
                        model: {
                            fields: {
                                Guid: { type: "string" },
                                Index: { editable: false, type: "string" },
                                ProductName: { type: "string" },
                                ProductId: { type: "string" },
                                ExpireDate: { editable: false, type: "string" },
                                Num: { type: "number" },
                                FreeNum: { type: "number" },
                                PurchasePriceTxt: { editable: false, type: "string" },
                                PurchasePriceNumeric: { editable: false, type: "number" },
                                PurchasePrice: { editable: false, type: "string" },
                                PurchasePriceCurrency: { type: "string" },
                                PurchasePriceCurrencyId: { type: "number" },
                                SalePrice: { type: "number" },
                                OldSalePrice: { editable: true, type: "string" },
                                FirstPrice: { editable: false, type: "number" },
                                Discount: { type: "number" },
                                Currency: { type: "string" },
                                CurrencyName: { type: "string" },
                                CurrencyNameId: { type: "number" },
                                FirstCurrencyId: { type: "number" },
                                WholesalePrice: { type: "number" },
                                Profit: { type: "number" },
                                Consideration: { type: "string" },
                                MoneyConvertTxtId: { type: "string" },
                                MoneyConvertTxt: { type: "string" },
                                MoneyConvert: { type: "string" },
                                InvoiceType: { type: "string" },
                                PurchaseInvoiceDetailId: { type: "string" },
                                RemainingNum: { type: "number" },
                                BujNumber: { type: "string" },
                            }
                        }
                    },
                    batch: true,
                    pageSize: 10,
                    transport: {
                        read: {
                            url: "/SaleInvoiceDetail/GetAllDetail?saleInvoiceDetailIds=" + e.data.ChildrenGuids,
                        },
                    },
                    requestEnd: datasourceDetailFinish,
                    sort: { field: "Index", dir: "asc" },
                },
                edit: cellDetailEdits,
                scrollable: true,
                sortable: true,
                pageable: {
                    refresh: true,
                    input: true,
                    numeric: false
                },
                columns: [
                    {
                        field: "Index",
                        title: '#',
                        width: "35px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "ProductName",
                        title: '@Localizer["ProductName"]',
                        editor: ProductEditor,
                        //width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "ExpireDate",
                        title: '@Localizer["ExpireDate"]',
                        width: "100px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Num",
                        title: '@Localizer["Num"]',
                        width: "80px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "FreeNum",
                        title: '@Localizer["FreeNum"]',
                        width: "80px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "PurchasePrice",
                        title: '@Localizer["PurchasePrice"]',
                        width: "100px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Currency",
                        title: '@Localizer["Currency"]',
                        width: "70px",
                        editor: CurrencyDetailEditor,
                        template: "#=CurrencyName#",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }

                    },
                    {
                        field: "OldSalePrice",
                        title: '@Localizer["OldSalePrice"]',
                        width: "100px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "SalePrice",
                        title: '@Localizer["SalePrices"]',
                        width: "100px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Discount",
                        title: '@Localizer["Discount"]',
                        width: "70px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "MoneyConvert",
                        title: '@Localizer["MoneyConvert"]',
                        width: "150px",
                        editor: MoneyConvertDetailEditor,
                        hidden: true,
                        template: "#=MoneyConvertTxt#",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"

                        }
                    },
                    {
                        field: "WholesalePrice",
                        title: '@Localizer["TotalAmount"]',
                        width: "120px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Profit",
                        title: '@Localizer["Profit"] %',
                        width: "80px",
                        attributes: {
                            "data-Index": "#: Index #",
                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "Consideration",
                        title: '@Localizer["Consideration"]',
                        width: "100px",
                        editor: ConsiderationEditor,
                        attributes: {
                            //"onclick": "ConsiderationClick(event)",
                            "data-Guid": "#: Guid #",
                            "data-Index": "#: Index #",

                        },
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {

                        template: "<i class='fa fa-trash-can bigger-120 red' style: 'cursor:pointer'> </i>",
                        width: "30px",
                        attributes: {
                            "onclick": "removeSaleInvoiceDetailGrid(this)",
                            "data-Guid": "#: Guid #",
                            "data-Index": "#: Index #",
                            style: "cursor:pointer"
                        }
                    },
                    {
                        field: "ProductId",
                        title: 'ProductId',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "InvoiceType",
                        title: 'InvoiceType',
                        hidden: true
                    },
                    {
                        field: "MoneyConvertTxtId",
                        title: 'MoneyConvertTxtId',
                        width: "80px",
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "MoneyConvertTxt",
                        title: 'MoneyConvertTxt',
                        width: "80px",
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "PurchasePriceCurrency",
                        title: 'PurchasePriceCurrency',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "PurchasePriceCurrencyId",
                        title: 'PurchasePriceCurrencyId',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "CurrencyNameId",
                        title: 'CurrencyNameId',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "CurrencyName",
                        title: 'CurrencyName',
                        hidden: true,
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "PurchasePriceNumeric",
                        title: 'PurchasePriceNumeric',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "RemainingNum",
                        title: 'RemainingNum',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },
                    {
                        field: "BujNumber",
                        title: 'BujNumber',
                        hidden: true,
                        width: "200px",
                        headerAttributes: {
                            style: "text-align: center"
                        }
                    },

                ],
                editable: true
            }).data("kendoGrid");

            let number = Currency_list.length;

            if (number > 1) {
                grid.showColumn("MoneyConvert");

            }

        }

    }


    let expandedRows = [];

    function expandThisRow(element) {

        
            let grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");

            if ($(element).hasClass('fa-caret-left')) {
                $(element).removeClass('fa-caret-left');
                $(element).addClass('fa-caret-down');
                grid.expandRow($(element).parent().parent());
                expandedRows.push($(element).parent().attr('data-index'));

            }
            else {
                $(element).removeClass('fa-caret-down');
                $(element).addClass('fa-caret-left');
                grid.collapseRow($(element).parent().parent());
                expandedRows.pop($(element).parent().attr('data-index'));
            }
        

        

    }

    function cellEdits(e) {
        $("#SaleInvoiceDetailModal-ProductStockOfThisExpire").text("");
        let general;
        let Num = e.container.find("input[name=Num]").data("kendoNumericTextBox");
        let FreeNum = e.container.find("input[name=FreeNum]").data("kendoNumericTextBox");
        let Currency = e.container.find("input[name=Currency]").data("kendoDropDownList");
        let MoneyConvert = e.container.find("input[name=MoneyConvert]").data("kendoDropDownList");
        let SalePrice = e.container.find("input[name=SalePrice]").data("kendoNumericTextBox");
        let Discount = e.container.find("input[name=Discount]").data("kendoNumericTextBox");
        let WholesalePrice = e.container.find("input[name=WholesalePrice]").data("kendoNumericTextBox");
        let Profit = e.container.find("input[name=Profit]").data("kendoNumericTextBox");
        let Consideration = e.container.find("input[name=Consideration]").data("kendoTextBox");
        let ProductName = e.container.find("input[name=ProductName]").data("kendoAutoComplete");
        let grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");
        let RTL = $("#RTL").attr("data-Value");

        if (e.model.Guid === "") {

            if (Num !== undefined) {

                general = Num;
            }
            else if (FreeNum !== undefined) {
                general = FreeNum;
            }
            else if (SalePrice !== undefined) {
                general = SalePrice;
            }
            else if (Discount !== undefined) {
                general = Discount;
            }
            else if (WholesalePrice !== undefined) {
                general = WholesalePrice;
            }
            else if (Profit !== undefined) {
                general = Profit;
            }
            else if (Consideration !== undefined) {
                general = Consideration;
            }
            else if (MoneyConvert !== undefined) {
                general = MoneyConvert;
            }
            
            if (general !== undefined)
                general.enable(false);
        }
        else {

            if (ProductName !== undefined) {
                ProductName.enable(false);
            }
            else if (Num !== undefined) {
                let lock = $("#lock").text();

                if (lock.toLocaleLowerCase() == "true") {
                    Num.enable(false);
                }
                let index = parseInt($(e.container.find("input[name=Num]")).closest('td').attr('data-Index'));

                const freeNumChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='FreeNum']");


                const freeNumIndex = $(freeNumChild).parent().children().index(freeNumChild);

                var data = getGridData(index);

                let childs = data.get("ChildrenCount");

                if (childs > 1)
                    Num.enable(false);
                let totalmax = $("#SaleInvoiceDetailModal-ProductStock").text();
                let max = data.get("RemainingNum");
                let currentStock = $("#CurrentStock").is(":checked");

                let nearestExpire = $("#NearestExpire").is(":checked");

                if (!nearestExpire)
                    currentStock = true;

                let stockSelection = $("#StockSelection").text();

                if (stockSelection.toLowerCase() == "stock") {
                    if (currentStock) 
                        Num.max(parseInt(max));
                    else
                        Num.max(parseInt(totalmax));
                }

                let previuseNum = data.get("Num");

                let stock = data.get("RemainingNum");

                $("#SaleInvoiceDetailModal-ProductStockOfThisExpire").text(stock);

                if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                    Num.bind("change", function () {
                        AddNewSaleInvoiceDetail(data, index, true, false);

                    });
                }

                $(e.container.find("input[name=Num]")).on("keypress", function (e) {
                    
                    if (e.which === 13) {

                        //let stock = $("#SaleInvoiceDetailModal-ProductStockOfThisExpire").text();

                        
                        let numMax = totalmax;

                        if (currentStock)
                            numMax = max;
                        let freeNum = data.get("FreeNum");
                        console.log(freeNum);
                        console.log(numMax);
                        console.log(currentStock);
                        console.log(max);
                        if (Num.value() + parseInt(freeNum) > numMax && numMax != "") {
                            $(this).focus();
                            if (stockSelection.toLowerCase() == "stock") {
                                Num.value(numMax - freeNum);
                            }
                            else {
                                Num.value(previuseNum);
                            }
                            //Num.value(previuseNum);
                            return;
                        }

                        //if (stockSelection.toLowerCase() == "stock") {
                        //    Num.max(parseInt(totalmax));
                        //}
                        //else {
                        //    Num.max(parseInt(previuseNum));
                        //}

                        WholePrice(index);
                        let data_zero = getGridData(0);

                        if (data_zero !== undefined) {
                            index += 1;
                        }

                        grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + freeNumIndex + ")"));

                        //if (RTL === "True")
                        //    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + freeNumIndex+")"));
                        //else
                        //    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + freeNumIndex +")"));

                    }
                });


                $(e.container.find("input[name=Num]")).on("focus", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
            else if (FreeNum !== undefined) {
                let lock = $("#lock").text();

                if (lock.toLocaleLowerCase() == "true") {
                    FreeNum.enable(false);
                }
                let index = parseInt($(e.container.find("input[name=FreeNum]")).closest('td').attr('data-Index'));
                var data = getGridData(index);
                let childs = data.get("ChildrenCount");
                let stock = data.get("RemainingNum");

                $("#SaleInvoiceDetailModal-ProductStockOfThisExpire").text(stock);
                if (childs > 1)
                    FreeNum.enable(false);
                if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                    FreeNum.bind("change", function () {

                        AddNewSaleInvoiceDetail(data, index, true, false);

                    });
                }

                const saleChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='SalePrice']");
                let previuseNum = data.get("FreeNum");

                const saleIndex = $(saleChild).parent().children().index(saleChild);
                let first = true;
                $(e.container.find("input[name=FreeNum]")).on("keypress", function (e) {

                    

                    if (e.which === 13) {

                        if (first) {
                            first = false;
                            let max = stock;
                            let totalmax = $("#SaleInvoiceDetailModal-ProductStock").text();
                            let currentStock = $("#CurrentStock").is(":checked");
                            let nearestExpire = $("#NearestExpire").is(":checked");
                            let FreenumMax = 0;

                            if (currentStock || totalmax == "")
                                FreenumMax = parseFloat(max);
                            else
                                FreenumMax = parseFloat(totalmax);

                            let stockSelection = $("#StockSelection").text();

                            let num = data.get("Num");

                            if (stockSelection.toLowerCase() == "stock") {
                                if ((FreeNum.value() + parseFloat(num)) > FreenumMax && FreenumMax != "") {
                                    first = true;
                                    $(this).focus();
                                    
                                    FreeNum.value(FreenumMax - num);
                                    data.set("FreeNum", FreenumMax - num);
                                    return;
                                }
                            }
                            else {
                                if ((FreeNum.value() + parseFloat(num)) > FreenumMax && FreenumMax != "") {
                                    first = true;
                                    $(this).focus();
                                    FreeNum.value(previuseNum);
                                    data.set("FreeNum", previuseNum);
                                    return;
                                }

                            }


                            let data_zero = getGridData(0);

                            if (data_zero !== undefined) {
                                index += 1;
                            }

                            let salePrice = data.get("SalePrice");

                            if (parseFloat(salePrice) == 0) {
                                grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + saleIndex + ")"));
                            }
                            else {
                                AddNewSaleInvoiceDetail(data, index, true, true);
                            }

                        //if (RTL === "True")
                        //    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + currencyIndex + ")"));
                        //else
                        //    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + currencyIndex + ")"));
                        }
                        

                    }
                });

                $(e.container.find("input[name=FreeNum]")).on("focus", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
            else if (Currency !== undefined) {
                let lock = $("#lock").text();

                if (lock.toLocaleLowerCase() == "true") {
                    Currency.enable(false);
                }
                Currency.open();
                let index = parseInt($(e.container.find("input[name=Currency]")).closest('td').attr('data-Index'));

                var data = getGridData(index);
                let childs = data.get("ChildrenCount");

                if (childs > 1)
                    Currency.enable(false);
                const SalePriceChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='SalePrice']");


                const SalePriceIndex = $(SalePriceChild).parent().children().index(SalePriceChild);

                $(e.container.find("input[name=Currency]")).parent().on("keypress", function (e) {

                    if (e.which === 13) {

                        let data_zero = getGridData(0);

                        if (data_zero !== undefined) {
                            index += 1;
                        }

                        if (RTL === "True")
                            grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + SalePriceIndex + ")"));
                        else
                            grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + SalePriceIndex + ")"));

                    }
                });

            }
            else if (SalePrice !== undefined) {
                let lock = $("#lock").text();

                if (lock.toLocaleLowerCase() == "true") {
                    SalePrice.enable(false);
                }
                let index = parseInt($(e.container.find("input[name=SalePrice]")).closest('td').attr('data-Index'));

                var data = getGridData(index);

                let childs = data.get("ChildrenCount");

                if (childs > 1)
                    SalePrice.enable(false);

                if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                    SalePrice.bind("change", function () {
                        AddNewSaleInvoiceDetail(data, index, false, false);

                    });
                }

                const DiscountChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='Discount']");

                const DiscountIndex = $(DiscountChild).parent().children().index(DiscountChild);

                $(e.container.find("input[name=SalePrice]")).on("keypress", function (e) {

                    if (e.which === 13) {

                        

                        var data = getGridData(index);

                        console.log(data.get("FirstPrice"));

                        WholePrice(index);
                        let purchasePrice = data.get("PurchasePrice");

                        let PPrice = purchasePrice.match(/\d/g);
                        PPrice = PPrice.join("");

                        let PCurrency = purchasePrice.split(" ");


                        let salePrice = $(this).val();
                        let saleCurrency = data.get("CurrencyName");
                        let moneyConvert = data.get("MoneyConvertTxt");
                        setProfit(parseFloat(PPrice), PCurrency[1], parseFloat(salePrice), saleCurrency, moneyConvert, index);

                        let data_zero = getGridData(0);

                        if (data_zero !== undefined) {
                            index += 1;
                        }

                        grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + DiscountIndex + ")"));

                    }
                });

                $(e.container.find("input[name=SalePrice]")).on("focus", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });
            }
            else if (Discount !== undefined) {
                let lock = $("#lock").text();

                if (lock.toLocaleLowerCase() == "true") {
                    Discount.enable(false);
                }
                let index = parseInt($(e.container.find("input[name=Discount]")).closest('td').attr('data-Index'));

                var data = getGridData(index);

                let childs = data.get("ChildrenCount");

                if (childs > 1)
                    Discount.enable(false);

                if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                    Discount.bind("change", function () {
                        AddNewSaleInvoiceDetail(data, index, false, false);

                    });

                }


                $(e.container.find("input[name=Discount]")).on("keypress", function (e) {

                    if (e.which === 13) {

                        var data = getGridData(index);
                        let sale = data.get('SalePrice');
                        let discount = $(this).val();
                        if (discount > sale) {
                            $(this).select();
                            return;
                        }

                        let data_zero = getGridData(0);

                        if (data_zero !== undefined) {
                            index += 1;
                        }

                        let purchasePrice = data.get("PurchasePrice");
                        let saleCurrency = data.get("CurrencyName");
                        let PCurrency = purchasePrice.split(" ");


                        let currencyEqualant = true;
                        if (saleCurrency == PCurrency[1]) {
                            currencyEqualant = true;
                        }
                        else {
                            currencyEqualant = false;
                        }

                        const MoneyConvertChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='MoneyConvert']");

                        const MoneyConvertIndex = $(MoneyConvertChild).parent().children().index(MoneyConvertChild);

                        const WholesalePriceChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='WholesalePrice']");

                        const WholesalePriceIndex = $(WholesalePriceChild).parent().children().index(WholesalePriceChild);

                        if (currencyEqualant)
                            grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + WholesalePriceIndex + ")"));
                        else
                            grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + MoneyConvertIndex + ")"));

                        //if (RTL === "True") {
                        //    if (currencyEqualant)
                        //        grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + WholesalePriceIndex + ")"));
                        //    else
                        //        grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + MoneyConvertIndex + ")"));

                        //}
                        //else {
                        //    if (currencyEqualant)
                        //        grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + WholesalePriceIndex + ")"));
                        //    else
                        //        grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + MoneyConvertIndex + ")"));
                        //}

                    }
                });

                $(e.container.find("input[name=Discount]")).on("focus", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });
            }
            else if (MoneyConvert !== undefined) {
                let lock = $("#lock").text();

                if (lock.toLocaleLowerCase() == "true") {
                    MoneyConvert.enable(false);
                }
                let index = parseInt($(e.container.find("input[name=MoneyConvert]")).closest('td').attr('data-Index'));

                var data = getGridData(index);

                let childs = data.get("ChildrenCount");

                if (childs > 1)
                    MoneyConvert.enable(false);

                let purchasePrice = data.get("PurchasePrice");
                let saleCurrency = data.get("CurrencyName");
                let PCurrency = purchasePrice.split(" ");

                if (saleCurrency == PCurrency[1]) {
                    MoneyConvert.enable(false);
                }

                const WholesalePriceChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='WholesalePrice']");

                const WholesalePriceIndex = $(WholesalePriceChild).parent().children().index(WholesalePriceChild);

                MoneyConvert.open();

                $(e.container.find("input[name=MoneyConvert]")).parent().on("keypress", function (e) {

                    if (e.which === 13) {

                        let data_zero = getGridData(0);

                        if (data_zero !== undefined) {
                            index += 1;
                        }

                        grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + WholesalePriceIndex + ")"));

                        //if (RTL === "True")
                        //    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(3)"));
                        //else
                        //    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(11)"));


                    }
                });

            }
            else if (WholesalePrice !== undefined) {
                let lock = $("#lock").text();

                if (lock.toLocaleLowerCase() == "true") {
                    WholesalePrice.enable(false);
                }
                let index = parseInt($(e.container.find("input[name=WholesalePrice]")).closest('td').attr('data-Index'));

                var data = getGridData(index);

                let childs = data.get("ChildrenCount");

                if (childs > 1)
                    WholesalePrice.enable(false);

                if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                    WholesalePrice.bind("change", function () {
                        AddNewSaleInvoiceDetail(data, index, false, false);

                    });

                }

                const ProfitChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='Profit']");

                const ProfitIndex = $(ProfitChild).parent().children().index(ProfitChild);


                $(e.container.find("input[name=WholesalePrice]")).on("keypress", function (e) {

                    if (e.which === 13) {

                        var data = getGridData(index);
                        let whole = WholesalePrice.value();
                        let num = data.get("Num");
                        let price = whole / num;
                        data.set("SalePrice", price.toFixed(2));

                        let purchasePrice = data.get("PurchasePrice");

                        let PPrice = purchasePrice.match(/\d/g);
                        PPrice = PPrice.join("");

                        let PCurrency = purchasePrice.split(" ");

                        let salePrice = data.get("SalePrice");
                        let saleCurrency = data.get("CurrencyName");
                        let moneyConvert = data.get("MoneyConvertTxt");

                        setProfit(parseFloat(PPrice), PCurrency[1], parseFloat(salePrice), saleCurrency, moneyConvert, index);

                        let data_zero = getGridData(0);

                        if (data_zero !== undefined) {
                            index += 1;
                        }

                        grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + ProfitIndex + ")"));

                    }
                });


                $(e.container.find("input[name=WholesalePrice]")).on("focus", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
            else if (Profit !== undefined) {

                let lock = $("#lock").text();

                if (lock.toLocaleLowerCase() == "true") {
                    Profit.enable(false);
                }

                let index = parseInt($(e.container.find("input[name=Profit]")).closest('td').attr('data-Index'));

                var data = getGridData(index);

                let childs = data.get("ChildrenCount");

                if (childs > 1)
                    Profit.enable(false);

                if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                    Profit.bind("change", function () {
                        let purchasePrice = data.get("PurchasePrice");

                        let profit = data.get("Profit");

                        let PPrice = purchasePrice.match(/\d/g);
                        PPrice = PPrice.join("");

                        let PCurrency = purchasePrice.split(" ");

                        let salePrice = data.get("SalePrice");
                        let saleCurrency = data.get("CurrencyName");
                        let moneyConvert = data.get("MoneyConvertTxt");
                        SetSellPrice(profit, parseInt(PPrice), PCurrency[1], parseInt(salePrice), saleCurrency, moneyConvert, index);

                        AddNewSaleInvoiceDetail(data, index, false, false);

                    });

                }

                const ConsiderationChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='Consideration']");

                const ConsiderationIndex = $(ConsiderationChild).parent().children().index(ConsiderationChild);


                $(e.container.find("input[name=Profit]")).on("keypress", function (e) {

                    if (e.which === 13) {

                        let data_zero = getGridData(0);

                        if (data_zero !== undefined) {
                            index += 1;
                        }

                        grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + ConsiderationIndex+")"));

                        //if (RTL === "True")
                        //    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(1)"));
                        //else
                        //    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(13)"));

                    }

                    //SetSellPrice(profit, purchasePrice, purchaseCurrency, salePrice, saleCurrency, moneyConvert, index)
                });

                $(e.container.find("input[name=Profit]")).on("focus", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
            else if (Consideration !== undefined) {

                let lock = $("#lock").text();

                if (lock.toLocaleLowerCase() == "true") {
                    Consideration.enable(false);
                }

                let index = parseInt($(e.container.find("input[name=Consideration]")).closest('td').attr('data-Index'));
                var data = getGridData(index);
                let childs = data.get("ChildrenCount");

                if (childs > 1)
                    Consideration.enable(false);


                $(e.container.find("input[name=Consideration]")).on("keypress", function (e) {

                    if (e.which === 13) {

                        let ms = $(this).val();
                        var data = getGridData(index);
                        data.set("Consideration", ms);

                        AddNewSaleInvoiceDetail(data, index, true,true);

                    }
                });

                $(e.container.find("input[name=Consideration]")).on("focus", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
        }


    }

    function WholePrice(index) {
        var data = getGridData(index);

        let salePrice = data.get("SalePrice");
        let num = data.get("Num");
        let price = salePrice * num;
        data.set("WholesalePrice", price.toFixed(2));
    }

    function getGridData(index) {
        var grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");
        let data = grid.dataSource._data.find(a => a.Index == index);

        return data;
    }

    let newL = false;

    let doubleClick = false;

    let total = [];

    function datasourceFinish(e) {
        //SetTotalPricess();
        total = [];

        for (let i = 0; i < e.response.length; i++) {

            let ex = total.find(a => a.CurrencyId == e.response[i].CurrencyId);



            if (ex != undefined) {

                ex.Total += (e.response[i].SalePrice * e.response[i].Num) - e.response[i].Discount;

            }
            else {
                total.push({ CurrencyId: e.response[i].CurrencyId, CurrencyName: e.response[i].CurrencyName, Total: ((e.response[i].SalePrice * e.response[i].Num) - e.response[i].Discount) });
            }
        }


        $("#CurrencyRecieving").empty();
        for (let i = 0; i < total.length; i++) {
            $.ajax({
                data: { Id: total[i].CurrencyId, Name: total[i].CurrencyName, Number: total.length },
                url: "/SaleInvoiceDetail/CurrencyModal",
                success: function (response) {

                    CreateCurrencyModals(response, i);


                }
            });
        }

        GetAllCurrenceis().done(function (data) {

            Currency_list = data.sort(
                (p1, p2) => (p1.Id > p2.Id) ? 1 : (p1.Id < p2.Id) ? -1 : 0);
            let number = Currency_list.length;

            if (number > 1 /*&& e.response.length>0*/) {
                let grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");
                grid.showColumn("MoneyConvert");

            }

            if (number == 1) {

                RemainAfterRecieve(Currency_list[0].Id);

                //CreateCurrencyTab(Currency_list[0]);

            }

            if (number === 2) {
                $("#TotalCurrencyRecieving").removeClass('hidden');

                GetAllMoneyConverts(Currency_list[0].Id, Currency_list[1].Id).done(function (data) {

                    const key = 'ShowMoneyConvert';

                    MoneyConvert_list = [...new Map(data.map(item =>
                        [item[key], item])).values()];

                    for (let i = 0; i < number; i++) {
                        RemainAfterRecieve(Currency_list[i].Id);
                    }

                    CreateCurrencyTab(Currency_list, true);

                });

            }

            if (number > 2) {

                $("#TotalCurrencyRecieving").removeClass('hidden');

                CreateCurrencyTab(Currency_list, false);

            }

        });

    }

    function CreateCurrencyModals(response, ind) {

        $("#CurrencyRecieving").append(response);

        $("#Total-" + total[ind].CurrencyId).text(total[ind].Total);

        GetReceiveAndDiscount($("#Guid").val(), total[ind].CurrencyId);



    }


    function CreateCurrencyTab(CurrencyList, HasMoneyConvert) {

        $("#CurrencyTabstrip").empty();
        $("#CurrencyTabstrip").append("<ul id='CurrencyTabstripList'></ul >");
        for (let i = 0; i < CurrencyList.length; i++) {

            $("#CurrencyTabstripList").append("<li>" + CurrencyList[i].Name + "</li>");


            let all = "";

            for (let j = 0; j < CurrencyList.length; j++) {

                if (CurrencyList[i].Id != CurrencyList[j].Id) {

                    let totalTxt = "<div class='col-sm-12' style = 'display:flex;align-items:center;margin-top:0.5rem;padding-top:0.5rem;font-size:1.5rem;'><div class='col-sm-6 col-lg-2' style='display:flex'><span>@Localizer["Remain"]</span> <span style='margin: 0 0.2rem'>" + CurrencyList[j].Name + "</span><span style='margin: 0 0.5rem'> : </span><span>"  /*$("#RemainAfterRecieve-" + CurrencyList[j].Id).text() */+ "</span></div>";

                    let moneyConvert = "<div  class='col-sm-3' style='direction:ltr'><input id='TotalMoneyConvertId" + CurrencyList[i].Id + CurrencyList[j].Id + "' class='dropDownMoneyConvert'" +
                        " data-base='" + CurrencyList[i].Id +
                        "' data-dest='" + CurrencyList[j].Id + "'  /></div>";

                    let totalConvertedPrice = "<div class='col-sm-3' style='margin: 0 0.5rem'> : <span id='TotalConvertedPrice-" + CurrencyList[i].Id + CurrencyList[j].Id + "'></span></div></div>";

                    all += totalTxt + moneyConvert + totalConvertedPrice;
                }
                else {

                    let totalTxt = "<div class='col-sm-12' style = 'display:flex;align-items:center;margin-top:0.5rem;padding-top:0.5rem;font-size:1.5rem;'><div class='col-sm-6 col-lg-2' style='display:flex'><span>@Localizer["Remain"]</span> <span style='margin: 0 0.2rem'>" + CurrencyList[j].Name + "</span><span style='margin: 0 0.5rem'> : </span><span>"  /*$("#RemainAfterRecieve-" + CurrencyList[j].Id).text()*/ + "</span></div>";

                    let moneyConvert = "<div  class='col-sm-3' style='direction:ltr'><span>1" + CurrencyList[j].Name + " = 1 " + CurrencyList[j].Name + "</span></div>";

                    let remainAfterRecieve = $("#RemainAfterRecieve-" + CurrencyList[j].Id).text();

                    if (remainAfterRecieve == "")
                        remainAfterRecieve = 0;

                    let totalConvertedPrice = "<div class='col-sm-3' style='margin: 0 0.5rem'> : <span id='TotalConvertedPrice-" + CurrencyList[i].Id + CurrencyList[j].Id + "'>" + remainAfterRecieve +"</span></div></div>";

                    all += totalTxt + moneyConvert + totalConvertedPrice;

                }
            }


            let addTotalButton = " <div class='col-sm-12' style='border-top:gray dotted 1px; margin-top:1rem;padding-top:1rem'><div class='col-sm-6 col-lg-2'></div><div class='col-sm-3'></div><div class='col-sm-3'><span id='TotalPrice-" + CurrencyList[i].Id + "'></span><button id='btn-addTotal-accept" + CurrencyList[i].Id + "' class='k-button k-primary' style='margin: 0 1rem' data-base='" + CurrencyList[i].Id + "' onclick='ReceiveTotalConvertedMoney(this)'>@Localizer["Receive"]</button></div></div>";


            $("#CurrencyTabstrip").append("<div  id='currencyTab" + CurrencyList[i].Id + "'" +
                "style = 'display:flex;align-items:center;margin-top:0.5rem;padding-top:0.5rem;font-size:1.5rem;flex-wrap: wrap' > " +
                all + addTotalButton + "</div> ");



        }

        if (HasMoneyConvert) {

            let dropdown = $(".dropDownMoneyConvert");

            for (let i = 0; i < dropdown.length; i++) {

                $(dropdown[i]).kendoDropDownList({
                    dataTextField: "ShowMoneyConvert",
                    dataValueField: "Guid",
                    dataSource: MoneyConvert_list,
                    change: CalculateTotalPrices
                });

            }

        }
        else {

            let dropdown = $(".dropDownMoneyConvert");

            for (let i = 0; i < dropdown.length; i++) {

                let base = $(dropdown[i]).attr('data-base');
                let dest = $(dropdown[i]).attr('data-dest');

                $(dropdown[i]).kendoDropDownList({
                    dataTextField: "ShowMoneyConvert",
                    dataValueField: "Guid",
                    dataSource: {
                        transport: {
                            read: "/MoneyConvert/GetLatestMoneyConvertsWithIsMain?baseCurrencyId=" + base + "&&destCurrencyId=" + dest
                        },
                        requestEnd: dropDownFinish,
                    }
                });

            }

        }


        $("#CurrencyTabstrip").kendoTabStrip({
            animation: false,
            //collapsible: true
        }).data("kendoTabStrip").select(1);

        $("#CurrencyTabstrip").data("kendoTabStrip").select(0);

        CalculateTotalPrices();

    }

    function ReceiveTotalConvertedMoney(element) {
        let lock = $("#lock").text();
        if (lock.toLocaleLowerCase() == "true") {
            return;
        }

        let currencyId = $(element).attr('data-base');

        let ReceiveAmounts = [];

        for (let i = 0; i < Currency_list.length; i++) {
            let amount = parseFloat($("#TotalConvertedPrice-" + currencyId + Currency_list[i].Id).text().split(' ')[0]);

            if (amount > 0) {

                if (currencyId == Currency_list[i].Id) {

                    ReceiveAmounts.push({
                        Amount: amount,
                        BaseCurrencyId: currencyId,
                        CurrencyId: currencyId,
                        BaseAmount: 1,
                        DestAmount: 1
                    });
                }
                else {


                    let dataItem = $("#TotalMoneyConvertId" + currencyId + Currency_list[i].Id).data("kendoDropDownList").dataItem();

                    if (currencyId == dataItem.BaseCurrencyId) {
                        ReceiveAmounts.push({
                            Amount: amount,
                            BaseCurrencyId: Currency_list[i].Id,
                            CurrencyId: currencyId,
                            BaseAmount: dataItem.BaseAmount,
                            DestAmount: dataItem.DestAmount
                        });
                    }
                    else {

                        ReceiveAmounts.push({
                            Amount: amount,
                            BaseCurrencyId: Currency_list[i].Id,
                            CurrencyId: currencyId,
                            BaseAmount: dataItem.DestAmount,
                            DestAmount: dataItem.BaseAmount
                        });

                    }

                }

            }

        }


        if (ReceiveAmounts.length > 0) {
            let saleId = $("#Guid").val();

            let customerId = $("#CustomerId").val();




            let data = {
                ReceiveAmounts: ReceiveAmounts,
                SaleInvoiceId: saleId,
                CustomerId: customerId
            }


            $.ajax({
                data: data,
                type: "post",
                url: "/Receive/AddOrUpdate",
                success: function (response) {

                    for (let i = 0; i < Currency_list.length; i++) {

                        GetReceiveAndDiscount($("#Guid").val(), Currency_list[i].Id);

                    }


                }
            });
        }


    }


    function dropDownFinish(e) {

        CalculateTotalPrices();

    }

    function CalculateTotalPrices() {


        for (let i = 0; i < Currency_list.length; i++) {

            let total=0;

            for (let j = 0; j < Currency_list.length; j++) {

                if (Currency_list[i].Id != Currency_list[j].Id) {

                    let dropdown = $("#TotalMoneyConvertId" + Currency_list[i].Id + Currency_list[j].Id).data("kendoDropDownList");

                    if (dropdown != undefined) {
                        var dataItem = dropdown.dataItem();

                        if (dataItem != undefined) {

                            let totalConvertedPrice;
                            let currency;

                            if (Currency_list[i].Id == dataItem.BaseCurrencyId) {

                                let dest = $("#RemainAfterRecieve-" + dataItem.DestCurrencyId).text();
                                let base = $("#RemainAfterRecieve-" + dataItem.BaseCurrencyId).text();

                                totalConvertedPrice = parseFloat(dest * (dataItem.BaseAmount / dataItem.DestAmount))/* + parseFloat(base)*/;

                                currency = dataItem.BaseCurrencyName;

                            }
                            else {

                                let dest = $("#RemainAfterRecieve-" + dataItem.BaseCurrencyId).text();
                                let base = $("#RemainAfterRecieve-" + dataItem.DestCurrencyId).text();

                                totalConvertedPrice = parseFloat(dest * (dataItem.DestAmount / dataItem.BaseAmount))/* + parseFloat(base)*/;
                                currency = dataItem.DestCurrencyName;

                            }

                            $("#TotalConvertedPrice-" + Currency_list[i].Id + Currency_list[j].Id).text(totalConvertedPrice.toFixed(2) + " " + currency);
                        }
                    }


                }
                else {
                    let totalConvertedPrice;
                    let currency = Currency_list[i].Name;
                    totalConvertedPrice = parseFloat($("#RemainAfterRecieve-" + Currency_list[i].Id).text());

                    if (isNaN(totalConvertedPrice)) {

                        totalConvertedPrice = 0;
                    }
                    $("#TotalConvertedPrice-" + Currency_list[i].Id + Currency_list[j].Id).text(totalConvertedPrice.toFixed(2) + " " + currency);
                }

                let amount = $("#TotalConvertedPrice-" + Currency_list[i].Id + Currency_list[j].Id).text();

                total += parseFloat(amount);

            }

            $("#TotalPrice-" + Currency_list[i].Id).text(total.toFixed(2) + " " + Currency_list[i].Name);


        }



    }

    function GetReceiveAndDiscount(saleId,currencyId) {

        $.when(GetSaleInvoiceDiscount(saleId, currencyId), GetSaleInvoiceReceive(saleId, currencyId)).done(function (discount, receive) {

            if (discount[0] != null) {

                let total = $("#Total-" + currencyId).text();

                $("#Discount-" + currencyId).data("kendoNumericTextBox").value(discount[0].Amount);

                let percent = (discount[0].Amount / parseFloat(total)) * 100;
                
                $("#DiscountPercent-" + currencyId).data("kendoNumericTextBox").value(percent);

                $("#guid-" + currencyId).text(discount[0].Guid);
            }

            if (receive[0] != null) {
                if (typeof receive[0] == 'number') {
                    $("#Recieved-" + currencyId).text(receive[0]);

                }
            }

            setTimeout(() => {
                RemainAfterRecieve(currencyId);
                CalculateTotalPrices();
            });
            

        });

    }


    function GetSaleInvoiceDiscount(saleInvoiceId, CurrencyId) {
        return $.ajax({
            data: { SaleInvoiceId: saleInvoiceId, CurrencyId: CurrencyId },
            url: "/SaleInvoiceDiscount/GetSaleInvoiceDiscount",
            
        });

    }

    function GetSaleInvoiceReceive(saleInvoiceId, CurrencyId) {
        return $.ajax({
            data: { SaleInvoiceId: saleInvoiceId, CurrencyId: CurrencyId},
            url: "/Receive/GetSaleInvoiceReceives",
           
        });

    }


    function grid_dataBound(e) {
        if(newL)
            AddNewRow();
        newL = false;


        var grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");

        let data = grid.dataSource._data;
        for (let i = 0; i < data.length; i++) {

            let purchasePrice = data[i].get("PurchasePrice");
            let purchasePriceNum = data[i].get("PurchasePriceNumeric");
            let ind = data[i].get("Index");

            let PPrice = purchasePrice.match(/\d/g);
            if (PPrice != null && ind != "" && ind != null) {
                PPrice = PPrice.join("");

                let PCurrency = purchasePrice.split(" ");


                let salePrice = data[i].get("SalePrice");
                let saleCurrency = data[i].get("CurrencyName");
                let moneyConvert = data[i].get("MoneyConvertTxt");
                setProfit(parseFloat(purchasePriceNum), PCurrency[1], parseFloat(salePrice), saleCurrency, moneyConvert, ind);
            }


        }

        let RTL = $("#RTL").attr("data-Value");

        if (RTL === "True")
            $(".k-hierarchy-cell").children().addClass('hidden');

        

        setTimeout(() => {
            const freeNumChild = $("#SaleInvoiceDetailKendoGrid tr:eq(0) th[data-field='MoneyConvert']");
            const idx = $(freeNumChild).parent().children().index(freeNumChild);

            if (grid.tbody.closest("table").children("tbody").children("tr").length > 0) {
                $(grid.thead.closest("table").children("colgroup").find("col").eq(idx)).css('min-width', '150px');
                $(grid.tbody.closest("table").children("colgroup").find("col").eq(idx)).css('min-width', '150px');
            }
            if (RTL === "True")
                $("#SaleInvoiceDetailKendoGrid .k-auto-scrollable").scrollLeft(1000);
            else 
                $("#SaleInvoiceDetailKendoGrid .k-auto-scrollable").scrollLeft(0);

            for (let i = 0; i < expandedRows.length; i++) {
                grid.expandRow(".k-master-row:eq(" + parseInt(expandedRows[i] - 1) + ")");
                let sc = $("#SaleInvoiceDetailKendoGrid .k-master-row:eq(" + parseInt(expandedRows[i] - 1) + ") .fa-caret-left");
                $(sc).removeClass('fa-caret-left');
                $(sc).addClass('fa-caret-down');

            }

        },500)
      

    }

    function AddNewSaleInvoiceDetail(data, index, changeNum, newLine) {
        let lock = $("#lock").text();
        if (lock.toLocaleLowerCase() == "true") {
            return;
        }
        if (!doubleClick) {

            doubleClick = true;

            const discountChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='Discount']");


            const discountIndex = $(discountChild).parent().children().index(discountChild);

            let currentStock = $("#CurrentStock").is(":checked");

            let nearestExpire = $("#NearestExpire").is(":checked");

            var grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");

            if (parseInt(data.get("Discount")) > parseInt(data.get("SalePrice"))) {
                if (RTL === "True")
                    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + discountIndex + ")"));
                else
                    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + discountIndex + ")"));
                return;
            }

            if (data.get("SalePrice") == 0)
                return;

            let saleInvoiceDetail = {

                Guid: data.get("Guid"),
                SaleInvoiceId: $('#Guid').val(),
                Num: data.get("Num"),
                SalePrice: data.get("SalePrice"),
                //OldSalePrice: data.get("FirstPrice"),
                SalePriceTxt: data.get("SalePrice").toString(),
                PurchaseInvoiceDetailId: data.get("PurchaseInvoiceDetailId"),
                InvoiceType: data.get("InvoiceType"),
                Consideration: data.get("Consideration"),
                //ExpireDate: data.get("ExpireDate"),
                FreeNum: data.get("FreeNum"),
                Discount: data.get("Discount"),
                DiscountTxt: data.get("Discount").toString(),
                CurrencyId: data.get("CurrencyNameId"),
                CurrencyName: data.get("CurrencyName"),
                ProductId: data.get("ProductId"),
                BujNumber: data.get("BujNumber"),
                MoneyConvertId: data.get("MoneyConvertTxtId"),
                ChangeNum: changeNum,
                CurrentStock: currentStock,
                NearestExpire: nearestExpire,
                WholesalePrice: data.get("WholesalePrice"),
                ChildrenGuids: data.get("ChildrenGuids"),
            }


            $.ajax({
                data: { SaleInvoiceDetail: saleInvoiceDetail },
                url: "/SaleInvoiceDetail/AddOrUpdate",
                type: "Post",
                success: function (response) {
                    doubleClick = false;
                    if (response == "stocknotenough") {
                        $("#ProductStock-box").removeClass("hidden");
                    }
                    else if (response != 0) {

                        if (newLine)
                            newL = true;

                        $("#SaleInvoiceDetailKendoGrid").find(".k-i-reload").click();
                        $("#ProductStock-box").addClass("hidden");

                    }
                    else {
                        $("#ProductStock-box").removeClass("hidden");
                    }
                }
            });
        }


    }

    function SaveChanges(index) {
        let lock = $("#lock").text();
        if (lock.toLocaleLowerCase() == "true") {
            return;
        }

        var data = getGridData(index);


        let changeList = [];

        let grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");

        var data = grid.dataSource._data;

        for (let i = 0; i < data.length; i++) {

            if (data[i].dirty) {

                let saleInvoiceDetail =
                {
                    Guid: data[i].get("Guid"),
                    SaleInvoiceId: $('#Guid').val(),
                    Num: data[i].get("Num"),
                    SalePrice: data[i].get("SalePrice"),
                    PurchaseInvoiceDetailId: data[i].get("PurchaseInvoiceDetailId"),
                    InvoiceType: data[i].get("InvoiceType"),
                    Consideration: data[i].get("Consideration"),
                    //ExpireDate: data.get("ExpireDate"),
                    FreeNum: data[i].get("FreeNum"),
                    Discount: data[i].get("Discount"),
                    CurrencyId: data[i].get("CurrencyNameId"),
                    ProductId: data[i].get("ProductId"),
                    BujNumber: data[i].get("BujNumber"),
                    MoneyConvertId: data[i].get("MoneyConvertTxtId")
                }


                //$.ajax({
                //    data: { SaleInvoiceDetail: saleInvoiceDetail },
                //    url: "/SaleInvoiceDetail/AddOrUpdate",
                //    type: "Post",
                //    success: function (response) {
                //        if (response != 0 && ) {


                //        }
                //        else {
                //            $("#ProductStock-box").removeClass("hidden");
                //        }
                //    }
                //});

            }

        }

        let newData = data.find(a => a.Index == 0);

        if (newData != undefined) {

            changeList.push(
                {
                    Guid: newData.get("Guid"),
                    SaleInvoiceId: $('#Guid').val(),
                    Num: newData.get("Num"),
                    SalePrice: newData.get("SalePrice"),
                    PurchaseInvoiceDetailId: newData.get("PurchaseInvoiceDetailId"),
                    InvoiceType: newData.get("InvoiceType"),
                    Consideration: newData.get("Consideration"),
                    FreeNum: newData.get("FreeNum"),
                    Discount: newData.get("Discount"),
                    CurrencyId: newData.get("CurrencyNameId"),
                    ProductId: newData.get("ProductId"),
                    BujNumber: newData.get("BujNumber"),
                    MoneyConvertId: newData.get("MoneyConvertTxtId")
                }
            )

        }



    }

    function removeSaleInvoiceDetailGrid(element) {

        let lock = $("#lock").text();
        if (lock.toLocaleLowerCase() == "true") {
            return;
        }
        let childrenGuid = $(element).closest('td').attr('data-ChildrenGuids');
        let guid = $(element).closest('td').attr('data-Guid');
        let Count = $(element).closest('td').attr('data-Count');
        let index = $(element).closest('td').attr('data-Index');
        expandedRows.pop(index);

        if (Count == undefined || Count == "") {
            Count = 0;
        }

        var pattern = /^([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})|[0-9]+$/i;

        bootbox.confirm({
            message: "Delete This Record?",
            className: 'bootbox-class MyFont-Sarchia-grid',
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'k-primary k-button'
                },
                cancel: {
                    label: 'No',
                    className: 'k-button'
                }
            },
            callback: function (result) {

                if (result) {
                    if (Count > 1) {

                        $.ajax({
                            data: { Guids: childrenGuid },
                            url: "/SaleInvoiceDetail/Remove",
                            type: "Post",
                            success: function (response) {
                                if (response != 0) {

                                    $("#SaleInvoiceDetailKendoGrid").find(".k-i-reload").click();

                                    let grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");

                                    if ($(element).hasClass('fa-caret-left')) {
                                        $(element).removeClass('fa-caret-left');
                                        $(element).addClass('fa-caret-down');
                                        grid.expandRow($(element).parent());
                                    }
                                    else {
                                        $(element).removeClass('fa-caret-down');
                                        $(element).addClass('fa-caret-left');
                                        grid.collapseRow($(element).parent());
                                    }

                                }
                            }
                        });


                    }
                    else {
                        if (/*pattern.test(guid) !== true || */guid === "00000000-0000-0000-0000-000000000000" || guid === "0") {
                            var grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");
                            var data = getGridData(index);
                            grid.dataSource.remove(data);
                        }
                        else {
                            $.ajax({
                                data: { Guids: guid },
                                url: "/SaleInvoiceDetail/Remove",
                                type: "Post",
                                success: function (response) {
                                    if (response != 0) {

                                        $("#SaleInvoiceDetailKendoGrid").find(".k-i-reload").click();

                                    }
                                }
                            });
                        }
                    }



                }
                else {
                    return;
                }
            }
        })




    }

    function editSaleInvoiceDetailGrid(element) {
        let lock = $("#lock").text();
        if (lock.toLocaleLowerCase() == "true") {
            return;
        }
        let index = parseInt($(element).closest('td').attr('data-Index'));

        var data = getGridData(index);

        if (data.dirty)
            AddNewSaleInvoiceDetail(data);
    }

    function ConsiderationClick(e) {
        var grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");

        setTimeout(() => {
            grid.closeCell();
        })


    }

    function GetAllProductsWithBarcode() {
        return $.ajax({
            type: "Get",
            url: "/Product/GetAllProductsWithBarcodeForFilter",
        });
    }

    function GetAllCurrenceis() {
        return $.ajax({
            type: "Get",
            url: "/BaseInfo/GetAllCurrencies",
        });
    }

    function GetAllMoneyConverts(baseCurrency, destCurrency) {
        return $.ajax({
            type: "Get",
            url: "/MoneyConvert/GetLatestMoneyConvertsWithIsMain?baseCurrencyId=" + baseCurrency + "&&destCurrencyId=" + destCurrency,
        });
    }

    function AddNewRow() {
        $("#SalePriceTypeId-box").addClass('hidden');
        expandedRows = [];

        let lock = $("#lock").text();
        if (lock.toLocaleLowerCase() == "true") {
            return;
        }
        let grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");
        //var data = grid.dataSource.at(0);
        var data = getGridData(0);

        let RTL = $("#RTL").attr("data-Value");
        let canAddRow = true;

        let guid = $("#Guid").val();

        if (guid == "" || guid == "00000000-0000-0000-0000-000000000000") {
            $(this).attr("disabled", true);
            let upd = UpdateSaleInvoiceMaster();
            if (!upd)
                return;
            $('#SalePriceTypeId').data('kendoDropDownList').enable(false);
        }
        else {
            let emptyData = grid.dataSource._data.find(a => a.Index == "");


            if (data != undefined) {
                if (data.get("CurrencyNameId") != 0)
                    AddNewSaleInvoiceDetail(data, 0, true, true);
                canAddRow = false;
            }

            if (emptyData != undefined)
                canAddRow = false;
            if (canAddRow) {
                grid.addRow();
                const freeNumChild = $("#SaleInvoiceDetailKendoGrid tr:eq(" + (1) + ") td[data-field='ProductName']");

                const freeNumIndex = $(freeNumChild).parent().children().index(freeNumChild);

                if (RTL === "True")
                    grid.editCell($("#SaleInvoiceDetailKendoGrid td:eq(" + freeNumIndex + ")"));
                else
                    grid.editCell($("#SaleInvoiceDetailKendoGrid td:eq(" + freeNumIndex + ")"));
            }
        }

    }

    function UpdateSaleInvoiceMaster() {
        let lock = $("#lock").text();
        if (lock.toLocaleLowerCase() == "true") {
            return false;
        }
        $("#addNewSaleInvoiceForm #ERROR_Data").addClass("hidden");
            $("#addNewSaleInvoiceForm #Date-valid").addClass("hidden");
            $("#addNewSaleInvoiceForm #ERROR_SomeThingWentWrong").addClass("hidden");

            $('#addNewSaleInvoiceForm .emptybox').addClass('hidden');
            var isEmmpty = true;
            $('.emptybox').each(function () {
                if ($(this).attr('data-isEssential') === 'true') {
                    var empty = $(this).attr('id');
                    if ($('[data-checkEmpty="' + empty + '"]').val() === "") {
                        $(this).removeClass('hidden');
                        isEmmpty = false;
                        $('#btn-addSaleSaleInvoice-accept').removeAttr("disabled");
                        return;
                    }
                }
            });

            if (isEmmpty === false) {
                return false;
            }

            var link = "/SaleInvoice/AddOrUpdate";

            let SaleInvoice = {
                Guid: $("#Guid").val(),
                CustomerId: $("#CustomerId").val(),
                InvoiceDateTxt: $("#InvoiceDateTxt").val(),
                Description: $("#Description").val(),
                SalePriceTypeId: $("#SalePriceTypeId").val(),

            };

            var data = SaleInvoice;
            $(".loader").removeClass("hidden");

            $.ajax({
                type: "Post",
                url: link,
                data: data,
                success: function (response) {

                    if (response !== 0) {

                        if (response === "DateNotValid") {

                            $('"#addNewSaleInvoiceForm #Date-valid"').removeClass('hidden');

                            $(".loader").fadeIn("slow");
                            $(".loader").addClass("hidden");

                        }
                        else if (response === "DataNotValid") {

                            $("#addNewSaleInvoiceForm #ERROR_Data").removeClass("hidden");
                            $(".loader").fadeIn("slow");
                            $(".loader").addClass("hidden");

                        }
                        else if (response === "ThereIsNoMoneyConvert") {

                            bootbox.alert({
                                message: " @Localizer["ThereIsNoMoneyConvert"]",
                                className: 'bootbox-class'
                            });
                            $(".loader").fadeIn("slow");
                            $(".loader").addClass("hidden");

                        }
                        else if (response.includes("YouHaveJust")) {

                            alert(response);
                            $(".loader").fadeIn("slow");
                            $(".loader").addClass("hidden");

                        }
                        else {

                            $(".loader").fadeIn("slow");
                            $(".loader").addClass("hidden");
                            $('#Guid').val(response);
                            let grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");
                            grid.dataSource.options.transport.read.url = "/SaleInvoiceDetail/GetAll?saleInvoiceId=" + response;
                            $('#btn-ShowDiscountsList').removeClass('hidden');
                            $('#btn-ShowCostsList').removeClass('hidden');
                            $('#btn-OkAndNew').removeClass('hidden');
                            $('#btn-AddMoneyConvert').removeClass('hidden');
                            grid.addRow();
                            if (RTL === "True")
                                grid.editCell($("#SaleInvoiceDetailKendoGrid td:eq(20)"));
                            else
                                grid.editCell($("#SaleInvoiceDetailKendoGrid td:eq(2)"));
                        }
                    } else {

                        $("#addNewSaleInvoiceForm #ERROR_SomeThingWentWrong").removeClass("hidden");
                        $(".loader").fadeIn("slow");
                        $(".loader").addClass("hidden");
                    }
                }
            });

    }

    function FilterProduct(product_list, filter) {

        var filter_list = product_list.filter(function (item) {
            if (this.count < 20 && item.ProductName.toLowerCase().indexOf(filter) > -1) {
                this.count++;
                return true;
            }

            return false;

        }, { count: 0 });

        return filter_list;

    }

    function ConsiderationEditor(container, options) {
        $('<input id="Consideration" name="' + options.field + '"/>')
            .appendTo(container)
            .kendoTextBox({
            });

    }

    function CurrencyEditor(container, options) {
        let index1 = $(container).closest('td').attr('data-Index');

        let grid1 = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");
        let data1 = grid1.dataSource._data.find(a => a.Index == index1);
        let cuName = data1.get("CurrencyName");

        $('<input id="CurrencyId" name="' + options.field + '"/>')
            .appendTo(container)
            .kendoDropDownList({
                dataTextField: "Name",
                dataValueField: "Name",
                dataSource: Currency_list,
                change: selectCurrency,
                value: cuName
            });

        function selectCurrency(e) {

            let index = $("#CurrencyId").closest('td').attr('data-Index');
            debugger;
            var grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");
            let data = grid.dataSource._data.find(a => a.Index == index);

            let dateitem = this.dataItem(e.item);

            if (data.get("CurrencyNameId") != dateitem.Id) {
                
                data.set("Currency", dateitem.Name);
                data.set("CurrencyName", dateitem.Name);
                data.set("CurrencyNameId", dateitem.Id);

                let purchasePrice = data.get("PurchasePrice");

                let purchaseCurencyName = purchasePrice.split(" ");

                if (dateitem.Name == purchaseCurencyName[1]) {
                    
                    data.set("MoneyConvertTxtId", "");
                    data.set("MoneyConvertTxt", "1 " + purchaseCurencyName[1] + " = 1 " + purchaseCurencyName[1]);
                    data.set("MoneyConvert", "1 " + purchaseCurencyName[1] + " = 1 " + purchaseCurencyName[1]);

                    let firstPrice = data.get("PurchasePriceNumeric");

                    let profit = data.get("Profit");

                    let sale = firstPrice + ((profit / 100) * firstPrice);

                    data.set("SalePrice", sale.toFixed(2));
                    data.set("OldSalePrice", sale.toFixed(2) + dateitem.Name);

                    WholePrice(index);

                    if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                        expandedRows = [];

                        AddNewSaleInvoiceDetail(data, index, false, false);

                    }

                }
                else {

                    let guid = data.get("PurchaseInvoiceDetailId");
                    let currencyId = dateitem.Id;
                    let saleType = data.get("InvoiceType");

                    let priceTypeText = $("#SalePriceTypeId").data("kendoDropDownList").dataItem();

                    let priceType = priceTypeText.Name;

                    $.ajax({
                        type: "Get",
                        data: { PurchaseInvoiceDetailId: guid, CurrencyId: currencyId, PriceType: priceType, SaleType: saleType},
                        url: "/PurchaseInvoiceDetail/GetPurchaseInvoiceDetailSalePrice",
                        success: function (response) {
                            if (response == null) {
                                debugger;
                                let moneyconvert = MoneyConvert_list.find(a => a.BaseCurrencyName == dateitem.Name && a.DestCurrencyName == purchaseCurencyName[1]);

                                if (moneyconvert == undefined || moneyconvert == null) {

                                    moneyconvert = MoneyConvert_list.find(a => a.BaseCurrencyName == purchaseCurencyName[1] && a.DestCurrencyName == dateitem.Name);

                                }

                                if (moneyconvert == undefined || moneyconvert == null) {

                                    $("#MoneyConvertModal #Date-valid").addClass("hidden");
                                    $("#MoneyConvertModal #ERROR_Data").addClass("hidden");
                                    $("#MoneyConvertModal #ERROR_SomeThingWentWrong").addClass("hidden");

                                    var link = "/MoneyConvert/AddNewModal";
                                    $(".loader").removeClass("hidden");


                                    $('#MoneyConvertModal').modal('toggle');
                                    $('#MoneyConvertModal-body').load(link, function () {
                                        $(".loader").fadeIn("slow");
                                        $(".loader").addClass("hidden");

                                        let firstCurrency = data.get("FirstCurrencyId");

                                        let base = $("#BaseCurrencyId").data("kendoDropDownList");
                                        base.value(firstCurrency);
                                        //base.enable(false);

                                        let dest = $("#DestCurrencyId").data("kendoDropDownList");
                                        dest.value(dateitem.Id);
                                        //dest.enable(false);

                                        //$("#btn-MoneyConvertModal-close").attr('disabled', true);
                                        //$("#MoneyConvertModal-header-closebtn").attr('disabled', true);

                                    });

                                }
                                else {

                                    data.set("MoneyConvertTxtId", moneyconvert.Guid);

                                    //let firstconvert = MoneyConvert_list.find(a => a.Guid == moneyConvert);
                                    data.set("MoneyConvertTxt", moneyconvert.ShowMoneyConvert);
                                    data.set("MoneyConvert", moneyconvert.ShowMoneyConvert);
                                    let splitedMoneyConvert = data.get("MoneyConvertTxt").split('=');

                                    let base = splitedMoneyConvert[0].match(/\d/g);
                                    let dest = splitedMoneyConvert[1].match(/\d/g);

                                    let baseAmount = base.join("");
                                    let baseCurrency = splitedMoneyConvert[0].split(" ")[1];
                                    let destAmount = dest.join("");

                                    let firstPrice = data.get("PurchasePriceNumeric");

                                    let profit = data.get("Profit");



                                    if (dateitem.Name == baseCurrency) {

                                        min = firstPrice * (baseAmount / destAmount);
                                        let sale = (min + ((profit / 100) * min));
                                        data.set("SalePrice", sale.toFixed(2));

                                        let old = sale + dateitem.Name;
                                        data.set("OldSalePrice", old);

                                    }
                                    else {

                                        min = firstPrice * (destAmount / baseAmount);
                                        let sale = (min + ((profit / 100) * min));
                                        data.set("SalePrice", sale.toFixed(2));

                                        let old = sale + dateitem.Name;
                                        data.set("OldSalePrice", old);
                                    }


                                }

                            }
                            else {
                                data.set("MoneyConvertTxtId", response);
                                let firstconvert = MoneyConvert_list.find(a => a.Guid == response);
                                data.set("MoneyConvertTxt", firstconvert.ShowMoneyConvert);
                                data.set("MoneyConvert", firstconvert.ShowMoneyConvert);

                                let splitedMoneyConvert = data.get("MoneyConvertTxt").split('=');

                                let base = splitedMoneyConvert[0].match(/\d/g);
                                let dest = splitedMoneyConvert[1].match(/\d/g);

                                let baseAmount = base.join("");
                                let baseCurrency = splitedMoneyConvert[0].split(" ")[1];
                                let destAmount = dest.join("");

                                let firstPrice = data.get("PurchasePriceNumeric");

                                let profit = data.get("Profit");

                                

                                if (dateitem.Name == baseCurrency) {
                                    
                                    min = firstPrice * (baseAmount / destAmount);
                                    let sale = (min + ((profit / 100) * min));
                                    data.set("SalePrice", sale.toFixed(2));

                                    let old = sale + dateitem.Name;
                                    data.set("OldSalePrice", old);
                                    
                                }
                                else {

                                    min = firstPrice * (destAmount / baseAmount);
                                    let sale = (min + ((profit / 100) * min));
                                    data.set("SalePrice", sale.toFixed(2));

                                    let old = sale + dateitem.Name;
                                    data.set("OldSalePrice", old);
                                }

                                
                            }

                            WholePrice(index);

                            if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                                expandedRows = [];

                                AddNewSaleInvoiceDetail(data, index, false, false);

                            }
                        }
                    });

                }


                
            }


        }

    }

    function MoneyConvertEditor(container, options) {

        let index1 = $(container).closest('td').attr('data-Index');

        let grid1 = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");
        let data1 = grid1.dataSource._data.find(a => a.Index == index1);
        let cuName = data1.get("MoneyConvertTxt");

        let number = Currency_list.length;

        if (number === 2) {
            $('<input id="MoneyConvertId" name="' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    dataTextField: "ShowMoneyConvert",
                    dataValueField: "ShowMoneyConvert",
                    dataSource: MoneyConvert_list,
                    change: selectCurrency,
                    value: cuName
                });
        }
        else {

            let index = $("#MoneyConvertId").closest('td').attr('data-Index');

            //var data = grid.dataSource.at(index);
            var data = getGridData(index);
            let base = data.get("PurchasePriceCurrencyId");
            let dest = data.get("CurrencyNameId");

            $('<input id="MoneyConvertId" name="' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    dataTextField: "ShowMoneyConvert",
                    dataValueField: "ShowMoneyConvert",
                    dataSource: {
                        transport: {
                            read: {
                                url: "/MoneyConvert/GetLatestMoneyConverts?baseCurrencyId=" + base + "&&destCurrencyId=" + dest,
                            }
                        }
                    },
                    change: selectCurrency

                });

        }

        function selectCurrency(e) {
            let dateitem = this.dataItem(e.item);
            let index = parseInt($("#MoneyConvertId").closest('td').attr('data-Index'));
            var data = getGridData(index);

            if (data.get("MoneyConvertTxtId") != dateitem.Guid) {
                data.set("MoneyConvert", dateitem.ShowMoneyConvert);
                data.set("MoneyConvertTxt", dateitem.ShowMoneyConvert);
                data.set("MoneyConvertTxtId", dateitem.Guid);


                let splitedMoneyConvert = dateitem.ShowMoneyConvert.split('=');

                let base = splitedMoneyConvert[0].match(/\d/g);
                let dest = splitedMoneyConvert[1].match(/\d/g);

                let baseAmount = base.join("");
                let baseCurrency = splitedMoneyConvert[0].split(" ")[1];
                let destAmount = dest.join("");

                let firstPrice = data.get("PurchasePriceNumeric");

                let profit = data.get("Profit");

                let salePrice = firstPrice + ((profit / 100) * firstPrice);

                //let salePrice = data.get("FirstPrice").split(' ');
                let currency = data.get("CurrencyName");

                if (currency == baseCurrency) {

                    min = salePrice * (baseAmount / destAmount);

                }
                else {

                    min = salePrice * (destAmount / baseAmount);
                }

                data.set("SalePrice", min.toFixed(2));

                //var count = data.get("Num");
                //var price = min * count;
                //data.set("WholesalePrice", price.toFixed(2));

                WholePrice(index);

                let purchasePriceProfit = data.get("PurchasePrice");

                let PPrice = purchasePriceProfit.match(/\d/g);
                PPrice = PPrice.join("");

                let PCurrency = purchasePriceProfit.split(" ");


                let saleCurrencyProfit = data.get("CurrencyName");
                let moneyConvertProfit = data.get("MoneyConvertTxt");

                setProfit(parseFloat(PPrice), PCurrency[1], parseFloat(min), saleCurrencyProfit, moneyConvertProfit, index);


                if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                    expandedRows = [];

                    AddNewSaleInvoiceDetail(data, index, false, false);
                }
            }

        }

    }

    function ProductEditor(container, options) {


        $('<input id="ProductName" name="' + options.field + '"/>')
            .appendTo(container)
            .kendoAutoComplete({
                dataTextField: "ProductName",
                filter: "contains",
                close: OnCloseProduct,
                select: OnCloseProduct
                //dataSource: data,
                //separator: ", "
                //dataSource: {
                //    //type: "odata",
                //    transport: {
                //        read: "/Product/GetAllProductsWithBarcodeForFilter"
                //    }
                //}
            });
        $('#ProductName').on('input', function () {

            $("#Product-box").addClass("hidden");
            $("#ProductStock-box").addClass("hidden");
            $("#ProductExist-box").addClass("hidden");

            var txt = $("#ProductName").val();

            var filter_list = FilterProduct(productName_list, txt);

            $("#ProductName").data("kendoAutoComplete").dataSource.data(filter_list);

        });

        $("#ProductName").on("keypress", function (e) {
            if (e.which === 13) {
                OnCloseProduct();
                var grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");
                let RTL = $("#RTL").attr("data-Value");
                if (RTL === "True")
                    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(19)"));
                else
                    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(4)"));


                //grid.editCell($("#SaleInvoiceDetailKendoGrid td:eq(19)"));
            }
        });
    }

    let selected = false;

    function OnCloseProduct(e) {
        setTimeout(() => {
            $("#ProductNameText").text($("#ProductName").val());
            if (!selected) {
                selected = true;
                var txt = $("#ProductName").val().toString();
                let fr;
                var reg = /^\d+$/;
                let digi = reg.test(txt);
                if (digi) {
                    fr = productWithBorcode_list.find(element => element.Barcode === txt);
                    if (fr === null || fr === undefined) {
                        //$("#ProductName").val("");
                        $("#ProductExist-box").removeClass("hidden");
                        return;
                    }
                    $("#ProductName").val(fr.ProductName);
                    $("#ProductNameText").text(fr.ProductName);
                }
                else {
                    fr = productName_list.find(element => element.ProductName === txt);
                    if (txt === "")
                        return;
                    if (fr === null || fr === undefined) {
                        //$("#ProductName").val("");
                        $("#ProductExist-box").removeClass("hidden");
                        return;
                    }
                    //grid.editCell($("#SaleInvoiceDetailKendoGrid td:eq(9)"));
                }

                let productId = fr.ProductId;

                let exp = $("#NearestExpire").is(":checked");
                let latsetPrice = $("#LatestSellingPrice").is(":checked");


                if (exp) {
                    GetProductDetails(productId, latsetPrice);
                }
                else {

                    GetProductExpires(productId);

                }


            }
            else {
                selected = false;
            }

        })

        SetTotalPrice();

    }

    function GetProductDetails(productId, latsetPrice) {

        let saleTypeText = $("#SalePriceTypeId").data("kendoDropDownList").dataItem();

        let saleType = saleTypeText.Name;

        //let saleType = $("#SalePriceTypeId").data("kendoDropDownList").text();
        $(".loader").removeClass("hidden");


        $.ajax({
            data: { ProductId: productId, LatestPrice: latsetPrice, SaleType: saleType },
            url: "/Product/GetProductDetails",
            success: function (response) {

                $(".loader").fadeIn("slow");
                $(".loader").addClass("hidden");
                if (response != 0) {
                    SetProductDetails(response, productId);
                    let RTL = $("#RTL").attr("data-Value");
                    let newLine = $("#CreateLine").is(":checked");
                    if (newLine) {

                        var data = getGridData(0);

                        const freeNumChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='ProductName']");

                        const freeNumIndex = $(freeNumChild).parent().children().index(freeNumChild);

                        AddNewSaleInvoiceDetail(data,0,false,true);
                        let grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");

                        if (RTL === "True")
                            grid.editCell($("#SaleInvoiceDetailKendoGrid td:eq(" + freeNumIndex + ")"));
                        else
                            grid.editCell($("#SaleInvoiceDetailKendoGrid td:eq(" + freeNumIndex + ")"));


                        //grid.editCell($("#SaleInvoiceDetailKendoGrid td:eq(21)"));
                    }
                    else {
                        let grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");

                        const freeNumChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='Num']");

                        const freeNumIndex = $(freeNumChild).parent().children().index(freeNumChild);

                        if (RTL === "True")
                            grid.editCell($("#SaleInvoiceDetailKendoGrid td:eq(" + freeNumIndex + ")"));
                        else
                            grid.editCell($("#SaleInvoiceDetailKendoGrid td:eq(" + freeNumIndex + ")"));


                        //grid.editCell($("#SaleInvoiceDetailKendoGrid td:eq(19)"));
                    }

                }
                else {
                    $("#ProductStock-box").removeClass("hidden");
                }
            }
        });

    }

    function GetProductExpires(productId) {

        $('#ExpireListModal').modal('toggle');
        var link = "/Product/GetAllProductExpireListModal?Id=";
        $(".loader").removeClass("hidden");
        $('#ExpireListModal-body').load(link + productId + '', function () {
            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
            $(".modal-backdrop:last").css('z-index', '998');
        });

    }

    function closedExpireListModal() {

        $('#ExpireListModal').modal('hide');
        $('#ExpireListModal-body').empty();

    }

    function SetProductDetails(response, productId) {


        var grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");
        var data = grid.dataSource.at(0);
        var count = 1;
        var whole = response.SellingPrice;
        var price = whole * count;
        let wholeSale;

        if (price) {
            wholeSale = price.toFixed(2);
        }

        let purchasePrice = response.PurchasePriceTxt;

        let purchaseCurencyName = purchasePrice.split(" ");
        let MoneyConvertTxtId = "";
        let MoneyConvertTxt = "";
        let MoneyConvert = "";
        let profit = "";
        let min = response.SellingPrice;

        if (response.CurrencyName == purchaseCurencyName[1]) {

            MoneyConvertTxtId = "";
            MoneyConvertTxt = "1 " + purchaseCurencyName[1] + " = 1 " + purchaseCurencyName[1];
            MoneyConvert = "1 " + purchaseCurencyName[1] + " = 1 " + purchaseCurencyName[1];
            profit = ((response.SellingPrice - parseInt(response.PurchasePrice)) / parseInt(response.PurchasePrice)) * 100;

        }
        else {

            let number = Currency_list.length;

            if (number === 2) {

                if (response.MoneyConvertId != null) {

                    let salePrice = response.SellingPrice;

                    let splitedMoneyConvert = MoneyConvert_list.find(a => a.Guid == response.MoneyConvertId);

                    try {
                        let baseAmount = splitedMoneyConvert.BaseAmount;
                        let baseCurrency = splitedMoneyConvert.BaseCurrencyName;
                        let destAmount = splitedMoneyConvert.DestAmount;

                        if (response.CurrencyName == baseCurrency) {

                            min = salePrice * (baseAmount / destAmount);

                        }
                        else {

                            min = salePrice * (destAmount / baseAmount);
                        }

                        MoneyConvertTxtId = response.MoneyConvertId;
                        MoneyConvertTxt = splitedMoneyConvert.ShowMoneyConvert;
                        MoneyConvert = splitedMoneyConvert.ShowMoneyConvert;
                        wholeSale = min.toFixed(2);
                    }
                    catch {
                        MoneyConvertTxtId = "";
                        MoneyConvertTxt = "1 " + purchaseCurencyName[1] + " = 1 " + purchaseCurencyName[1];
                        MoneyConvert = "1 " + purchaseCurencyName[1] + " = 1 " + purchaseCurencyName[1];
                        profit = ((response.SellingPrice - parseInt(response.PurchasePrice)) / parseInt(response.PurchasePrice)) * 100;
                    }
                    




                }
                else {
                    MoneyConvertTxtId = MoneyConvert_list[0].Guid;
                    MoneyConvertTxt = MoneyConvert_list[0].ShowMoneyConvert;
                    MoneyConvert = MoneyConvert_list[0].ShowMoneyConvert;
                }


            }
            else {

                MoneyConvertTxtId = "";
                MoneyConvertTxt = "";
                MoneyConvert = "";

            }

        }

        let currencyName;
        let currencyId;
        if (min == response.SellingPrice) {

            currencyName = purchaseCurencyName[1];
            currencyId = response.CurrencyId;
        }
        else {
            currencyName = response.CurrencyName;
            currencyId = response.SellingCurrencyId;
        }



        grid.dataSource.add({
            Guid: "0",
            PurchaseInvoiceDetailId: response.Guid,
            Index: 0,
            ProductId: productId,
            ProductName: $("#ProductNameText").text(),
            ExpireDate: response.ExpireDateTxt,
            Num: 1,
            FreeNum: 0,
            PurchasePrice: response.PurchasePriceTxt,
            SalePrice: min,
            OldSalePrice: min + " " + currencyName,
            FirstPrice: response.FirstPrice,
            Discount: 0,
            Currency: currencyName,
            CurrencyName: currencyName,
            CurrencyNameId: currencyId,
            FirstCurrencyId: response.FirstCurrencyId,
            WholesalePrice: wholeSale,
            MoneyConvertTxtId: MoneyConvertTxtId,
            MoneyConvertTxt: MoneyConvertTxt,
            MoneyConvert: MoneyConvert,
            FirstMoneyConvertId: MoneyConvertTxtId,
            InvoiceType: response.SaleType,
            Profit: Math.floor(profit),
            PurchasePriceTxt: response.PurchasePrice,
            PurchasePriceNumeric: response.PurchasePrice,
            ChildrenCount: response.ChildrenCount,
            ChildrenGuids: response.ChildrenGuids,
            RemainingNum: response.Stock,
            BujNumber: response.BujNumber
        });

        setTimeout(() => {

            $("#tostText").text(response.Consideration);
            $("#myToast").css('visibility', 'visible');
            $("#myToast").css('opacity', '1');
            setTimeout(() => {
                $("#myToast").css('opacity', '0');
                setTimeout(() => {
                    $("#myToast").css('visibility', 'hidden');
                }, 500);
            }, 3000);
        });

        $("#SaleInvoiceDetailModal-ProductStock").text(response.TotalStock);
        $("#SaleInvoiceDetailModal-ProductStockOfThisExpire").text(response.Stock);

        grid.dataSource.remove(data);

    }

    function setProfit(purchase, purchaseCurrency, salePrice, saleCurrency, moneyConvert, index) {

        let min;
        let splitedMoneyConvert = moneyConvert.split('=');

        let base = splitedMoneyConvert[0].match(/\d/g);
        let dest = splitedMoneyConvert[1].match(/\d/g);

        let baseAmount = base.join("");
        let baseCurrency = splitedMoneyConvert[0].split(" ")[1];

        let destAmount = dest.join("");
        let destCurrency = splitedMoneyConvert[1].split(" ")[1];

        if (purchaseCurrency == saleCurrency) {

            min = ((salePrice - purchase) / purchase) * 100;

        } else if (saleCurrency == baseCurrency) {

            min = (((salePrice * (destAmount / baseAmount)) - purchase) / purchase) * 100;

        } else {

            min = (((salePrice * (baseAmount / destAmount)) - purchase) / purchase) * 100;
        }

        if (min == 'NaN' || min == 'Infinity')
            min = 0;

        var data = getGridData(index);

        data.set("Profit", Math.floor(min));


    }

    function SetSellPrice(profit, purchasePrice, purchaseCurrency, salePrice, saleCurrency, moneyConvert, index) {



        let splitedMoneyConvert = moneyConvert.split('=');

        let base = splitedMoneyConvert[0].match(/\d/g);
        let dest = splitedMoneyConvert[1].match(/\d/g);

        let baseAmount = base.join("");
        let baseCurrency = splitedMoneyConvert[0].split(" ")[1];

        let destAmount = dest.join("");
        let destCurrency = splitedMoneyConvert[1].split(" ")[1];

        if (purchaseCurrency == saleCurrency) {

            purchasePrice = purchasePrice;

        } else if (saleCurrency == baseCurrency) {
            purchasePrice = purchasePrice * (baseAmount / destAmount)
            //am = am * purchasePrice / salePrice;

        } else {
            purchasePrice = purchasePrice * (destAmount / baseAmount)
            //am = am * salePrice / purchasePrice;
        }
        let am = ((profit / 100) * purchasePrice) + purchasePrice;

        var data = getGridData(index);
        data.set("SalePrice", am.toFixed(2));
        //data.set("SalePriceNum", am);
    }

    var groupBy = function (xs, key) {
        return xs.reduce(function (rv, x) {
            (rv[x[key]] = rv[x[key]] || []).push(x);
            return rv;
        }, {});
    };

    function SetTotalPricess() {
        let saleInvoice = $("#Guid").val();

        $.ajax({
            data: { SaleInvoiceId: saleInvoice },
            url: "/SaleInvoice/GetTotalPrice",
            success: function (response) {
                //if (response != 0) {
                if (response == null) {
                    response = 0;
                }

                if (response != 0) {
                    let total = "";
                    total += "<div class='col-sm-12' style='margin:0.5rem 0;align-text:@align'>";

                    let splitted = response.split('_');


                    for (let i = 0; i < splitted.length; i++) {

                        let cur = splitted[i].split(' ');

                        total += "<h3 id='SaleInvoiceDetailTotalPrice" + cur[0] +"' class='@font' style = 'font-size: 1.7rem;margin-top:1rem' > " + cur[0] + " : " + cur[1] + "</h3 > ";


                    }

                    total += "</div >";

                    $("#SaleInvoiceDetailTotalPrice").html();
                    $("#SaleInvoiceDetailTotalPrice").html(total);
                }



                let all = [];

                var grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");
                var gridData = grid.dataSource;

                for (let i = 0; i < gridData._data.length; i++) {
                    let data = gridData.at(i);
                    let purchase = data.get("PurchasePriceNumeric");
                    let currency = data.get("CurrencyName");
                    all.push({ currency: currency, purchase: parseFloat(purchase)})
                    //all += parseFloat(purchase);

                }

                let gr = groupBy(all, "currency");


                let currencyTotal = 0;

                let allpurchases = [];

                for (let i = 0; i < Object.keys(gr).length; i++) {

                    for (let j = 0; j < gr[Object.keys(gr)[i]].length; j++) {
                        currencyTotal += gr[Object.keys(gr)[i]][j].purchase;
                    }

                    allpurchases.push({ currency: Object.keys(gr)[0], total: currencyTotal });
                }

                if (response != 0) {

                    let splitted = response.split('_');

                    for (let i = 0; i < splitted.length; i++) {

                        let cur = splitted[i].split(' ');

                        if (allpurchases.find(a => a.currency == cur[0]) != undefined) {
                            let purchase = allpurchases.find(a => a.currency == cur[0]).total;
                        }





                    }



                }

                //}
                //else {
                //    $("#ProductStock-box").removeClass("hidden");
                //}
            }
        });

        @*let grid = $("#SaleInvoiceDetailKendoGrid").data("kendoGrid");
        let data = grid.dataSource._data;

        var currencyNameList = data.map(({ CurrencyName }) => ({ CurrencyName }));

        const key = 'CurrencyName';

        let currencyName = [...new Map(currencyNameList.map(item =>
            [item[key], item])).values()];

        let gr = groupBy(data, "CurrencyName");

        let total="";

        for (let i = 0; i < currencyName.length; i++) {
            if (currencyName[i].CurrencyName != "") {
                let alldata = gr[currencyName[i].CurrencyName];
                let totalCu = 0;
                for (let i = 0; i < alldata.length; i++) {

                    if (alldata[i].WholesalePrice>0)
                    totalCu += alldata[i].WholesalePrice - alldata[i].Discount;

                }

                total += "<div class='col-sm-12' style='margin:0.5rem 0'><h3 class='@font @pull' style='font-size: 1.7rem'>" + totalCu + " " + currencyName[i].CurrencyName + "</h3></div>";

            }

        }*@

        //total1 = total.substring(0, total.length - 2);

        //$("#SaleInvoiceDetailTotalPrice").html();
        //$("#SaleInvoiceDetailTotalPrice").html(total);

    }

    ///////////////////////////////////////////detailGrid

    function setDetailProfit(purchase, purchaseCurrency, salePrice, saleCurrency, moneyConvert, index) {
        let min;

        let splitedMoneyConvert = moneyConvert.split('=');

        let base = splitedMoneyConvert[0].match(/\d/g);
        let dest = splitedMoneyConvert[1].match(/\d/g);

        let baseAmount = base.join("");
        let baseCurrency = splitedMoneyConvert[0].split(" ")[1];

        let destAmount = dest.join("");
        let destCurrency = splitedMoneyConvert[1].split(" ")[1];

        if (purchaseCurrency == saleCurrency) {

            min = ((salePrice - purchase) / purchase) * 100;

        } else if (saleCurrency == baseCurrency) {

            min = (((salePrice * (destAmount / baseAmount)) - purchase) / purchase) * 100;

        } else {

            min = (((salePrice * (baseAmount / destAmount)) - purchase) / purchase) * 100;
        }

        if (min == 'NaN' || min == 'Infinity')
            min = 0;

        return min;

    }

    function SetSellDetailPrice(profit, purchasePrice, purchaseCurrency, salePrice, saleCurrency, moneyConvert, index) {



        let splitedMoneyConvert = moneyConvert.split('=');

        let base = splitedMoneyConvert[0].match(/\d/g);
        let dest = splitedMoneyConvert[1].match(/\d/g);

        let baseAmount = base.join("");
        let baseCurrency = splitedMoneyConvert[0].split(" ")[1];

        let destAmount = dest.join("");
        let destCurrency = splitedMoneyConvert[1].split(" ")[1];

        if (purchaseCurrency == saleCurrency) {

            purchasePrice = purchasePrice;

        } else if (saleCurrency == baseCurrency) {
            purchasePrice = purchasePrice * (baseAmount / destAmount)
            //am = am * purchasePrice / salePrice;

        } else {
            purchasePrice = purchasePrice * (destAmount / baseAmount)
            //am = am * salePrice / purchasePrice;
        }
        let am = ((profit / 100) * purchasePrice) + purchasePrice;

        return am;

        //var data = getGridData(index);
        //data.set("SalePrice", am.toFixed(2));
        //data.set("SalePriceNum", am);
    }


    function cellDetailEdits(e) {

        let general;
        let Num = e.container.find("input[name=Num]").data("kendoNumericTextBox");
        let FreeNum = e.container.find("input[name=FreeNum]").data("kendoNumericTextBox");
        let Currency = e.container.find("input[name=Currency]").data("kendoDropDownList");
        let MoneyConvert = e.container.find("input[name=MoneyConvert]").data("kendoDropDownList");
        let SalePrice = e.container.find("input[name=SalePrice]").data("kendoNumericTextBox");
        let Discount = e.container.find("input[name=Discount]").data("kendoNumericTextBox");
        let WholesalePrice = e.container.find("input[name=WholesalePrice]").data("kendoNumericTextBox");
        let Profit = e.container.find("input[name=Profit]").data("kendoNumericTextBox");
        let Consideration = e.container.find("input[name=Consideration]").data("kendoTextBox");
        let ProductName = e.container.find("input[name=ProductName]").data("kendoAutoComplete");
        let grid = $(e.container.closest("div[data-role = 'grid']")).data("kendoGrid");
        let RTL = $("#RTL").attr("data-Value");

        let lock = $("#lock").text();
        if (lock.toLocaleLowerCase() == "true") {
            return;
        }

        if (e.model.Guid === "") {

            if (Num !== undefined) {

                general = Num;
            }
            else if (FreeNum !== undefined) {
                general = FreeNum;
            }
            else if (SalePrice !== undefined) {
                general = SalePrice;
            }
            else if (Discount !== undefined) {
                general = Discount;
            }
            else if (WholesalePrice !== undefined) {
                general = WholesalePrice;
            }
            else if (Profit !== undefined) {
                general = Profit;
            }
            else if (Consideration !== undefined) {
                general = Consideration;
            }
            else if (MoneyConvert !== undefined) {
                general = MoneyConvert;
            }
            if (general !== undefined)
                general.enable(false);
        }
        else {

            if (ProductName !== undefined) {
                ProductName.enable(false);
            }
            else if (Num !== undefined) {

                let index = parseInt($(e.container.find("input[name=Num]")).closest('td').attr('data-Index'));

                let data = grid.dataSource._data.find(a => a.Index == index);


                let stockSelection = $("#StockSelection").text();

                let previuseNum = data.get("Num");

                let max = data.get("RemainingNum");

                let stock = data.get("RemainingNum");

                $("#SaleInvoiceDetailModal-ProductStockOfThisExpire").text(stock);

                if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                    Num.bind("change", function () {
                        AddNewSaleInvoiceDetail(data, index, true, false);

                    });
                }

                $(e.container.find("input[name=Num]")).on("keypress", function (e) {

                    if (e.which === 13) {

                        let freeNum = data.get("FreeNum");

                        if (Num.value() + parseInt(freeNum) > max && max != "") {
                            $(this).focus();
                            if (stockSelection.toLowerCase() == "stock") {
                                Num.value(max - freeNum);
                            }
                            else {
                                Num.value(previuseNum);
                            }
                            return;
                        }

                        let salePrice = data.get("SalePrice");
                        let num = data.get("Num");
                        let price = salePrice * num;
                        data.set("WholesalePrice", price.toFixed(2));

                    }
                });


                $(e.container.find("input[name=Num]")).on("focus", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
            else if (FreeNum !== undefined) {

                let index = parseInt($(e.container.find("input[name=FreeNum]")).closest('td').attr('data-Index'));

                let data = grid.dataSource._data.find(a => a.Index == index);

                let stockSelection = $("#StockSelection").text();

                let previuseFreeNum = data.get("FreeNum");

                let max = data.get("RemainingNum");

                if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                    FreeNum.bind("change", function () {
                        AddNewSaleInvoiceDetail(data, index, true, false);

                    });
                }

                $(e.container.find("input[name=FreeNum]")).on("keypress", function (e) {

                    if (e.which === 13) {


                        let num = data.get("Num");

                        if (stockSelection.toLowerCase() == "stock") {
                            if ((FreeNum.value() + parseFloat(num)) > max && max != "") {
                                $(this).focus();
                                FreeNum.value(max - num);
                                return;
                            }
                        }
                        else {
                            if ((FreeNum.value() + parseFloat(num)) > max && max != "") {
                                $(this).focus();
                                FreeNum.value(previuseFreeNum);
                                return;
                            }

                        }


                    }
                });

                $(e.container.find("input[name=FreeNum]")).on("focus", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
            else if (Currency !== undefined) {

                //Currency.open();

                //let index = parseInt($(e.container.find("input[name=Currency]")).closest('td').attr('data-Index'));

                //var data = getGridData(index);

                //const SalePriceChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='SalePrice']");


                //const SalePriceIndex = $(SalePriceChild).parent().children().index(SalePriceChild);

                //$(e.container.find("input[name=Currency]")).parent().on("keypress", function (e) {

                //    if (e.which === 13) {

                //        let data_zero = getGridData(0);

                //        if (data_zero !== undefined) {
                //            index += 1;
                //        }

                //        if (RTL === "True")
                //            grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + SalePriceIndex + ")"));
                //        else
                //            grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + SalePriceIndex + ")"));

                //    }
                //});

            }
            else if (SalePrice !== undefined) {

                let index = parseInt($(e.container.find("input[name=SalePrice]")).closest('td').attr('data-Index'));

                let data = grid.dataSource._data.find(a => a.Index == index);

                if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                    SalePrice.bind("change", function () {
                        AddNewSaleInvoiceDetail(data, index, false, false);

                    });
                }

                $(e.container.find("input[name=SalePrice]")).on("keypress", function (e) {

                    //if (e.which === 13) {

                    //    var data = getGridData(index);

                    //    WholePrice(index);
                    //    let purchasePrice = data.get("PurchasePrice");

                    //    let PPrice = purchasePrice.match(/\d/g);
                    //    PPrice = PPrice.join("");

                    //    let PCurrency = purchasePrice.split(" ");


                    //    let salePrice = $(this).val();
                    //    let saleCurrency = data.get("CurrencyName");
                    //    let moneyConvert = data.get("MoneyConvertTxt");

                    //    setDetailProfit(parseFloat(PPrice), PCurrency[1], parseFloat(salePrice), saleCurrency, moneyConvert, index)


                    //}
                });

                $(e.container.find("input[name=SalePrice]")).on("focus", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });
            }
            else if (Discount !== undefined) {

                let index = parseInt($(e.container.find("input[name=Discount]")).closest('td').attr('data-Index'));

                let data = grid.dataSource._data.find(a => a.Index == index);
                if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                    Discount.bind("change", function () {
                        AddNewSaleInvoiceDetail(data, index, false, false);

                    });

                }


                $(e.container.find("input[name=Discount]")).on("keypress", function (e) {

                    if (e.which === 13) {

                        let data = grid.dataSource._data.find(a => a.Index == index);
                        let sale = data.get('SalePrice');
                        let discount = $(this).val();
                        if (discount > sale) {
                            $(this).select();
                            return;
                        }

                        //let data_zero = getGridData(0);

                        //if (data_zero !== undefined) {
                        //    index += 1;
                        //}

                        //let purchasePrice = data.get("PurchasePrice");
                        //let saleCurrency = data.get("CurrencyName");
                        //let PCurrency = purchasePrice.split(" ");


                        //let currencyEqualant = true;
                        //if (saleCurrency == PCurrency[1]) {
                        //    currencyEqualant = true;
                        //}
                        //else {
                        //    currencyEqualant = false;
                        //}

                        //const MoneyConvertChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='MoneyConvert']");

                        //const MoneyConvertIndex = $(MoneyConvertChild).parent().children().index(MoneyConvertChild);

                        //const WholesalePriceChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='WholesalePrice']");

                        //const WholesalePriceIndex = $(WholesalePriceChild).parent().children().index(WholesalePriceChild);

                        //if (currencyEqualant)
                        //    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + WholesalePriceIndex + ")"));
                        //else
                        //    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + MoneyConvertIndex + ")"));

                        //if (RTL === "True") {
                        //    if (currencyEqualant)
                        //        grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + WholesalePriceIndex + ")"));
                        //    else
                        //        grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + MoneyConvertIndex + ")"));

                        //}
                        //else {
                        //    if (currencyEqualant)
                        //        grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + WholesalePriceIndex + ")"));
                        //    else
                        //        grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + MoneyConvertIndex + ")"));
                        //}

                    }
                });

                $(e.container.find("input[name=Discount]")).on("focus", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });
            }
            else if (MoneyConvert !== undefined) {

                let index = parseInt($(e.container.find("input[name=MoneyConvert]")).closest('td').attr('data-Index'));

                let data = grid.dataSource._data.find(a => a.Index == index);

                let purchasePrice = data.get("PurchasePrice");
                let saleCurrency = data.get("CurrencyName");
                let PCurrency = purchasePrice.split(" ");

                if (saleCurrency == PCurrency[1]) {
                    MoneyConvert.enable(false);
                }

                //const WholesalePriceChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='WholesalePrice']");

                //const WholesalePriceIndex = $(WholesalePriceChild).parent().children().index(WholesalePriceChild);

                //MoneyConvert.open();

                //$(e.container.find("input[name=MoneyConvert]")).parent().on("keypress", function (e) {

                //    if (e.which === 13) {

                //        let data_zero = getGridData(0);

                //        if (data_zero !== undefined) {
                //            index += 1;
                //        }

                //        grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + WholesalePriceIndex + ")"));

                //        //if (RTL === "True")
                //        //    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(3)"));
                //        //else
                //        //    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(11)"));


                //    }
                //});

            }
            else if (WholesalePrice !== undefined) {

                let index = parseInt($(e.container.find("input[name=WholesalePrice]")).closest('td').attr('data-Index'));

                let data = grid.dataSource._data.find(a => a.Index == index);

                if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                    WholesalePrice.bind("change", function () {
                        AddNewSaleInvoiceDetail(data, index, false, false);

                    });

                }

                //const ProfitChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='Profit']");

                //const ProfitIndex = $(ProfitChild).parent().children().index(ProfitChild);


                //$(e.container.find("input[name=WholesalePrice]")).on("keypress", function (e) {

                //    if (e.which === 13) {

                //        var data = getGridData(index);
                //        let whole = WholesalePrice.value();
                //        let num = data.get("Num");
                //        let price = whole / num;
                //        data.set("SalePrice", price.toFixed(2));

                //        let purchasePrice = data.get("PurchasePrice");

                //        let PPrice = purchasePrice.match(/\d/g);
                //        PPrice = PPrice.join("");

                //        let PCurrency = purchasePrice.split(" ");

                //        let salePrice = data.get("SalePrice");
                //        let saleCurrency = data.get("CurrencyName");
                //        let moneyConvert = data.get("MoneyConvertTxt");

                //        setProfit(parseFloat(PPrice), PCurrency[1], parseFloat(salePrice), saleCurrency, moneyConvert, index);

                //        let data_zero = getGridData(0);

                //        if (data_zero !== undefined) {
                //            index += 1;
                //        }

                //        grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + ProfitIndex + ")"));

                //    }
                //});


                $(e.container.find("input[name=WholesalePrice]")).on("focus", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
            else if (Profit !== undefined) {
                let index = parseInt($(e.container.find("input[name=Profit]")).closest('td').attr('data-Index'));

                let data = grid.dataSource._data.find(a => a.Index == index);

                if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                    Profit.bind("change", function () {
                        let purchasePrice = data.get("PurchasePrice");

                        let profit = data.get("Profit");

                        let PPrice = purchasePrice.match(/\d/g);
                        PPrice = PPrice.join("");

                        let PCurrency = purchasePrice.split(" ");

                        let salePrice = data.get("SalePrice");
                        let saleCurrency = data.get("CurrencyName");
                        let moneyConvert = data.get("MoneyConvertTxt");
                        let newsalePrice = SetSellDetailPrice(profit, parseInt(PPrice), PCurrency[1], parseInt(salePrice), saleCurrency, moneyConvert, index);
                        data.set("SalePrice", newsalePrice.toFixed(2));
                        AddNewSaleInvoiceDetail(data, index, false, false);

                    });

                }

                //const ConsiderationChild = $("#SaleInvoiceDetailKendoGrid tr:eq(1) td[data-field='Consideration']");

                //const ConsiderationIndex = $(ConsiderationChild).parent().children().index(ConsiderationChild);


                //$(e.container.find("input[name=Profit]")).on("keypress", function (e) {

                //    if (e.which === 13) {

                //        let data_zero = getGridData(0);

                //        if (data_zero !== undefined) {
                //            index += 1;
                //        }

                //        grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(" + ConsiderationIndex + ")"));

                //        //if (RTL === "True")
                //        //    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(1)"));
                //        //else
                //        //    grid.editCell($("#SaleInvoiceDetailKendoGrid tr:eq(" + (index) + ") td:eq(13)"));

                //    }

                //    //SetSellPrice(profit, purchasePrice, purchaseCurrency, salePrice, saleCurrency, moneyConvert, index)
                //});

                $(e.container.find("input[name=Profit]")).on("focus", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
            else if (Consideration !== undefined) {

                let index = parseInt($(e.container.find("input[name=Consideration]")).closest('td').attr('data-Index'));

                $(e.container.find("input[name=Consideration]")).on("keypress", function (e) {

                    if (e.which === 13) {

                        let ms = $(this).val();
                        let data = grid.dataSource._data.find(a => a.Index == index);
                        data.set("Consideration", ms);

                        AddNewSaleInvoiceDetail(data, index, true, true);

                    }
                });

                $(e.container.find("input[name=Consideration]")).on("focus", function (e) {

                    let input = $(this);
                    setTimeout(function () {
                        input.select();
                    });

                });

            }
        }


    }

    function datasourceDetailFinish(e) {

        for (let i = 0; i < e.response.length; i++) {

            let purchasePrice = e.response[i].PurchasePrice;


            let PPrice = purchasePrice.match(/\d/g);

            if (PPrice != null) {
                PPrice = PPrice.join("");

                let PCurrency = purchasePrice.split(" ");


                let salePrice = e.response[i].SalePrice;
                let saleCurrency = e.response[i].CurrencyName;
                let moneyConvert = e.response[i].MoneyConvertTxt;

                let min;

                let splitedMoneyConvert = moneyConvert.split('=');

                let base = splitedMoneyConvert[0].match(/\d/g);
                let dest = splitedMoneyConvert[1].match(/\d/g);

                let baseAmount = base.join("");
                let baseCurrency = splitedMoneyConvert[0].split(" ")[1];

                let destAmount = dest.join("");
                let destCurrency = splitedMoneyConvert[1].split(" ")[1];

                if (PCurrency[1] == saleCurrency) {

                    min = ((salePrice - parseFloat(PPrice)) / parseFloat(PPrice)) * 100;

                } else if (saleCurrency == baseCurrency) {

                    min = (((salePrice * (destAmount / baseAmount)) - parseFloat(PPrice)) / parseFloat(PPrice)) * 100;

                } else {

                    min = (((salePrice * (baseAmount / destAmount)) - parseFloat(PPrice)) / parseFloat(PPrice)) * 100;
                }

                if (min == 'NaN' || min == 'Infinity')
                    min = 0;

                e.response[i].Profit = Math.floor(min);

            }

        }

    }

    function CurrencyDetailEditor(container, options) {
        let index1 = $(container).closest('td').attr('data-Index');

        let grid1 = $(container).closest("div[data-role = 'grid']").data("kendoGrid");
        let data1 = grid1.dataSource._data.find(a => a.Index == index1);
        let cuName = data1.get("CurrencyName");

        $('<input id="CurrencyId" name="' + options.field + '"/>')
            .appendTo(container)
            .kendoDropDownList({
                dataTextField: "Name",
                dataValueField: "Name",
                dataSource: Currency_list,
                change: selectCurrency,
                value: cuName
            });

        function selectCurrency(e) {
            let index = $("#CurrencyId").closest('td').attr('data-Index');

            var grid = $(container).closest("div[data-role = 'grid']").data("kendoGrid");
            let data = grid.dataSource._data.find(a => a.Index == index);

            let dateitem = this.dataItem(e.item);

            if (data.get("CurrencyNameId") != dateitem.Id) {

                data.set("Currency", dateitem.Name);
                data.set("CurrencyName", dateitem.Name);
                data.set("CurrencyNameId", dateitem.Id);

                let purchasePrice = data.get("PurchasePrice");

                let purchaseCurencyName = purchasePrice.split(" ");

                if (dateitem.Name == purchaseCurencyName[1]) {

                    data.set("MoneyConvertTxtId", "");
                    data.set("MoneyConvertTxt", "1 " + purchaseCurencyName[1] + " = 1 " + purchaseCurencyName[1]);
                    data.set("MoneyConvert", "1 " + purchaseCurencyName[1] + " = 1 " + purchaseCurencyName[1]);

                    let firstPrice = data.get("PurchasePriceNumeric");

                    let profit = data.get("Profit");

                    let sale = firstPrice + ((profit / 100) * firstPrice);

                    data.set("SalePrice", sale.toFixed(2));
                    data.set("OldSalePrice", sale.toFixed(2) + dateitem.Name);

                    WholePrice(index);

                    if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                        expandedRows = [];
                        AddNewSaleInvoiceDetail(data, index, false, false);

                    }

                }
                else {

                    let guid = data.get("PurchaseInvoiceDetailId");
                    let currencyId = dateitem.Id;
                    let saleType = data.get("InvoiceType");

                    let priceTypeText = $("#SalePriceTypeId").data("kendoDropDownList").dataItem();

                    let priceType = priceTypeText.Name;

                    $.ajax({
                        type: "Get",
                        data: { PurchaseInvoiceDetailId: guid, CurrencyId: currencyId, PriceType: priceType, SaleType: saleType },
                        url: "/PurchaseInvoiceDetail/GetPurchaseInvoiceDetailSalePrice",
                        success: function (response) {
                            if (response == null) {

                                let moneyconvert = MoneyConvert_list.find(a => a.BaseCurrencyName == dateitem.Name && a.DestCurrencyName == purchaseCurencyName[1]);

                                if (moneyconvert == undefined || moneyconvert == null) {

                                    moneyconvert = MoneyConvert_list.find(a => a.BaseCurrencyName == purchaseCurencyName[1] && a.DestCurrencyName == dateitem.Name);

                                }

                                if (moneyconvert == undefined || moneyconvert == null) {

                                    $("#MoneyConvertModal #Date-valid").addClass("hidden");
                                    $("#MoneyConvertModal #ERROR_Data").addClass("hidden");
                                    $("#MoneyConvertModal #ERROR_SomeThingWentWrong").addClass("hidden");

                                    var link = "/MoneyConvert/AddNewModal";
                                    $(".loader").removeClass("hidden");


                                    $('#MoneyConvertModal').modal('toggle');
                                    $('#MoneyConvertModal-body').load(link, function () {
                                        $(".loader").fadeIn("slow");
                                        $(".loader").addClass("hidden");

                                        let firstCurrency = data.get("FirstCurrencyId");

                                        let base = $("#BaseCurrencyId").data("kendoDropDownList");
                                        base.value(firstCurrency);
                                        //base.enable(false);

                                        let dest = $("#DestCurrencyId").data("kendoDropDownList");
                                        dest.value(dateitem.Id);
                                        //dest.enable(false);

                                        //$("#btn-MoneyConvertModal-close").attr('disabled', true);
                                        //$("#MoneyConvertModal-header-closebtn").attr('disabled', true);

                                    });

                                }
                                else {

                                    data.set("MoneyConvertTxtId", moneyConvert);

                                    //let firstconvert = MoneyConvert_list.find(a => a.Guid == moneyConvert);
                                    data.set("MoneyConvertTxt", moneyConvert.ShowMoneyConvert);
                                    data.set("MoneyConvert", moneyConvert.ShowMoneyConvert);

                                }

                            }
                            else {
                                data.set("MoneyConvertTxtId", response);
                                let firstconvert = MoneyConvert_list.find(a => a.Guid == response);
                                data.set("MoneyConvertTxt", firstconvert.ShowMoneyConvert);
                                data.set("MoneyConvert", firstconvert.ShowMoneyConvert);

                                let splitedMoneyConvert = data.get("MoneyConvertTxt").split('=');

                                let base = splitedMoneyConvert[0].match(/\d/g);
                                let dest = splitedMoneyConvert[1].match(/\d/g);

                                let baseAmount = base.join("");
                                let baseCurrency = splitedMoneyConvert[0].split(" ")[1];
                                let destAmount = dest.join("");

                                let firstPrice = data.get("PurchasePriceNumeric");

                                let profit = data.get("Profit");



                                if (dateitem.Name == baseCurrency) {

                                    min = firstPrice * (baseAmount / destAmount);
                                    let sale = (min + ((profit / 100) * min));
                                    data.set("SalePrice", sale.toFixed(2));

                                    let old = sale + dateitem.Name;
                                    data.set("OldSalePrice", old);

                                }
                                else {

                                    min = firstPrice * (destAmount / baseAmount);
                                    let sale = (min + ((profit / 100) * min));
                                    data.set("SalePrice", sale.toFixed(2));

                                    let old = sale + dateitem.Name;
                                    data.set("OldSalePrice", old);
                                }


                            }

                            WholePrice(index);

                            if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {
                                expandedRows = [];
                                AddNewSaleInvoiceDetail(data, index, false, false);

                            }
                        }
                    });

                }



            }


        }

    }

    function MoneyConvertDetailEditor(container, options) {
        
        let index1 = $(container).closest('td').attr('data-Index');

        let grid1 = $(container).closest("div[data-role = 'grid']").data("kendoGrid");
        let data1 = grid1.dataSource._data.find(a => a.Index == index1);
        let cuName = data1.get("MoneyConvertTxt");

        let number = Currency_list.length;

        if (number === 2) {
            $('<input id="MoneyConvertId" name="' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    dataTextField: "ShowMoneyConvert",
                    dataValueField: "ShowMoneyConvert",
                    dataSource: MoneyConvert_list,
                    change: selectCurrency,
                    value: cuName
                });
        }
        else {

            let index = $("#MoneyConvertId").closest('td').attr('data-Index');

            //var data = grid.dataSource.at(index);
            var data = getGridData(index);
            let base = data.get("PurchasePriceCurrencyId");
            let dest = data.get("CurrencyNameId");

            $('<input id="MoneyConvertId" name="' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    dataTextField: "ShowMoneyConvert",
                    dataValueField: "ShowMoneyConvert",
                    dataSource: {
                        transport: {
                            read: {
                                url: "/MoneyConvert/GetLatestMoneyConverts?baseCurrencyId=" + base + "&&destCurrencyId=" + dest,
                            }
                        }
                    },
                    change: selectCurrency

                });

        }

        function selectCurrency(e) {
            let dateitem = this.dataItem(e.item);
            let index = parseInt($("#MoneyConvertId").closest('td').attr('data-Index'));
            var data = grid1.dataSource._data.find(a => a.Index == index);

            if (data.get("MoneyConvertTxtId") != dateitem.Guid) {
                data.set("MoneyConvert", dateitem.ShowMoneyConvert);
                data.set("MoneyConvertTxt", dateitem.ShowMoneyConvert);
                data.set("MoneyConvertTxtId", dateitem.Guid);


                let splitedMoneyConvert = dateitem.ShowMoneyConvert.split('=');

                let base = splitedMoneyConvert[0].match(/\d/g);
                let dest = splitedMoneyConvert[1].match(/\d/g);

                let baseAmount = base.join("");
                let baseCurrency = splitedMoneyConvert[0].split(" ")[1];
                let destAmount = dest.join("");

                let firstPrice = data.get("PurchasePriceNumeric");

                let profit = data.get("Profit");

                let salePrice = firstPrice + ((profit / 100) * firstPrice);

                //let salePrice = data.get("FirstPrice").split(' ');
                let currency = data.get("CurrencyName");

                if (currency == baseCurrency) {

                    min = salePrice * (baseAmount / destAmount);

                }
                else {

                    min = salePrice * (destAmount / baseAmount);
                }

                data.set("SalePrice", min.toFixed(2));

                //var count = data.get("Num");
                //var price = min * count;
                //data.set("WholesalePrice", price.toFixed(2));

                WholePrice(index);

                let purchasePriceProfit = data.get("PurchasePrice");

                let PPrice = purchasePriceProfit.match(/\d/g);
                PPrice = PPrice.join("");

                let PCurrency = purchasePriceProfit.split(" ");


                let saleCurrencyProfit = data.get("CurrencyName");
                let moneyConvertProfit = data.get("MoneyConvertTxt");

                setProfit(parseFloat(PPrice), PCurrency[1], parseFloat(min), saleCurrencyProfit, moneyConvertProfit, index);


                if (data.get("Guid") != "" && data.get("Guid") != "00000000-0000-0000-0000-000000000000" && data.get("Guid") != undefined && data.get("Guid") != "0") {

                    AddNewSaleInvoiceDetail(data, index, false, false);
                }
            }

        }

    }

</script>


<style>

    .k-header a {
        color: black !important;
        font-family: "Roboto";
        font-weight: 900;
        font-size: medium;
    }

    th.k-header .k-link {
        color: white !important;
        font-family: "Roboto" !important;
        font-weight: 900 !important;
        font-size: 1.3rem !important;
    }

    .k-grid .k-hierarchy-col {
        width: 0;
        /*display: none;*/
    }

    .k-grid .k-detail-row .k-detail-cell {
        width: 0;
        /*display: none;*/
    }
</style>