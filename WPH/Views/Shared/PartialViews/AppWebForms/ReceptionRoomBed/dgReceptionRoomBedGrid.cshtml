@model WPH.Models.CustomDataModels.BaseInfo.BaseInfosAndPeriodsViewModel

@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject WPH.Resources.SharedViewLocalizer Localizer

<div>
    <div class="row page-header clearfix">
        <div class="  @if (HttpContextAccessor.HttpContext.Session.GetString("culture") != "en") {
                @:pull-right
                }
                else {
                @:pull-left
                } ">
            <h1 class="@if (HttpContextAccessor.HttpContext.Session.GetString("culture") == "en") {
                                                                                    @:MyFont-Roboto-grid
                                                                                  } else {
                                                                                    @:MyFont-Sarchia-grid
                                                                                        }" style="font-size: 2.3rem">
                @Localizer["History"]
            </h1>

        </div>
    </div>
    <script>

        function btnSearchClick() {
            var period = $("#periods").data("kendoDropDownList");

            var periodValue = period.value();


            $('#period-id').attr('data-Value', periodValue);
            $("#receptionRoomBedKendoGrid .k-pager-refresh")[0].click();

        }

        function PeriodsChange() {

            var period = $("#periods").data("kendoDropDownList");

            var periodValue = period.value();


            $('#period-id').attr('data-Value', periodValue);

            var fromTo = $("#FromTo").text();

            if (periodValue === fromTo) {
                $(".date_item").removeClass("hidden");
                let date = $("#KendoFromDate").data("kendoDatePicker");
                date.element.focus();
                date.element.select();
            }

            else {
                $(".date_item").addClass("hidden");
                $("#receptionRoomBedKendoGrid .k-pager-refresh")[0].click();
            }

        }

        function historyFilterChange() {
            $("#receptionRoomBedKendoGrid .k-pager-refresh")[0].click();
        }
    </script>

    <div>
        <div style="display:flex;align-items:center; @if (HttpContextAccessor.HttpContext.Session.GetString("culture") != "en") {

                @:direction: rtl;
            }
            else {
                @:direction: ltr;
            } ">
            <label class="block clearfix" style="margin:0px 10px;flex:3;">
                <label for="form-field-8">@Localizer["Room"] : </label>
                <span class="block input-icon input-icon-right">
                    @(Html.Kendo().DropDownList()
                    .Name("HistoryRoom")
                    .DataTextField("SectionRoomName")
                    .DataValueField("Guid")
                    .OptionLabel(" ")
                    .Filter("contains")
                    .DataSource(source =>
                    {
                    source.Read(read =>
                    {
                    read.Action("GetAllRooms", "Room");
                    })
                    .ServerFiltering(false);
                    })
                    .Events(e =>
                    {
                    e.Change("historyFilterChange");
                    })
                    .HtmlAttributes(new { style = "width: 100%;" })
                    )
                </span>
            </label>
            <script>
                function FilterRoom() {
                    return {
                        roomId: $("#HistoryRoom").val()
                    };
                }
                function FilterHistory() {

                    var periodId = $('#period-id').attr('data-Value');

                    var fromDate = $("#KendoFromDate").data("kendoDatePicker");
                    var toDate = $("#KendoDateTo").data("kendoDatePicker");

                    var frDate = fromDate.value();
                    var tDate = toDate.value();
                    let frMonth = frDate.getMonth() + 1;
                    let frDay = frDate.getDate();
                    let toMonth = tDate.getMonth() + 1;
                    let toDay = tDate.getDate();

                    if (frMonth < 10)
                        frMonth = "0" + frMonth;
                    if (toMonth < 10)
                        toMonth = "0" + toMonth;
                    if (frDay < 10)
                        frDay = "0" + frDay;
                    if (toDay < 10)
                        toDay = "0" + toDay;

                    let from = frDate.getFullYear() + "-" + frMonth + "-" + frDay;
                    let too = tDate.getFullYear() + "-" + toMonth + "-" + toDay;


                    return {
                        periodId: periodId,
                        dateFrom: from,
                        dateTo: too,
                        roomId: $("#HistoryRoom").val(),
                        roomBedId: $("#HistoryRoomBed").val(),
                        patientId: $("#HistoryPatient").val()
                    };
                }
            </script>
            <label class="block clearfix" style="margin:0px 10px;flex:3;">
                <label for="form-field-8">@Localizer["RoomBed"] : </label>
                <span class="block input-icon input-icon-right">
                    @(Html.Kendo().DropDownList()
                    .Name("HistoryRoomBed")
                    .DataTextField("Name")
                    .DataValueField("Guid")
                    .OptionLabel(" ")
                    .DataSource(source =>
                    {
                    source.Read(read =>
                    {
                    read.Action("GetRoomBedByRoomId", "RoomBed").Data("FilterRoom");
                    })
                    .ServerFiltering(true);
                    })
                    .AutoBind(false)
                    .Filter("contains")
                    .CascadeFrom("HistoryRoom")
                    .Events(e =>
                    {
                    e.Change("historyFilterChange");
                    })
                    .HtmlAttributes(new { style = "width: 100%;" })
                    )
                </span>
            </label>

            <label class="block clearfix" style="margin:0px 10px;flex:3;">
                <label for="form-field-8">@Localizer["Patient"] : </label>
                <span class="block input-icon input-icon-right">
                    @(Html.Kendo().DropDownList()
                    .Name("HistoryPatient")
                    .DataTextField("NamePhone")
                    .DataValueField("Guid")
                    .OptionLabel(" ")
                    .Filter("contains")
                    .DataSource(source =>
                    {
                    source.Read(read =>
                    {
                    read.Action("GetPatientName", "Reception");
                    })
                    .ServerFiltering(false);
                    })
                    .Events(e =>
                    {
                    e.Change("historyFilterChange");
                    })
                    .HtmlAttributes(new { style = "width: 100%;" })
                    )
                </span>
            </label>
            <div class="block clearfix" style="margin:0px 10px;flex:1;">

            </div>
        </div>
    </div>

    <div>

        <div style="margin-top:15px; display:flex;align-items:flex-end; @if (HttpContextAccessor.HttpContext.Session.GetString("culture") != "en") {

                @:direction: rtl;
            }
            else {
                @:direction: ltr;
            } ">


            <label class="block clearfix" style="margin:0px 10px;flex:3;">
                <label for="form-field-8">@Localizer["Date"] : </label>
                <span class="block input-icon input-icon-right">
                    @(Html.Kendo().DropDownList()
                    .Name("periods")
                    .BindTo(Model.periods)
                    .DataTextField("Name")
                    .DataValueField("Id")
                    .Filter("contains")

                    .HtmlAttributes(new { style = "width: 100%;font-size:1.5rem", onchange = "PeriodsChange()" })
                    )
                </span>
            </label>

            <label class=" block clearfix " style="margin:0px 10px;flex:3;">
                <span class="date_item hidden">
                    <label for="form-field-8">@Localizer["FromDate"] : </label>
                    <span class="block input-icon input-icon-right">
                        @(Html.Kendo().DatePicker()
                        .Name("KendoFromDate")
                        .Value(DateTime.Now)
                        .Format("dd/MM/yyyy")
                        .HtmlAttributes(new { style = "width: 100%;font-size:1.5rem", onchange = "dateTimePickerWorkWithSpace(this)" })
                        )
                    </span>
                </span>
            </label>

            <label class=" block clearfix " style="margin:0px 10px;flex:3;">
                <span class="date_item hidden">
                    <label for="form-field-8">@Localizer["ToDate"] : </label>
                    <span class="block input-icon input-icon-right">
                        @(Html.Kendo().DatePicker()
                        .Name("KendoDateTo")
                        .Value(DateTime.Now)
                        .Format("dd/MM/yyyy")
                        .HtmlAttributes(new { style = "width: 100%;font-size:1.5rem", onchange = "dateTimePickerWorkWithSpace(this)" })
                        )
                    </span>
                </span>
            </label>

            <div class=" block clearfix " style="margin:0px 10px;flex:1;">
                <span class="date_item hidden">
                    @(Html.Kendo().Button()
                    .Name("btn-search-room")
                    .HtmlAttributes(new { style = "font-size:1.5rem;padding:0.7rem", type = "button", @class = "k-primary ", onclick = "btnSearchClick()" })
                    .Content("<i class='fa fa-search'></i>"))
                </span>
            </div>

        </div>


    </div>

    <div>
        @(Html.Kendo().Grid<WPH.Models.ReceptionRoomBed.ReceptionRoomBedViewModel>()
        .Name("receptionRoomBedKendoGrid")
        .Columns(columns =>
        {
            if (HttpContextAccessor.HttpContext.Session.GetString("culture") != "en")
            {

                columns.Bound(x => x.ExitDate).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Format("{0: HH:mm}").Title(Localizer["Time"] + " " + Localizer["Exit"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.ExitDate).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Format("{0: dd/MM/yyyy}").Title(Localizer["Date"] + " " + Localizer["Exit"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.EntranceDate).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Format("{0: HH:mm}").Title(Localizer["Time"] + " " + Localizer["Entrance"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.EntranceDate).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Format("{0: dd/MM/yyyy}").Title(Localizer["Date"]+" "+ Localizer["Entrance"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.PatientName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["PatientName"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.RoomBedName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Bed"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.RoomName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Room"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.Index).Filterable(false).Width(20).Title("#").HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
                columns.Bound(x => x.Guid).Hidden();
                columns.Bound(x => x.Id).Hidden();

            }
            else
            {
                columns.Bound(x => x.Guid).Hidden();
                columns.Bound(x => x.Id).Hidden();
                columns.Bound(x => x.Index).Filterable(false).Title("#").Width(20).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                columns.Bound(x => x.RoomName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Room"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                columns.Bound(x => x.RoomBedName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Bed"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                columns.Bound(x => x.PatientName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["PatientName"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                columns.Bound(x => x.EntranceDate).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Format("{0: dd/MM/yyyy}").Title(Localizer["Date"] + " " + Localizer["Entrance"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                columns.Bound(x => x.EntranceDate).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Format("{0: HH:mm}").Title(Localizer["Time"] + " " + Localizer["Entrance"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                columns.Bound(x => x.ExitDate).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Format("{0: dd/MM/yyyy}").Title(Localizer["Date"] + " " + Localizer["Exit"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                columns.Bound(x => x.ExitDate).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Format("{0: HH:mm}").Title(Localizer["Time"] + " " + Localizer["Exit"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });

            }
        })

        .DataSource(dataSource => dataSource
        .Ajax()
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(p => p.Guid);
        })
        .PageSize(10)
        .Read(read => read.Action("GetAll", "ReceptionRoomBed").Data("FilterHistory"))
        )
        .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
        .Pageable(pageable => pageable
        .Input(true)
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5)
        .Numeric(true)) // Enable paging
        .Sortable().HtmlAttributes(new { @style = "direction: ltr;margin-top:2rem;overflow:auto" }) // Enable sorting
        )
    </div>
</div>