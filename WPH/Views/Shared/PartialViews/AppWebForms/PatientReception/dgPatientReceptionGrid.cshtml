@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject WPH.Resources.SharedViewLocalizer Localizer

@{
    string edit_title = Localizer["EditReception"];
    string remove_title = Localizer["RemoveReception"];
}


<div>
    @(Html.Kendo().Grid<WPH.Models.CustomDataModels.PatientReception.PatientReceptionViewModel>()
    .Name("kendoPatientReceptionGrid")
    .HtmlAttributes(new { ID = "idGridSymptomList", Class = "k-grid-header" })
    .Columns(columns =>
    {

        if (HttpContextAccessor.HttpContext.Session.GetString("culture") != "en")
        {
            if (ViewBag.HospitalPatient)
            {
                if ((bool)ViewBag.AccessEditHospitalPatient)
                {
                    columns.Bound("").Title(" ").Width(30)
                    .ClientTemplate(
                       $@"<a class='tooltip-success grid-btn edit' onClick='EditHospitalPatient(this);' data-id='#=Guid#' data-rel='tooltip' title='{edit_title}' data-original-title='Edit'>
                            <span class='green'>
                                <i class='ace-icon fa fa-pencil bigger-120'></i>
                            </span>
                        </a>
                    ");

                }

                columns.Bound(x => x.ReceptionStatus).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Status"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" }).ClientTemplate("#= LineItems_Databound(ReceptionStatus)#");
            }
            else
            {
                if((bool)ViewBag.AccessDeleteReception)
                {
                    columns.Bound("").Title(" ").Width(30)
                    .ClientTemplate(
                       $@"<a class='tooltip-error grid-btn' onClick='RemoveReception(this);' data-id='#=Guid#' data-rel='tooltip' title='{remove_title}' data-original-title='Delete'>
                            <span class='red'>
                                <i class='ace-icon fa fa-trash-can bigger-120'></i>
                            </span>
                        </a>
                    ");

                }

                if ((bool)ViewBag.AccessEditReception)
                {
                    columns.Bound("").Title(" ").Width(30)
                    .ClientTemplate(
                        $@"<a class='tooltip-success grid-btn edit' onClick='EditPatientReception(this);' data-id='#=Guid#' data-rel='tooltip' title='{edit_title}' data-original-title='Edit'>
                            <span class='green'>
                                <i class='ace-icon fa fa-pencil bigger-120'></i>
                            </span>
                         </a>
                    ");

                }
                if (ViewBag.useDollar == "true")
                {
                    columns.Bound("").Title("Get Money").Width(30)
                    .ClientTemplate(
                       @"<a class='tooltip-success grid-btn #if(Remained === 0){# hidden #}#' #if(Remained !== 0){# onClick='AddNewReceived(this);' #}#'  data-id='#=Guid#' data-amount='#=Remained#' data-rel='tooltip' title='Get Money' data-original-title='Edit'>
                            <span class='green'>
                                <i class='ace-icon fa fa-dollar bigger-120'></i>
                            </span>
                        </a>
                    ");

                    columns.Bound(x => x.Remained).Filterable(false).Title(Localizer["Remained"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });

                }
            }

            columns.Bound(x => x.Patient.User.PhoneNumber).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Mobile"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.Patient.UserGenderName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Gender"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.Patient.Age).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Age"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.Patient.User.Name).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["PatientName"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.InvoiceNum).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["InvoiceNum"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.InvoiceDate).Filterable(false).Format("{0: dd/MM/yyyy}").Title(Localizer["InvoiceDate"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.Index).Filterable(false).Width(5).Title("#").HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" }).Width(30);
            columns.Bound(x => x.Guid).Hidden();
            columns.Bound(x => x.Id).Hidden();
        }
        else
        {
            columns.Bound(x => x.Guid).Hidden();
            columns.Bound(x => x.Id).Hidden();
            columns.Bound(x => x.Index).Filterable(false).Title("#").HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).Width(30);
            columns.Bound(x => x.InvoiceDate).Filterable(false).Format("{0: dd/MM/yyyy}").Title(Localizer["InvoiceDate"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
            columns.Bound(x => x.InvoiceNum).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["InvoiceNum"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
            columns.Bound(x => x.Patient.User.Name).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["PatientName"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
            columns.Bound(x => x.Patient.Age).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Age"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
            columns.Bound(x => x.Patient.UserGenderName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Gender"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
            columns.Bound(x => x.Patient.User.PhoneNumber).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Mobile"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });

            if (ViewBag.HospitalPatient)
            {
                columns.Bound(x => x.ReceptionStatus).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Status"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).ClientTemplate("#= LineItems_Databound(ReceptionStatus)#");


                if ((bool)ViewBag.AccessEditHospitalPatient)
                {
                    columns.Bound("").Title(" ").Width(30)
                    .ClientTemplate(
                       $@"<a class='tooltip-success grid-btn edit' onClick='EditHospitalPatient(this);' data-id='#=Guid#' data-rel='tooltip' title='{edit_title}' data-original-title='Edit'>
                            <span class='green'>
                                <i class='ace-icon fa fa-pencil bigger-120'></i>
                            </span>
                        </a>
                    ");

                }
            }
            else
            {
                if (ViewBag.useDollar == "true")
                {
                    columns.Bound(x => x.Remained).Filterable(false).Title(Localizer["Remained"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });

                    columns.Bound("").Title("Get Money").Width(30)
                    .ClientTemplate(
                       @"<a class='tooltip-success grid-btn #if(Remained === 0){# hidden #}#' #if(Remained !== 0){# onClick='AddNewReceived(this);' #}#'  data-id='#=Guid#' data-amount='#=Remained#' data-rel='tooltip' title='Get Money' data-original-title='Edit'>
                            <span class='green'>
                                <i class='ace-icon fa fa-dollar bigger-120'></i>
                            </span>
                        </a>
                    ");
                }

                if ((bool)ViewBag.AccessEditReception)
                {
                    columns.Bound("").Title(" ").Width(30)
                    .ClientTemplate(
                       $@"<a class='tooltip-success grid-btn edit' onClick='EditPatientReception(this);' data-id='#=Guid#' data-rel='tooltip' title='{edit_title}' data-original-title='Edit'>
                            <span class='green'>
                                <i class='ace-icon fa fa-pencil bigger-120'></i>
                            </span>
                        </a>
                    ");

                }

                if ((bool)ViewBag.AccessDeleteReception)
                {
                    columns.Bound("").Title(" ").Width(30)
                    .ClientTemplate(
                       $@"<a class='tooltip-error grid-btn' onClick='RemoveReception(this);' data-id='#=Guid#' data-rel='tooltip' title='{remove_title}' data-original-title='Delete'>
                            <span class='red'>
                                <i class='ace-icon fa fa-trash-can bigger-120'></i>
                            </span>
                        </a>
                    ");

                }
            }
        }


    })

    .DataSource(dataSource => dataSource
    .Ajax()
    .ServerOperation(false)
    .Model(model =>
    {
        model.Id(p => p.Guid);
    })
    //.Sort(sort => sort.Add("InvoiceDate").Descending())
    .PageSize(10)
    .Read(read => read.Action("GetAll", "PatientReception").Data("GetPeriodAndStatusForPatientReception"))
    )
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
    .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
    .Pageable(pageable => pageable
    .Input(true)
    .Refresh(true)
    .PageSizes(true)
    .ButtonCount(5)
    .Numeric(true)) // Enable paging
    .Sortable().HtmlAttributes(new { @style = "direction: ltr;margin-top:2rem;overflow:auto" }) // Enable sorting

    )
</div>




<div id="PatientReceptionReceivedModal" class="modal fade MyFont-Roboto-grid" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content col-xs-12">
            <div class="modal-header col-xs-12">
                <button type="button" class="close" onclick="closePatientReceptionReceivedModal()" aria-hidden="true">&times;</button>
                <h3 id="PatientReceptionReceivedModal-header" class="smaller lighter blue no-margin MyFont-Roboto-grid">Received</h3>
            </div>

            <div id="PatientReceptionReceivedModal-body" class="modal-body col-xs-12">
            </div>

            <div class="modal-footer col-xs-12">
                @(Html.Kendo().Button()
                .Name("btn-PatientReceptionReceived-accept")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "k-primary pull-right", onclick = "addNewPatientReceptionReceived()" })
                .Content(Localizer["Ok"]))
                @(Html.Kendo().Button()
                .Name("btn-PatientReceptionReceived-close")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right", onclick = "closePatientReceptionReceivedModal()" })
                .Content(Localizer["Exit"]))

            </div>
        </div>
    </div>
</div>

<h3 id="AreYouSure" class="hidden">@Localizer["AreYouSure"]</h3>
<h3 id="AreYouSureOk" class="hidden">@Localizer["Ok"]</h3>
<h3 id="AreYouSureExit" class="hidden">@Localizer["Exit"]</h3>
<h3 id="CanNotDelete" class="hidden">@Localizer["CanNotDelete"]</h3>


<div id="my-modal-deleteReception" class="modal fade bd-example-modal-lg @if (HttpContextAccessor.HttpContext.Session.GetString("culture") == "en") {
                                                                                    @:MyFont-Roboto-grid
                                                                                  } else {
                                                                                    @:MyFont-Sarchia-grid
                                                                                        }" data-backdrop="static" data-keyboard="false" style="@if (HttpContextAccessor.HttpContext.Session.GetString("culture") != "en") {
            @:direction:rtl
                }">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="widget-header" style="padding:1rem">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h3 class='smaller @if (HttpContextAccessor.HttpContext.Session.GetString("culture") == "en") {
                                                                                    @:MyFont-Roboto-grid
                                                                                  } else {
                                                                                    @:MyFont-Sarchia-grid
                                                                                        }'>
                    <i class='ace-icon fa fa-exclamation-triangle red '></i>@Localizer["DeleteRecordHeader"]
                </h3>
            </div>

            <div id="deleteReception-modal-body" class="modal-body">
                @Localizer["DeleteRecordBody"]
                <div id="ERROR_ThisRecordHasDependencyOnItInAnotherEntity" class="red label-white middle hidden" style="height:40px;display:block;margin-top:2rem">
                    <i class="ace-icon fa fa-stop bigger-120"></i>
                    @Localizer["ERROR_ThisRecordHasDependencyOnItInAnotherEntity"]
                </div>
                <div id="ERROR_SomeThingWentWrong" class="red label-white middle hidden" style="height:40px;display:block">
                    <i class="ace-icon fa fa-stop bigger-120"></i>
                    @Localizer["ERROR_SomeThingWentWrong"]
                </div>
            </div>

            <div class="modal-footer">
                @Html.AntiForgeryToken()

                @(Html.Kendo().Button()
                .Name("btn-deleteReception-accept")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "k-primary pull-right" })
                .Content(@Localizer["Ok"]))
                @(Html.Kendo().Button()
                .Name("btn-close-modal-eleteReception")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right", @data_dismiss = "modal" })
                .Content(@Localizer["Exit"]))

            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div>




<script>
    function LineItems_Databound(status) {
        if (status == 'Paid') {
            return "<div style='background:lightgreen;border-radius: 5px;'>" + status + " </div>";
        } else {
            return "<div style='background:pink;border-radius: 5px;'>" + status + " </div>";
        }
    }


    $(document).ready(function () {

        $("#kendoPatientReceptionGrid").on("dblclick", "tr.k-state-selected", function (element) {

            $("#kendoPatientReceptionGrid").find("tr.k-state-selected td a.edit").click();

        });

    })


    function EditPatientReception(element) {
        $(".loader").removeClass("hidden");
        let id = $(element).attr("data-id");

        let link = "";

        let clinicSectionlist = $("#sections").data("kendoDropDownList");

        if (clinicSectionlist.text() === "Surgery") {
            link = "/Reception/Edit?Id="
        }
        else if (clinicSectionlist.text() === "Emergency") {
            link = "/EmergencyReception/Edit?Id="
        }
        else {
            link = "/PatientReceptionAnalysis/EditModal?Id="
        }

        $(".page-content").load(link + id, function (responce) {


            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        })
    }

    function EditHospitalPatient(element) {
        $(".loader").removeClass("hidden");
        let id = $(element).attr("data-id");

        let link = "/HospitalPatient/Edit?Id=";

        $(".page-content").load(link + id, function (responce) {

            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        })
    }


    function RemoveReception(element) {

        $("#ERROR_ThisRecordHasDependencyOnItInAnotherEntity").addClass("hidden");

        $("#ERROR_SomeThingWentWrong").addClass("hidden");

        $(".loader").removeClass("hidden");
        $('#my-modal-deleteReception').modal('toggle');
        var Id = $(element).attr('data-id');
        $('#btn-deleteReception-accept').attr('data-id', Id);
        $(".loader").fadeIn("slow");
        $(".loader").addClass("hidden");

    }

    $('#btn-deleteReception-accept').on("click", function () {
        $(this).attr("disabled", true);

        $("#ERROR_ThisRecordHasDependencyOnItInAnotherEntity").addClass("hidden");

        $("#ERROR_SomeThingWentWrong").addClass("hidden");

        var Id = $(this).attr('data-id');

        let link = "";

        let clinicSectionlist = $("#sections").data("kendoDropDownList");

        if (clinicSectionlist.text() === "Surgery") {
            link = "/Reception/Remove"
        }
        else if (clinicSectionlist.text() === "Emergency") {
            link = "/EmergencyReception/Remove"
        }
        else {
            link = "/PatientReception/RemoveWithReceives"
        }
        var GridRefreshLink = $("#GridRefreshLink").attr("data-Value");
        if (!IfUserCheckPass(GridRefreshLink)) {
            $('#btn-deleteReception-accept').removeAttr("disabled");
            return;
        }
        var token = $(':input:hidden[name*="RequestVerificationToken"]');
        $(".loader").removeClass("hidden");
        $.ajax({
            type: "Post",
            url: link,
            data: {
                __RequestVerificationToken: token.attr('value'),
                Id: Id
            },
            success: function (response) {
                $('#btn-deleteReception-accept').removeAttr("disabled");

                if (response === "SUCCESSFUL") {
                    $('#my-modal-deleteReception').modal('hide');
                    $(".modal-backdrop:last").remove();
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                    $(".k-pager-refresh")[0].click();
                }
                else if (response === "ERROR_ThisRecordHasDependencyOnItInAnotherEntity") {
                    $("#ERROR_ThisRecordHasDependencyOnItInAnotherEntity").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                }
                else if (response === "ERROR_SomeThingWentWrong" || response == 0) {
                    $("#ERROR_SomeThingWentWrong").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                }
                else if (response === "AreYouSure") {
                    AskForDelete(Id);
                }
                else if (response === "CanNotDelete") {
                    CanNotDelete();
                }
            }
        });
    });




    function AskForDelete(Id) {

        $('#my-modal-delete').modal('hide');
        $(".modal-backdrop:last").remove();
        $(".loader").fadeIn("slow");
        $(".loader").addClass("hidden");

        let AreYouSure = $('#AreYouSure').text();
        let ok = $('#AreYouSureOk').text();
        let exit = $('#AreYouSureExit').text();

        bootbox.confirm({
            message: AreYouSure,
            className: 'bootbox-class',
            buttons: {
                confirm: {
                    label: ok,
                    className: 'btn-success'
                },
                cancel: {
                    label: exit,
                    className: 'btn-danger'
                }
            },
            callback: function (result) {

                if (result) {

                    $(".loader").removeClass("hidden");

                    if (clinicSectionlist.text() === "Surgery") {
                        link = "/Reception/Remove"
                    }
                    else if (clinicSectionlist.text() === "Emergency") {
                        link = "/EmergencyReception/Remove"
                    }
                    else {
                        link = "/PatientReception/RemoveWithReceives"
                    }

                    var token = $(':input:hidden[name*="RequestVerificationToken"]');
                    $(".loader").removeClass("hidden");
                    $.ajax({
                        type: "Post",
                        url: link,
                        data: {
                            __RequestVerificationToken: token.attr('value'),
                            Id: Id
                        },
                        success: function (response) {
                            $(".k-pager-refresh")[0].click();
                            $(".loader").fadeIn("slow");
                            $(".loader").addClass("hidden");
                        }
                    });
                }
            }
        })
    }

    function CanNotDelete() {

        let CanNotDelete = $('#CanNotDelete').text();

        $('#my-modal-delete').modal('hide');
        $(".modal-backdrop:last").remove();
        $(".loader").fadeIn("slow");
        $(".loader").addClass("hidden");
        bootbox.alert({
            message: CanNotDelete,
            className: 'bootbox-class'

        });
    }

    var receptionId;

    function AddNewReceived(element) {
        receptionId = $(element).attr('data-id');
        let amount = $(element).attr('data-amount');
        var link = "/PatientReceptionReceived/AddNewModal";
        $(".loader").removeClass("hidden");
        $('#PatientReceptionReceivedModal').modal('toggle');
        $('#PatientReceptionReceivedModal-body').load(link, function () {
            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
            $("#PatientReceptionReceivedAmount").val(amount);
        });

    }

    function addNewPatientReceptionReceived() {

        let amount = parseFloat($("#PatientReceptionReceivedAmount").val());

        if (amount === 0 || amount === null || amount === undefined || Number.isNaN(amount)) {
            $("#PatientReceptionReceivedAmount-box").removeClass('hidden');
            return;
        }

        var data = { PatientReceptionId: receptionId, Amount: amount, AmountCurrencyId: $("#PatientReceptionReceivedAmountCorrencyId").val() };
        $(".loader").removeClass("hidden");

        $.ajax({
            type: "Post",
            url: "/PatientReceptionReceived/AddOrUpdate",
            data: data,
            success: function (response) {
                if (response !== 0) {

                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                    $(".k-pager-refresh")[0].click();
                }
            }
        });


        $('#PatientReceptionReceivedModal').modal('toggle');
        $('#PatientReceptionReceivedModal-body').empty();

    }


    function closePatientReceptionReceivedModal() {
        $('#PatientReceptionReceivedModal').modal('toggle');
        $('#PatientReceptionReceivedModal-body').empty();
    }


</script>