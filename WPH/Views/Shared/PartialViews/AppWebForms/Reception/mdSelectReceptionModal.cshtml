@model WPH.Models.CustomDataModels.BaseInfo.BaseInfosAndPeriodsViewModel

@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject WPH.Resources.SharedViewLocalizer Localizer


<input class="hidden" type="text" id="period-id" data-Value="@Model.periods.FirstOrDefault().Id" />
<h1 id="FromTo" class="hidden">@ViewBag.FromToId</h1>

<div class="space-10"></div>
<div class="row @if (HttpContextAccessor.HttpContext.Session.GetString("culture") == "en") {
                                                                                    @:MyFont-Roboto-grid
                                                                                  } else {
                                                                                    @:MyFont-Sarchia-grid
                                                                                        }">

    @*<input class="hidden" type="text" id="sections" name="sections" data-Value="@ViewBag.SectionId" data-text="@ViewBag.SectionText" value="@ViewBag.SectionId" />*@

    <div class="col-xs-2" style="padding-left:unset;padding-right:unset;">
        @(Html.Kendo().DropDownList()
        .Name("periods")
        .BindTo(Model.periods)
        .DataTextField("Name")
        .DataValueField("Id")
        .Filter("contains")

        .HtmlAttributes(new { style = "width: 100%;font-size:1.5rem", onchange = "PeriodsChangeData()" })
        )
    </div>

    <div class="col-xs-10">

        <div id="DateFromDiv" class="col-xs-12 col-sm-5 hidden">
            <div class="col-xs-4 " style="text-align:left">

                <h5 class="MyFont-Roboto-grid">@Localizer["FromDate"]</h5>

            </div>
            <div class="col-xs-8">
                @(Html.Kendo().DatePicker()
                .Name("KendoFromDate")
                .Value(DateTime.Now)
                .Format("dd/MM/yyyy")
                .HtmlAttributes(new { style = "width: 100%;font-size:1.5rem", onchange = "dateTimePickerWorkWithSpace(this)" })
                )

            </div>
        </div>

        <div id="DateToDiv" class="col-xs-12 col-sm-5 hidden">

            <div class="col-xs-4" style="text-align:left">
                <h5 class="MyFont-Roboto-grid">@Localizer["ToDate"]</h5>
            </div>

            <div class="col-xs-8">

                @(Html.Kendo().DatePicker()
                .Name("KendoDateTo")
                .Value(DateTime.Now)
                .Format("dd/MM/yyyy")
                .HtmlAttributes(new { style = "width: 100%;font-size:1.5rem", onchange = "dateTimePickerWorkWithSpace(this)" })
                )
            </div>

        </div>

        <div id="SearchBtnDiv" class="col-xs-1 hidden">

            @(Html.Kendo().Button()
            .Name("btn-search-visit")
            .HtmlAttributes(new { style = "font-size:1.5rem;padding:0.7rem", type = "button", @class = "k-primary pull-right", onclick = "btnSearchClick()" })
            .Content("<i class='fa fa-search'></i>"))

        </div>

    </div>

</div>
<script>
        function GetPeriodForReception() {

        var periodId = $('#period-id').attr('data-Value');

        var fromDate = $("#KendoFromDate").data("kendoDatePicker");
        var toDate = $("#KendoDateTo").data("kendoDatePicker");

        var frDate = fromDate.value();
        var tDate = toDate.value();
        let frMonth = frDate.getMonth() + 1;
        let frDay = frDate.getDate();
        let toMonth = tDate.getMonth() + 1;
        let toDay = tDate.getDate();

        if (frMonth < 10)
            frMonth = "0" + frMonth;
        if (toMonth < 10)
            toMonth = "0" + toMonth;
        if (frDay < 10)
            frDay = "0" + frDay;
        if (toDay < 10)
            toDay = "0" + toDay;

        let from = frDate.getFullYear() + "-" + frMonth + "-" + frDay;
        let too = tDate.getFullYear() + "-" + toMonth + "-" + toDay;

        //var period = document.getElementById('sections');
        //var periodValue = $("#sections").attr('data-Value');
        //var periodText = $("#sections").attr('data-text');
        
        var periodValue = '@ViewBag.SectionId';
        var periodText = '@ViewBag.SectionText';

        let section = { Id: periodValue, Name: periodText }

        return {

            periodId: periodId,
            dateFrom: from,
            dateTo: too,
            section: section,
            receptionId: old_reception_value,
            status: 1
        };
    }
</script>

<div>
    @(Html.Kendo().Grid<WPH.Models.CustomDataModels.PatientReception.PatientReceptionViewModel>()
    .Name("kendoPatientReceptionGrid")
    .HtmlAttributes(new { ID = "idGridSymptomList", Class = "k-grid-header" })
    .Columns(columns =>
    {

    if (HttpContextAccessor.HttpContext.Session.GetString("culture") != "en")
    {
    columns.Bound("").Title("").Width(30)
    .ClientTemplate(
    @"<a class='tooltip-success grid-btn ' onClick='SelectPatientReception(this);' data-id='#=Guid#' data-bed='#=RoomBedId#' data-rel='tooltip' title='Select' data-original-title='Edit'>
    <span class='green'>
    <i class='ace-icon fa fa-check-square-o bigger-120'></i>
    </span>
    </a>
    ");

    columns.Bound(x => x.RoomBedName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Room|Bed"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
    columns.Bound(x => x.Patient.User.PhoneNumber).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Mobile"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
    columns.Bound(x => x.Patient.UserGenderName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Gender"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
    columns.Bound(x => x.Patient.Age).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Age"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
    columns.Bound(x => x.Patient.User.Name).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["PatientName"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
    columns.Bound(x => x.InvoiceNum).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["InvoiceNum"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
    columns.Bound(x => x.InvoiceDate).Filterable(false).Format("{0: dd/MM/yyyy}").Title(Localizer["InvoiceDate"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
    columns.Bound(x => x.Index).Filterable(false).Width(5).Title("#").HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).Width(30);
    columns.Bound(x => x.RoomBedId).Hidden();
    columns.Bound(x => x.Guid).Hidden();
    columns.Bound(x => x.Id).Hidden();
    }
    else
    {
    columns.Bound(x => x.Guid).Hidden();
    columns.Bound(x => x.RoomBedId).Hidden();
    columns.Bound(x => x.Id).Hidden();
    columns.Bound(x => x.Index).Filterable(false).Title("#").HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).Width(30);
    columns.Bound(x => x.InvoiceDate).Filterable(false).Format("{0: dd/MM/yyyy}").Title(Localizer["InvoiceDate"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
    columns.Bound(x => x.InvoiceNum).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["InvoiceNum"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
    columns.Bound(x => x.Patient.User.Name).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["PatientName"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
    columns.Bound(x => x.Patient.Age).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Age"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
    columns.Bound(x => x.Patient.UserGenderName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Gender"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
    columns.Bound(x => x.Patient.User.PhoneNumber).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Mobile"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
    columns.Bound(x => x.RoomBedName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Room|Bed"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });

    columns.Bound("").Title("").Width(30)
    .ClientTemplate(
    @"<a class='tooltip-success grid-btn ' onClick='SelectPatientReception(this);' data-id='#=Guid#' data-bed='#=RoomBedId#' data-rel='tooltip' title='Select' data-original-title='Edit'>
    <span class='green'>
    <i class='ace-icon fa fa-check-square-o bigger-120'></i>
    </span>
    </a>
    ");

    }

    })

    .DataSource(dataSource => dataSource
    .Ajax()
    .Model(model =>
    {
    model.Id(p => p.Guid);
    })
    //.Sort(sort => sort.Add("InvoiceDate").Descending())
    .PageSize(10)
    .Read(read => read.Action("GetAllForRoomBed", "PatientReception").Data("GetPeriodForReception"))
    )
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
    .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
    .Pageable(pageable => pageable
    .Input(true)
    .Refresh(true)
    .PageSizes(true)
    .ButtonCount(5)
    .Numeric(true)) // Enable paging
    .Sortable().HtmlAttributes(new { @style = "direction: ltr;margin-top:2rem;overflow:auto" }) // Enable sorting

    )
</div>

<div id="DeleteRoomBedModal-body" class="modal-body">
    <div id="ERROR_ThisRecordHasDependencyOnItInAnotherEntity" class="red label-white middle hidden" style="height:40px;display:block;margin-top:2rem">
        <i class="ace-icon fa fa-stop bigger-120"></i>
        @Localizer["ERROR_ThisRecordHasDependencyOnItInAnotherEntity"]
    </div>
    <div id="ERROR_SomeThingWentWrong" class="red label-white middle hidden" style="height:40px;display:block">
        <i class="ace-icon fa fa-stop bigger-120"></i>
        @Localizer["ERROR_SomeThingWentWrong"]
    </div>
</div>

<script>
    function PeriodsChangeData() {

        var period = $("#periods").data("kendoDropDownList");

        var periodValue = period.value();


        $('#period-id').attr('data-Value', periodValue);

        var fromTo = $("#FromTo").text();

        if (periodValue === fromTo) {
            $("#DateFromDiv").removeClass("hidden");
            $("#DateToDiv").removeClass("hidden");
            $("#SearchBtnDiv").removeClass("hidden");
            let date = $("#KendoFromDate").data("kendoDatePicker");
            date.element.focus();
            date.element.select();
        }

        else {
            $("#DateFromDiv").addClass("hidden");
            $("#DateToDiv").addClass("hidden");
            $("#SearchBtnDiv").addClass("hidden");
            $("#kendoPatientReceptionGrid").find(".k-i-reload").click();
        }

    }

    function SectionChange() {

        $("#kendoPatientReceptionGrid").find(".k-i-reload").click();

    }

    function btnSearchClick() {
        var period = $("#periods").data("kendoDropDownList");

        var periodValue = period.value();


        $('#period-id').attr('data-Value', periodValue);
        $("#kendoPatientReceptionGrid").find(".k-i-reload").click();

    }


    function AddPatientReceptionAnalysis() {

        $(".loader").removeClass("hidden");
        $(".page-content").load("/PatientReceptionAnalysis/Form", function (responce) {

            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        })

    }


    $('#KendoFromDate').keypress(function (e) {

        if (e.which === 13 || e.which === 9) {
            let date = $("#KendoDateTo").data("kendoDatePicker");
            date.element.focus();
            //date.element.select();
        }


    });

    $('#KendoFromDate').focus(function (e) {

        let date = $("#KendoFromDate").data("kendoDatePicker");
        date.element.select();

    });

    $('#KendoDateTo').keypress(function (e) {

        if (e.which === 13 || e.which === 9) {
            $("#btn-search-visit").focus();
        }

    });


    $('#KendoDateTo').focus(function (e) {

        let date = $("#KendoDateTo").data("kendoDatePicker");
        date.element.select();

    });


</script>