@model WPH.Models.Pay.PayViewModel
@using Microsoft.AspNetCore.Http
@using System.Globalization
@inject IHttpContextAccessor HttpContextAccessor
@inject WPH.Resources.SharedViewLocalizer Localizer

@{
    string font = "", pull = "", row_reverse = "", dir = "";

    if (HttpContextAccessor.HttpContext.Session.GetString("culture") == "en")
    {
        font = " MyFont-Roboto-grid ";
        pull = " pull-left ";
        row_reverse = "row";
        dir = " ";

    }
    else
    {
        font = " MyFont-Sarchia-grid ";
        pull = " pull-right ";
        row_reverse = "row-reverse";
        dir = " direction:rtl; ";
        <h3 id="newPayText" class="hidden">@Localizer["Pay"] @Localizer["New"]</h3>
    }

}

<script>

    $('#AddPayInvoiceModal-supplier').text('@Model.SupplierName');

    function GetSupplierAndCurrency() {

        return {
            supplierId: $("#SupplierIdFilter").val()
        };
    }

</script>

@Html.AntiForgeryToken()
@Html.HiddenFor(m => m.Guid)
@Html.HiddenFor(m => m.SupplierId)
@Html.HiddenFor(m => m.PayType)


@if (Model?.PayAmounts != null)
{
    CultureInfo cultures = new CultureInfo("en-US");
    foreach (var item in Model.PayAmounts)
    {

        int? cur = item.BaseCurrencyId;
        string _amount = $"UAmount_{cur}";
        string _baseCurrencyName = $"UBaseCurrencyName_{cur}";
        string _baseAmount = $"UBaseAmount_{cur}";
        string _destAmount = $"UDestAmount_{cur}";
        string _discount = $"UDiscount_{cur}";
        string _currencyId = $"UCurrencyId_{cur}";
        string _currencyName = $"UCurrencyName_{cur}";
        <div>
            <input type="hidden" id="@_amount" value="@($"{item.Amount.Value.ToString("#.##", cultures)}")" />
            <input type="hidden" id="@_baseCurrencyName" value="@item.BaseCurrencyName" />
            <input type="hidden" id="@_baseAmount" value="@($"{item.BaseAmount.Value.ToString("#.##", cultures)}")" />
            <input type="hidden" id="@_destAmount" value="@($"{item.DestAmount.Value.ToString("#.##", cultures)}")" />
            <input type="hidden" id="@_discount" value="@($"{item.Discount.Value.ToString("#.##", cultures)}")" />
            <input type="hidden" id="@_currencyId" value="@item.CurrencyId" />
            <input type="hidden" id="@_currencyName" value="@item.CurrencyName" />
        </div>
    }
}


<div style="clear:both;overflow:hidden;">

    <div style="width:100%;direction:ltr;">

        <div style="width:98%;margin: 0px auto;">
            <div style="width:100%;display:flex;margin:10px 0px;">
                <div style="width:46%;">
                    <h1 class="@font blue @pull" style="font-size:1.4rem;margin: 0px;">
                        @Localizer["PayPurchaseInvoice"]
                    </h1>
                </div>
                <div style="width: 8%;">

                </div>
                <div style="width: 46%;">
                    <h1 class="@font blue @pull" style="font-size:1.4rem;margin: 0px;">
                        @Localizer["NotPayPurchaseInvoice"]
                    </h1>
                </div>
            </div>
            <div style="width:100%;display:flex;">

                <div class=" Grid-Content @font" style="width:46%;height:200px;overflow-y: auto;overflow-x: hidden;">
                    @await Html.PartialAsync("~/Views/Shared/PartialViews/AppWebForms/Pay/dgPayInvoiceGrid.cshtml")
                </div>
                <div style="width: 8%;height:200px;display:flex;flex-direction:column;align-items:center;justify-content: center;">
                    @(Html.Kendo().Button()
                        .Name("btn_select_pay")
                        .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "btn btn-success" })
                        .Content(Localizer["<"]))
                    @(Html.Kendo().Button()
                        .Name("btn_notSelect_pay")
                        .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "btn btn-danger " })
                        .Content(Localizer[">"]))
                </div>
                <div class=" Grid-Content @font" style="width: 46%;height:200px;overflow-y: auto;overflow-x: hidden;">

                    @await Html.PartialAsync("~/Views/Shared/PartialViews/AppWebForms/Pay/dgTotalInvoiceGrid.cshtml")
                </div>
            </div>
        </div>


        <div style="width:98%;margin: 0px auto;">
            <div style="width:100%;display:flex;margin:10px 0px;">
                <div style="width:46%;">
                    <h1 class="@font blue @pull" style="font-size:1.4rem;margin: 0px;">
                        @Localizer["PayReturnPurchaseInvoice"]
                    </h1>
                </div>
                <div style="width: 8%;">

                </div>
                <div style="width: 46%;">
                    <h1 class="@font blue @pull" style="font-size:1.4rem;margin: 0px;">
                        @Localizer["NotPayReturnPurchaseInvoice"]
                    </h1>
                </div>
            </div>
            <div style="width:100%;display:flex;">

                <div class=" Grid-Content @font" style="width:46%;height:200px;overflow-y: auto;overflow-x: hidden;">
                    @await Html.PartialAsync("~/Views/Shared/PartialViews/AppWebForms/Pay/dgPayReturnInvoiceGrid.cshtml")
                </div>
                <div style="width: 8%;height:200px;display:flex;flex-direction:column;align-items:center;justify-content: center;">
                    @(Html.Kendo().Button()
                        .Name("btn_select_return")
                        .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "btn btn-success" })
                        .Content(Localizer["<"]))
                    @(Html.Kendo().Button()
                        .Name("btn_notSelect_return")
                        .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "btn btn-danger " })
                        .Content(Localizer[">"]))
                </div>
                <div class=" Grid-Content @font" style="width: 46%;height:200px;overflow-y: auto;overflow-x: hidden;">
                    @await Html.PartialAsync("~/Views/Shared/PartialViews/AppWebForms/Pay/dgTotalReturnInvoiceGrid.cshtml")
                </div>
            </div>
        </div>

    </div>

    <div class="row page-header ">

    </div>

    <div class="col-sm-12" style="padding:0px;">

        <div class="col-sm-2">
            <label class="block clearfix">
                <label for="form-field-8">@Localizer["Date"] : </label>
                <span class="block input-icon input-icon-right">
                    @(Html.Kendo().DatePicker()
                        .Name("PayDateTxt")
                        .Format("dd/MM/yyyy")
                        .Value(Model.PayDate ?? DateTime.Now)
                        .Enable((bool)(ViewBag.AccessEditDate ?? false))
                        .HtmlAttributes(new { style = "width: 100%;", @data_checkEmpty = "PayDateTxt-box" })
                        )
                </span>
                <span id="PayDateTxt-box" class="emptybox hidden" data-isEssential="true" style="color:red;">
                    @Localizer["ThisFieldIsEmptyPleaseFillIt"]
                </span>
                <span id="Date-valid" class="emptybox hidden" style="color:red;">
                    @Localizer["DateNotValid"]
                </span>
            </label>
        </div>

        <div class="col-sm-3">
            <label class="block clearfix">
                <label for="form-field-8">@Localizer["BillNumber"] : </label>
                <span class="block input-icon input-icon-right">
                    @(Html.Kendo().TextBox()
                    .Name("MainInvoiceNum")
                    .Value(Model.MainInvoiceNum)
                    .HtmlAttributes(new { style = "width: 100%" })
                    )
                </span>
            </label>
        </div>

        <div class="col-sm-2">
            <label class="block clearfix">
                <label for="form-field-8">@Localizer["InvoiceNum"] : </label>
                <span class="block input-icon input-icon-right">
                    @(Html.Kendo().TextBox()
                    .Name("InvoiceNum")
                    .Enable(false)
                    .Value(Model.InvoiceNum)
                    .HtmlAttributes(new { style = "width: 100%" })
                    )
                </span>
            </label>
        </div>

        <div class="col-sm-5">
            <label class="block clearfix">
                <label for="form-field-8">@Localizer["Description"] : </label>
                <span class="block input-icon input-icon-right">
                    @(Html.Kendo().TextArea()
                        .Name("Description")
                        .Value(Model.Description)
                        .HtmlAttributes(new { style = "width:100%" })
                        )
                </span>
            </label>
        </div>

    </div>
    <div id="amount_container" class="col-sm-12" style="padding:0px;">

    </div>

    <div id="total_amount_container" class="col-sm-12" style="padding:0px;">

    </div>

</div>

<script>
    let currency_dataSource;

    $(document).ready(function () {

        $.ajax({
            type: "Get",
            url: "/BaseInfo/GetAllCurrencies",
            success: function (response) {

                currency_dataSource = response;
                RefreshGrids();
            }
        });

        setTimeout(function () {

            $('#PayDateTxt').focus();
        }, 500);
    });


    $('#PayDateTxt').on('keypress', function (e) {
        if (e.which === 13) {
            $("#Description").focus();
        }
    });


    $('#Description').keypress(function (e) {
        if (e.which === 13 || e.which === 9) {

            let dis = $(`#DetailDiscount_0`).data("kendoNumericTextBox");
            if (dis) {
                dis.focus();

            } else {

                $("#btn-AddPayInvoiceModal-accept").focus();
            }

        }
    });




    function CalculateTotal() {
        let last = '';

        let payInvoice_dataSource = $("#payInvoiceKendoGrid").data("kendoGrid").dataSource.data();
        payInvoice_dataSource.filter(function (item) {

            if (item.TotalPrice != null) {

                let res = item.TotalPrice.toString().split("_");

                for (let i = 0; i < res.length; i++) {
                    let money = res[i].split(" ");

                    if (money.length > 1) {

                        if (last.includes(money[0])) {
                            let last_res = last.toString().split("_");
                            let new_last = '';
                            for (let j = 0; j < last_res.length; j++) {
                                if (last_res[j].includes(money[0])) {
                                    let last_money = last_res[j].split(" ");

                                    let sum = Number(GetFirstNumber(money[1]));
                                    let last_sum = Number(GetFirstNumber(last_money[1]));

                                    sum += last_sum;
                                    new_last += `${money[0]} ${parseFloat(sum).toLocaleString('en')}_`;
                                } else {
                                    if (last_res[j] != '')
                                        new_last += `${last_res[j]}_`;
                                }
                            }
                            last = new_last;
                        } else {

                            last += `${money[0]} ${money[1]}_`;
                        }

                    }
                }

                var last_rem = last.split("_");
                var rem = last;
                for (var i = 0; i < last_rem.length; i++) {
                    let money = last_rem[i].split(" ");
                    if (!rem.includes(money[0]) && money.length > 1) {
                        last += `${money[0]} ${money[1]}_`;
                    }
                }
            }

            return false;
        });


        let payReturn_dataSource = $("#payReturnInvoiceKendoGrid").data("kendoGrid").dataSource.data();
        payReturn_dataSource.filter(function (item) {

            if (item.TotalPrice != null) {

                let res = item.TotalPrice.toString().split("_");

                for (let i = 0; i < res.length; i++) {
                    let money = res[i].split(" ");

                    if (money.length > 1) {

                        if (last.includes(money[0])) {
                            let last_res = last.toString().split("_");
                            let new_last = '';
                            for (let j = 0; j < last_res.length; j++) {
                                if (last_res[j].includes(money[0])) {
                                    let last_money = last_res[j].split(" ");

                                    let sum = Number(GetFirstNumber(money[1]));
                                    let last_sum = Number(GetFirstNumber(last_money[1]));

                                    sum = -sum;

                                    //if (last_money[1].includes("-"))
                                    //    last_sum = -last_sum;

                                    sum += last_sum;
                                    new_last += `${money[0]} ${parseFloat(sum).toLocaleString('en')}_`;
                                } else {
                                    if (last_res[j] != '')
                                        new_last += `${last_res[j]}_`;
                                }
                            }
                            last = new_last;
                        } else {

                            last += `${money[0]} -${money[1]}_`;
                        }

                    }
                }

                var last_rem = last.split("_");
                var rem = last;
                for (var i = 0; i < last_rem.length; i++) {
                    let money = last_rem[i].split(" ");
                    if (!rem.includes(money[0]) && money.length > 1) {
                        last += `${money[0]} ${money[1]}_`;
                    }
                }
            }

            return false;
        });



        let elements = '';
        let amount_txt = '@Localizer["Amount"]';
        let pay_txt = '@Localizer["Pay"]';
        let currency_txt = '@Localizer["Currency"]';
        let detailDiscount_txt = '% @Localizer["Discount"]';
        let discount_txt = '# @Localizer["Discount"]';

        let item = last.split("_");
        for (var i = 0; i < item.length; i++) {
            if (item[i] != '') {
                let money = item[i].split(" ");

                let main_currency_id = GetCurrencyIdByName(money[0]);
                let currency_id = main_currency_id;
                let update_currency = $(`#UCurrencyId_${currency_id}`).val();
                if (update_currency)
                    currency_id = update_currency;

                let discount_val = 0;
                let update_discount = $(`#UDiscount_${main_currency_id}`).val();
                if (update_discount)
                    discount_val = update_discount;

                let baseAmount_val = 1;
                let update_baseAmount = $(`#UBaseAmount_${main_currency_id}`).val();
                if (update_baseAmount)
                    baseAmount_val = update_baseAmount;

                let destAmount_val = 1;
                let update_destAmount = $(`#UDestAmount_${main_currency_id}`).val();
                if (update_destAmount)
                    destAmount_val = update_destAmount;

                let lblDestAmount_val = '';
                let update_lblDestAmount = $(`#UCurrencyName_${main_currency_id}`).val();
                if (update_lblDestAmount)
                    lblDestAmount_val = update_lblDestAmount;

                let hid = '';
                if (main_currency_id == currency_id)
                    hid = " hidden ";

                let visible = '';
                //if (money[1].includes('-')) {
                //    visible = ' visibility: hidden; ';
                //} else {
                //    visible = ' visibility: visible; ';
                //}
                elements += `
                        <div class="col-sm-12 PayLine" data-line="${i}" style="padding:0px;">

                            <div class="col-sm-2">
                                <label class="block clearfix">
                                    <label for="form-field-8">${amount_txt} : </label>
                                    <span class="block input-icon input-icon-right">
                                        <input id="Amount_${i}" value="${money[1]}" class="payAmountTxt" style="width:85%;" />
                                        <label id="BaseCurrency_${i}">${money[0]}</label>
                                    </span>
                                </label>
                            </div>

                            <div class="col-sm-3" style="padding:0px;${visible}">
                                <div class="col-sm-6">
                                    <label class="block clearfix">
                                        <label for="form-field-8">${detailDiscount_txt} : </label>
                                        <span class="block input-icon input-icon-right">

                                            <input type="number" value="0" min="0" max="100" id="DetailDiscount_${i}" onfocusout="DetailDiscountFocusOut(this)" onkeypress="DetailDiscountKeyPress(this)" class="payAmountDiscount" style="width:100%;" />

                                        </span>
                                    </label>
                                </div>

                                <div class="col-sm-6">
                                    <label class="block clearfix">
                                        <label for="form-field-8">${discount_txt} : </label>
                                        <span class="block input-icon input-icon-right">

                                            <input type="number" value="${discount_val}" min="0" id="Discount_${i}" onfocusout="DiscountFocusOut(this)" onkeypress="DiscountKeyPress(this)" class="payAmountDiscount " style="width:100%;" />

                                        </span>
                                        <label id="lblDiscountChangeAmount_${i}" class="hidden" style="font-size: 12px;color: grey;"></label>
                                    </label>
                                </div>
                            </div>

                            <div class="col-sm-2">
                                <label class="block clearfix">
                                    <label for="form-field-8">${pay_txt} : </label>
                                    <span class="block input-icon input-icon-right">
                                        <input id="Pay_${i}" value="${money[1]}" class="payAmountTxt" style="width:100%;" />
                                    </span>
                                    <label id="lblPayChangeAmount_${i}" class="hidden" style="font-size: 12px;color: grey;"></label>
                                </label>
                            </div>

                            <div class="col-sm-2">
                                <label class="block clearfix">
                                    <label for="form-field-8">${currency_txt} : </label>
                                    <span class="block input-icon input-icon-right">
                                        <input id="Currency_${i}" value="${currency_id}" onchange="CurrencyChange(this)" class="payAmountCurrency" style="width:100%;" />
                                    </span>
                                    <label id="lblChangeAmount_${i}" class="hidden" style="font-size: 12px;color: grey;"></label>
                                </label>
                            </div>

                            <div id="convert_container_${i}" class="col-sm-3 ${hid}" style="padding:0px;">
                                <div class="col-sm-6">
                                    <label class="block clearfix ">
                                        <label id="lblBaseAmount_${i}" for="form-field-8">${money[0]}</label>
                                        <span class="block input-icon input-icon-right">

                                            <input type="number" value="${baseAmount_val}" min="1" id="BaseAmount_${i}" onfocusout="ChangeAmountFocusOut(this)" onkeypress="BaseAmountKeyPress(this)" class="payAmountNum" style="width:100%;" />

                                        </span>
                                    </label>
                                </div>

                                <div class="col-sm-6">
                                    <label class="block clearfix ">
                                        <label id="lblDestAmount_${i}" for="form-field-8">${lblDestAmount_val}</label>
                                        <span class="block input-icon input-icon-right">

                                            <input type="number" value="${destAmount_val}" min="1" id="DestAmount_${i}" onfocusout="ChangeAmountFocusOut(this)" onkeypress="DestAmountKeyPress(this)" class="payAmountNum " style="width:100%;" />

                                        </span>
                                    </label>
                                </div>
                            </div>

                        </div>`
                    ;
            }
        }


        $('#amount_container').empty();
        $('#total_amount_container').empty();
        var div = document.getElementById("amount_container");
        div.insertAdjacentHTML('afterbegin', elements);

        SetTelerikItems(currency_dataSource);
    }


    function SetTelerikItems(dataSource) {

        $(".payAmountDiscount").kendoNumericTextBox({
            culture: "en-US",
            min: 0,
            format: "#,#.##"
        });

        $(".payAmountNum").kendoNumericTextBox({
            culture: "en-US",
            decimals: 0,
            min: 1,
            format: "#,#.##",
            selectOnFocus: true
        });

        $(".payAmountTxt").kendoTextBox({
            enable: false
        });

        $(".payAmountCurrency").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            dataSource: dataSource
        });

        $(".payAmountCurrency").parent().on("keypress", function (e) {

            if (e.which === 13) {

                let input = $(this).find('input.payAmountCurrency')[0];
                let id = input.id;
                let count = id.split("_");

                if ($(`#convert_container_${count[1]}`).hasClass("hidden")) {
                    let next = Number(count[1]) + 1;

                    let dis = $(`#DetailDiscount_${next}`).data("kendoNumericTextBox");
                    if (dis) {
                        dis.focus();

                    } else {

                        $("#btn-AddPayInvoiceModal-accept").focus();
                    }

                } else {

                    $(`#BaseAmount_${count[1]}`).data("kendoNumericTextBox").focus();
                }
            }
        });

        $(".payAmountCurrency").each(function () {
            $(this).trigger("change");
        });

        $('#AddPayInvoiceModal .PayLine').each(function () {
            let line = $(this).attr("data-line");
            if (line) {

                $(`#DestAmount_${line}`).data("kendoNumericTextBox").focus();

                $('#PayDateTxt').focus();
            }
        });
    }

    function DetailDiscountKeyPress(e) {

        if (event.keyCode === 13) {
            let id = $(e).attr("id");
            let count = id.split("_");

            $(`#Discount_${count[1]}`).data("kendoNumericTextBox").focus();
        }
    }

    function DiscountKeyPress(e) {

        if (event.keyCode === 13) {
            let id = $(e).attr("id");
            let count = id.split("_");

            let drop = $(`#Currency_${count[1]}`).data("kendoDropDownList");
            drop.focus();
            drop.open();
        }
    }

    function BaseAmountKeyPress(e) {

        if (event.keyCode === 13) {
            let id = $(e).attr("id");
            let count = id.split("_");

            $(`#DestAmount_${count[1]}`).data("kendoNumericTextBox").focus();
        }
    }

    function DestAmountKeyPress(e) {

        if (event.keyCode === 13) {
            let id = $(e).attr("id");
            let count = id.split("_");
            let next = Number(count[1]) + 1;

            let dis = $(`#DetailDiscount_${next}`).data("kendoNumericTextBox");
            if (dis) {
                dis.focus();

            } else {

                $("#btn-AddPayInvoiceModal-accept").focus();
            }
        }
    }

    function CurrencyChange(e) {

        let id = $(e).attr("id");
        let count = id.split("_");

        var currency = $(`#${id}`).data("kendoDropDownList");
        var currency_txt = currency.text();
        var baseCurrency_txt = $(`#BaseCurrency_${count[1]}`).text();

        var BaseAmount = $(`#BaseAmount_${count[1]}`).data("kendoNumericTextBox");
        if (BaseAmount.value() == '')
            BaseAmount.value(1);

        var DestAmount = $(`#DestAmount_${count[1]}`).data("kendoNumericTextBox");
        if (DestAmount.value() == '')
            DestAmount.value(1);

        if (baseCurrency_txt == currency_txt) {

            $(`#convert_container_${count[1]}`).addClass("hidden");
            $(`#lblChangeAmount_${count[1]}`).addClass("hidden");
            $(`#lblPayChangeAmount_${count[1]}`).addClass("hidden");
            $(`#lblDiscountChangeAmount_${count[1]}`).addClass("hidden");

            CalculateDiscount(count[1]);
        } else {

            $(`#convert_container_${count[1]}`).removeClass("hidden");
            $(`#lblPayChangeAmount_${count[1]}`).removeClass("hidden");
            $(`#lblDiscountChangeAmount_${count[1]}`).removeClass("hidden");
            $(`#lblChangeAmount_${count[1]}`).removeClass("hidden");
            $(`#lblChangeAmount_${count[1]}`).text($(`#Amount_${count[1]}`).val());
            $(`#lblDestAmount_${count[1]}`).text(currency_txt);

            $(".loader").removeClass("hidden");
            $.ajax({
                type: "Get",
                url: "/MoneyConvert/GetMoneyConvertBaseCurrencyName",
                data: {
                    baseCurrencyName: baseCurrency_txt,
                    destCurrencyName: currency_txt
                },
                success: function (response) {

                    if (response == null || response === 0) {

                        $(`#BaseAmount_${count[1]}`).data("kendoNumericTextBox").value(1);
                        $(`#DestAmount_${count[1]}`).data("kendoNumericTextBox").value(1);

                    } else {
                        let base_currency = response.BaseCurrencyName;
                        let dest_currency = response.DestCurrencyName;

                        if (base_currency == baseCurrency_txt) {

                            $(`#BaseAmount_${count[1]}`).data("kendoNumericTextBox").value(response.BaseAmount);
                            $(`#DestAmount_${count[1]}`).data("kendoNumericTextBox").value(response.DestAmount);

                        } else {

                            $(`#DestAmount_${count[1]}`).data("kendoNumericTextBox").value(response.BaseAmount);
                            $(`#BaseAmount_${count[1]}`).data("kendoNumericTextBox").value(response.DestAmount);

                        }

                    }

                    SetChangeAmount(count[1]);
                    CalculateDiscount(count[1]);

                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                }
            });


        }

    }

    function DetailDiscountFocusOut(e) {

        let id = $(e).attr("id");
        let count = id.split("_");

        CalculateDetailDiscount(count[1]);
    }

    function CalculateDetailDiscount(line) {

        var currency = $(`#Currency_${line}`).data("kendoDropDownList");
        var currency_txt = currency.text();
        //var baseCurrency_txt = $(`#BaseCurrency_${line}`).text();

        let amount_txt = $(`#Amount_${line}`).val();
        let txt_res = Number(GetFirstNumber(amount_txt));
        let amount = Math.abs(txt_res);

        let dis_val = $(`#DetailDiscount_${line}`).data("kendoNumericTextBox").value();

        let dis = (dis_val * amount) / 100;
        $(`#Discount_${line}`).data("kendoNumericTextBox").value(dis);


        let txt_dis = amount - dis;
        if (txt_res < 0)
            txt_dis = -txt_dis;

        $(`#Pay_${line}`).val(parseFloat(txt_dis).toLocaleString('en'));


        let baseAmount_txt = $(`#AddPayInvoiceModal #BaseAmount_${line}`).val();
        let baseAmount = Number(GetFirstNumber(baseAmount_txt));

        let destAmount_tx = $(`#AddPayInvoiceModal #DestAmount_${line}`).val();
        let destAmount = Number(GetFirstNumber(destAmount_tx));

        let res = amount * destAmount / baseAmount;

        let lbl_dis = (dis_val * res) / 100;
        $(`#lblDiscountChangeAmount_${line}`).text(`${currency_txt} ${parseFloat(lbl_dis).toLocaleString('en')}`);

        let total = res - lbl_dis;
        if (txt_res < 0)
            total = -total;
        $(`#lblPayChangeAmount_${line}`).text(`${currency_txt} ${parseFloat(total).toLocaleString('en')}`);

        CalculateTotalPayAfterDiscount();
    }

    function DiscountFocusOut(e) {

        let id = $(e).attr("id");
        let count = id.split("_");

        CalculateDiscount(count[1]);
    }

    function CalculateDiscount(line) {

        var currency = $(`#Currency_${line}`).data("kendoDropDownList");
        var currency_txt = currency.text();
        //var baseCurrency_txt = $(`#BaseCurrency_${line}`).text();

        let amount_txt = $(`#Amount_${line}`).val();
        let txt_res = Number(GetFirstNumber(amount_txt));
        let amount = Math.abs(txt_res);

        let dis_val = $(`#Discount_${line}`).data("kendoNumericTextBox").value();

        let dis = (100 * dis_val) / amount;
        $(`#DetailDiscount_${line}`).data("kendoNumericTextBox").value(dis);


        let txt_dis = amount - dis_val;
        if (txt_res < 0)
            txt_dis = -txt_dis;

        $(`#Pay_${line}`).val(parseFloat(txt_dis).toLocaleString('en'));


        let baseAmount_txt = $(`#AddPayInvoiceModal #BaseAmount_${line}`).val();
        let baseAmount = Number(GetFirstNumber(baseAmount_txt));

        let destAmount_tx = $(`#AddPayInvoiceModal #DestAmount_${line}`).val();
        let destAmount = Number(GetFirstNumber(destAmount_tx));

        let res = amount * destAmount / baseAmount;

        let lbl_dis = (dis * res) / 100;
        $(`#lblDiscountChangeAmount_${line}`).text(`${currency_txt} ${parseFloat(lbl_dis).toLocaleString('en')}`);

        let total = res - lbl_dis;
        if (txt_res < 0)
            total = -total;
        $(`#lblPayChangeAmount_${line}`).text(`${currency_txt} ${parseFloat(total).toLocaleString('en')}`);


        CalculateTotalPayAfterDiscount();
    }

    function ChangeAmountFocusOut(e) {

        let id = $(e).attr("id");
        let count = id.split("_");

        SetChangeAmount(count[1]);
    }

    function SetChangeAmount(cooount) {

        let amount_txt = $(`#Amount_${cooount}`).val();
        let amount = Number(GetFirstNumber(amount_txt));

        let base_txt = $(`#BaseAmount_${cooount}`).val();
        let base = Number(GetFirstNumber(base_txt));

        let dest_txt = $(`#DestAmount_${cooount}`).val();
        let dest = Number(GetFirstNumber(dest_txt));

        let sum = amount * dest / base;

        var currency = $(`#Currency_${cooount}`).data("kendoDropDownList");
        var currency_txt = currency.text();

        let result = `total ${currency_txt} : ${parseFloat(sum).toLocaleString('en')}`;
        $(`#lblChangeAmount_${cooount}`).text(result);

        CalculateDiscount(cooount);
    }

    function GetPayPurchaseInvoice(payId) {
        return $.ajax({
            type: "Get",
            url: "/PurchaseInvoice/GetPayPurchaseInvoice",
            data: { payId: payId },
        });
    }

    function GetPayReturnPurchaseInvoice(payId) {
        return $.ajax({
            type: "Get",
            url: "/ReturnPurchaseInvoice/GetPayReturnPurchaseInvoice",
            data: { payId: payId },
        });
    }


    function RefreshGrids() {
        var guid = $("#Guid").val();
        var supplierId = $("#SupplierIdFilter").val();

        $.ajax({
            type: "Get",
            url: "/PurchaseInvoice/GetNotPayPurchaseInvoice",
            data: { supplierId: supplierId },
            success: function (response) {

                $("#totalInvoiceKendoGrid").data("kendoGrid").setDataSource(response);
            }
        });

        $.ajax({
            type: "Get",
            url: "/ReturnPurchaseInvoice/GetNotPayReturnPurchaseInvoice",
            data: { supplierId: supplierId },
            success: function (response) {

                $("#totalReturnInvoiceKendoGrid").data("kendoGrid").setDataSource(response);
            }
        });

        $.when(GetPayPurchaseInvoice(guid), GetPayReturnPurchaseInvoice(guid)).done(function (purchase_pay, return_pay) {

            $("#payInvoiceKendoGrid").data("kendoGrid").setDataSource(purchase_pay[0]);

            $("#payReturnInvoiceKendoGrid").data("kendoGrid").setDataSource(return_pay[0]);

            CalculateTotal();
        });

    }


    $('#btn_select_pay').on("click", function () {
        $(this).attr("disabled", true);

        let totalInvoice_dataSource = $("#totalInvoiceKendoGrid").data("kendoGrid").dataSource.data();
        let payInvoice_dataSource = $("#payInvoiceKendoGrid").data("kendoGrid").dataSource.data();

        $(".select_totalInvoice").find(":checkbox:checked").each(function () {

            let description = $(this).parent().attr("data-desctiption");
            if (description == null || description == 'null')
                description = '';

            var elem = {
                ClinicSectionId: null,
                CreatedUserId: null,
                Description: description,
                Guid: $(this).parent().attr("data-id"),
                Id: 0,
                Index: 0,
                InvoiceDate: "",
                InvoiceDateTxt: $(this).parent().attr("data-date"),
                InvoiceNum: $(this).parent().attr("data-invoice"),
                MainInvoiceNum: $(this).parent().attr("data-mainInvoice"),
                ModifiedUserId: null,
                PurchaseInvoiceDetails: null,
                SupplierId: null,
                SupplierName: null,
                TotalPrice: $(this).parent().attr("data-price"),
                PayIds: $(this).parent().attr("data-payids")
            };

            payInvoice_dataSource.push(elem);

            totalInvoice_dataSource = RemoveFromListByGuid(totalInvoice_dataSource, $(this).parent().attr("data-id"));

        });

        $("#totalInvoiceKendoGrid").data("kendoGrid").setDataSource(totalInvoice_dataSource);
        $("#payInvoiceKendoGrid").data("kendoGrid").setDataSource(ResetIndexList(payInvoice_dataSource));


        CalculateTotal();

        $('#btn_select_pay').removeAttr("disabled");
    });

    $('#btn_notSelect_pay').on("click", function () {
        $(this).attr("disabled", true);

        let payInvoice_dataSource = $("#payInvoiceKendoGrid").data("kendoGrid").dataSource.data();
        let totalInvoice_dataSource = $("#totalInvoiceKendoGrid").data("kendoGrid").dataSource.data();

        $(".select_payInvoice").find(":checkbox:checked").each(function () {

            let description = $(this).parent().attr("data-desctiption");
            if (description == null || description == 'null')
                description = '';

            var elem = {
                ClinicSectionId: null,
                CreatedUserId: null,
                Description: description,
                Guid: $(this).parent().attr("data-id"),
                Id: 0,
                Index: 0,
                InvoiceDate: "",
                InvoiceDateTxt: $(this).parent().attr("data-date"),
                InvoiceNum: $(this).parent().attr("data-invoice"),
                MainInvoiceNum: $(this).parent().attr("data-mainInvoice"),
                ModifiedUserId: null,
                PurchaseInvoiceDetails: null,
                SupplierId: null,
                SupplierName: null,
                TotalPrice: $(this).parent().attr("data-price"),
                PayIds: $(this).parent().attr("data-payids")
            };

            totalInvoice_dataSource.push(elem);

            payInvoice_dataSource = RemoveFromListByGuid(payInvoice_dataSource, $(this).parent().attr("data-id"));

        });

        $("#payInvoiceKendoGrid").data("kendoGrid").setDataSource(payInvoice_dataSource);
        $("#totalInvoiceKendoGrid").data("kendoGrid").setDataSource(ResetIndexList(totalInvoice_dataSource));


        CalculateTotal();

        $('#btn_notSelect_pay').removeAttr("disabled");
    });

    $('#btn_select_return').on("click", function () {

        $(this).attr("disabled", true);

        let totalReturn_dataSource = $("#totalReturnInvoiceKendoGrid").data("kendoGrid").dataSource.data();
        let payReturn_dataSource = $("#payReturnInvoiceKendoGrid").data("kendoGrid").dataSource.data();

        $(".select_return_totalInvoice").find(":checkbox:checked").each(function () {

            let description = $(this).parent().attr("data-desctiption");
            if (description == null || description == 'null')
                description = '';

            var elem = {
                Index: 0,
                Guid: $(this).parent().attr("data-id"),
                Id: 0,
                InvoiceNum: $(this).parent().attr("data-invoice"),
                InvoiceDate: "",
                InvoiceDateTxt: $(this).parent().attr("data-date"),
                SupplierId: null,
                SupplierName: null,
                Description: description,
                CreatedUserId: null,
                ModifiedUserId: null,
                ClinicSectionId: null,
                TotalPrice: $(this).parent().attr("data-price"),
                PayIds: $(this).parent().attr("data-payids")
            };

            payReturn_dataSource.push(elem);

            totalReturn_dataSource = RemoveFromListByGuid(totalReturn_dataSource, $(this).parent().attr("data-id"));

        });

        $("#totalReturnInvoiceKendoGrid").data("kendoGrid").setDataSource(totalReturn_dataSource);
        $("#payReturnInvoiceKendoGrid").data("kendoGrid").setDataSource(ResetIndexList(payReturn_dataSource));


        CalculateTotal();

        $('#btn_select_return').removeAttr("disabled");
    });

    $('#btn_notSelect_return').on("click", function () {
        $(this).attr("disabled", true);

        let payReturn_dataSource = $("#payReturnInvoiceKendoGrid").data("kendoGrid").dataSource.data();
        let totalReturn_dataSource = $("#totalReturnInvoiceKendoGrid").data("kendoGrid").dataSource.data();

        $(".select_return_payInvoice").find(":checkbox:checked").each(function () {

            let description = $(this).parent().attr("data-desctiption");
            if (description == null || description == 'null')
                description = '';

            var elem = {
                Index: 0,
                Guid: $(this).parent().attr("data-id"),
                Id: 0,
                InvoiceNum: $(this).parent().attr("data-invoice"),
                InvoiceDate: "",
                InvoiceDateTxt: $(this).parent().attr("data-date"),
                SupplierId: null,
                SupplierName: null,
                Description: description,
                CreatedUserId: null,
                ModifiedUserId: null,
                ClinicSectionId: null,
                TotalPrice: $(this).parent().attr("data-price"),
                PayIds: $(this).parent().attr("data-payids")
            };

            totalReturn_dataSource.push(elem);

            payReturn_dataSource = RemoveFromListByGuid(payReturn_dataSource, $(this).parent().attr("data-id"));

        });

        $("#payReturnInvoiceKendoGrid").data("kendoGrid").setDataSource(payReturn_dataSource);
        $("#totalReturnInvoiceKendoGrid").data("kendoGrid").setDataSource(ResetIndexList(totalReturn_dataSource));


        CalculateTotal();

        $('#btn_notSelect_return').removeAttr("disabled");
    });

    function GetCurrencyIdByName(currency) {
        let currency_id = '';
        currency_dataSource.filter(function (item) {

            if (item.Name == currency) {
                currency_id = item.Id;
            }

            return false;
        });
        return currency_id;
    }

    function CalculateTotalPayAfterDiscount() {
        $("#AddPayInvoiceModal #DiscountIsGreaterThanTheAmount").addClass("hidden");
        $('#total_amount_container').empty();

        let last = '';
        $('#AddPayInvoiceModal .PayLine').each(function () {

            let line = $(this).attr("data-line");
            if (line) {
                var currency = $(`#Currency_${line}`).data("kendoDropDownList");
                var currency_txt = currency.text();
                var baseCurrency_txt = $(`#BaseCurrency_${line}`).text();

                let amount_txt = $(`#Amount_${line}`).val();
                let amount = Number(GetFirstNumber(amount_txt));
                let poss_amount = Math.abs(amount);

                let discount_txt = $(`#AddPayInvoiceModal #Discount_${line}`).val();
                let discount = Number(GetFirstNumber(discount_txt));

                let baseAmount_txt = $(`#AddPayInvoiceModal #BaseAmount_${line}`).val();
                let baseAmount = Number(GetFirstNumber(baseAmount_txt));

                let destAmount_tx = $(`#AddPayInvoiceModal #DestAmount_${line}`).val();
                let destAmount = Number(GetFirstNumber(destAmount_tx));

                if (baseCurrency_txt == currency_txt) {
                    baseAmount = destAmount = 1;
                }

                if (discount > poss_amount)
                    $("#AddPayInvoiceModal #DiscountIsGreaterThanTheAmount").removeClass("hidden");

                if (amount < 0) {
                    amount = -poss_amount;
                    discount = -discount;
                }

                let total = (amount - discount) * destAmount / baseAmount;
                if (last.includes(currency_txt)) {
                    let res = last.split("_");
                    let new_last = '';
                    for (let i = 0; i < res.length; i++) {

                        if (res[i].includes(currency_txt)) {
                            let money = res[i].split(" ");

                            let last_sum = Number(GetFirstNumber(money[1]));


                            last_sum += total;
                            new_last += `${currency_txt} ${last_sum}_`;
                        } else {
                            if (res[i] != '')
                                new_last += `${res[i]}_`;
                        }
                    }

                    last = new_last;

                } else {
                    last += `${currency_txt} ${total}_`;
                }

            }
        });

        let elements = '';
        let totals = last.split("_");
        for (let row = 0; row < totals.length; row++) {
            if (totals[row] != '') {
                let money = totals[row].split(" ");

                let result = Number(GetFirstNumber(money[1]));

                let result_txt = `@Localizer["TotalAfterDiscount"] : ${money[0]} ${parseFloat(result).toLocaleString('en')}`;
                elements += `
                        <div class="col-sm-12 "  style="padding:0px;">

                            <div class="col-sm-2">
                            </div>

                            <div class="col-sm-3" style="padding:0px;">
                            </div>

                            <div class="col-sm-4">
                                <label class="block clearfix">
                                    <label >${result_txt}</label>
                                </label>
                            </div>

                            <div class="col-sm-3 " style="padding:0px;">

                            </div>

                        </div>`
            }
        }

        var div = document.getElementById("total_amount_container");
        div.insertAdjacentHTML('afterbegin', elements);
    }

</script>
