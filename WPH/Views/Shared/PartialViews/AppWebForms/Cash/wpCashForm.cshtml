@model WPH.Models.CustomDataModels.BaseInfo.BaseInfosAndPeriodsViewModel

@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject WPH.Resources.SharedViewLocalizer Localizer


@{
    string doctor_title = Localizer["DoctorWage"];
    string service_title = Localizer["Services"];
    string pay_all_title = Localizer["PayAllServices"];

    string font = "", pull = "", direction = "", flex = "", flex_rev = "";
    if (HttpContextAccessor.HttpContext.Session.GetString("culture") == "en")
    {
        font = " MyFont-Roboto-grid ";
        pull = " pull-left ";
        direction = " ";
        flex = " flex-direction: row; ";
        flex_rev = " flex-direction: row-reverse; ";
    }
    else
    {
        font = " MyFont-Sarchia-grid ";
        pull = " pull-right ";
        direction = " direction:rtl; ";
        flex = " flex-direction: row-reverse; ";
        flex_rev = " ";
    }

}



<script>

    function GetPaymentAndPeriodForReception() {

        var periodId = $('#period-id').attr('data-Value');

        var fromDate = $("#KendoFromDate").data("kendoDatePicker");
        var toDate = $("#KendoDateTo").data("kendoDatePicker");

        var frDate = fromDate.value();
        var tDate = toDate.value();
        let frMonth = frDate.getMonth() + 1;
        let frDay = frDate.getDate();
        let toMonth = tDate.getMonth() + 1;
        let toDay = tDate.getDate();

        if (frMonth < 10)
            frMonth = "0" + frMonth;
        if (toMonth < 10)
            toMonth = "0" + toMonth;
        if (frDay < 10)
            frDay = "0" + frDay;
        if (toDay < 10)
            toDay = "0" + toDay;

        let from = frDate.getFullYear() + "-" + frMonth + "-" + frDay;
        let too = tDate.getFullYear() + "-" + toMonth + "-" + toDay;

        var period = $("#sections").data("kendoDropDownList");
        var payment = $("#payments").data("kendoDropDownList");

        var periodValue = period.value();
        var periodText = period.text();

        let section = { Id: periodValue, Name: periodText }

        return {

            periodId: periodId,
            dateFrom: from,
            dateTo: too,
            section: section,
            paymentStatus: payment.value()
        };
    }
</script>

<div>
    <div style="display:flex;@flex_rev " class="col-sm-12">

        <div class="col-sm-6">
            <div id="PayServiecContainer">

                @await Html.PartialAsync("~/Views/Shared/PartialViews/AppWebForms/ReceptionService/wpReceptionService.cshtml", Guid.Empty)
            </div>
        </div>

        <div class="col-sm-7">
            <div class="row page-header ">

                <div class="@pull">
                    <h1 class="@font" style="font-size: 2.3rem">
                        @Localizer["Cash"]
                    </h1>

                </div>

                <div class="@font @pull" style="margin:0 2rem;transform:translateY(-10%)">
                    <a class="btn btn-danger" onClick="PrintAllSurgeries()" href="#" style="padding:0.2rem">
                        @Localizer["Print"]
                        <i class="ace-icon align-top bigger-125"></i>
                    </a>
                </div>

            </div><!-- /.page-header -->

            <input class="hidden" type="text" id="period-id" data-Value="@Model.periods.FirstOrDefault().Id" />
            <h1 id="FromTo" class="hidden">@ViewBag.FromToId</h1>

            <div class="space-10"></div>
            <div class="row @font">


                <div class="col-xs-12" style="padding:0;margin-bottom:1rem;display:flex;justify-content: space-between;@flex ">

                    <div class="col-xs-4" style="padding-left:unset;padding-right:unset;">
                        @(Html.Kendo().DropDownList()
                        .Name("sections")
                        .BindTo(Model.sections)
                        .DataTextField("Name")
                        .DataValueField("Id")
                        .Filter("contains")
                        .HtmlAttributes(new { style = "width: 100%;font-size:1.5rem", onchange = "SectionChange()" })
                        )
                    </div>

                    <div class="col-xs-4" style="padding-left:unset;padding-right:unset;">
                        @(Html.Kendo().DropDownList()
                        .Name("payments")
                        .BindTo(Model.payments)
                        .DataTextField("Name")
                        .DataValueField("Id")
                        .Filter("contains")
                        .HtmlAttributes(new { style = "width: 100%;font-size:1.5rem", onchange = "SectionChange()" })
                        )
                    </div>

                </div>

                <div class="col-xs-4" style="padding-left:unset;padding-right:unset;">
                    @(Html.Kendo().DropDownList()
                    .Name("periods")
                    .BindTo(Model.periods)
                    .DataTextField("Name")
                    .DataValueField("Id")
                    .Filter("contains")
                    .HtmlAttributes(new { style = "width: 100%;font-size:1.5rem", onchange = "PeriodsChange()" })
                    )
                </div>

                <div class="col-xs-12" style="margin-top:5px;">
                    <div id="DateFromDiv" class="col-xs-12 col-sm-5 hidden">
                        <div class="col-xs-4 " style="text-align:left">
                            <h5 class="MyFont-Roboto-grid">@Localizer["FromDate"]</h5>
                        </div>
                        <div class="col-xs-8">
                            @(Html.Kendo().DatePicker()
                            .Name("KendoFromDate")
                            .Value(DateTime.Now)
                            .Format("dd/MM/yyyy")
                            .HtmlAttributes(new { style = "width: 100%;font-size:1.5rem", onchange = "dateTimePickerWorkWithSpace(this)" })
                            )

                        </div>
                    </div>

                    <div id="DateToDiv" class="col-xs-12 col-sm-5 hidden">

                        <div class="col-xs-4" style="text-align:left">

                            <h5 class="MyFont-Roboto-grid">@Localizer["ToDate"]</h5>

                        </div>

                        <div class="col-xs-8">

                            @(Html.Kendo().DatePicker()
                        .Name("KendoDateTo")
                        .Value(DateTime.Now)
                        .Format("dd/MM/yyyy")
                        .HtmlAttributes(new { style = "width: 100%;font-size:1.5rem", onchange = "dateTimePickerWorkWithSpace(this)" })
                        )
                        </div>

                    </div>

                    <div id="SearchBtnDiv" class="col-xs-1 hidden">

                        @(Html.Kendo().Button()
                    .Name("btn-search-visit")
                    .HtmlAttributes(new { style = "font-size:1.5rem;padding:0.7rem", type = "button", @class = "k-primary pull-right", onclick = "btnSearchClick()" })
                    .Content("<i class='fa fa-search'></i>"))

                    </div>

                </div>
            </div>


            <script>

                let total = [];

                function CashRequestEnd(e) {
                    total = [];
                    $("#totalcash").empty();

                    for (let i = 0; i < e.response.Data.length; i++) {

                        let ex = total.find(a => a.status == e.response.Data[i].ReceptionStatus);

                        if (ex != undefined) {


                            if (e.response.Data[i].Rem == 0)
                                ex.amount += e.response.Data[i].TotalRecivedAmount;
                            else
                                ex.amount += e.response.Data[i].Rem;

                        }
                        else {

                            if (e.response.Data[i].Rem == 0)
                                total.push({ status: e.response.Data[i].ReceptionStatus, amount: e.response.Data[i].TotalRecivedAmount });
                            else
                                total.push({ status: e.response.Data[i].ReceptionStatus, amount: e.response.Data[i].Rem });

                            
                        }

                    }


                    for (let i = 0; i < total.length; i++) {

                        $("#totalcash").append("<h4>" + total[i].status + " : " + total[i].amount + "</h4>")

                    }


                    
                }




            </script>


            <div>
                @(Html.Kendo().Grid<WPH.Models.CustomDataModels.PatientReception.PatientReceptionViewModel>()
            .Name("kendoPatientReceptionGrid")
            .HtmlAttributes(new { ID = "idGridSymptomList", Class = "k-grid-header" })
            .Columns(columns =>
            {

                if (HttpContextAccessor.HttpContext.Session.GetString("culture") != "en")
                {

                    columns.Bound("").Title(" ").Width(30)
                    .ClientTemplate(
                        $@"<a class='tooltip-success grid-btn ' onClick='ShowServices(this);' data-id='#=Guid#' data-rel='tooltip' title='{service_title}' data-original-title='Services'>
                            <span class='purple'>
                                <i class='ace-icon fa fa-chevron-circle-left bigger-120'></i>
                            </span>
                        </a>
                    ");

                    if ((bool)ViewBag.AccessNewCash)
                    {
                        columns.Bound("").Title(" ").Width(30)
                        .ClientTemplate(
                            $@"<a class='tooltip-success grid-btn ' onClick='PayAllServices(this);' data-id='#=Guid#' data-rem='#=Rem#' data-totalServiceAmount='#=TotalServiceAmount#' data-patient='#=Patient.User.Name#' data-rel='tooltip' title='{pay_all_title}' data-original-title='PayAll'>
                                <span class='green'>
                                    <i class='ace-icon fa fa-credit-card-alt bigger-120'></i>
                                </span>
                            </a>
                        ");

                    }

                    if (HttpContextAccessor.HttpContext.Session.GetString("SectionTypeName") == "Hospital")
                    {
                        columns.Bound(x => x.PurposeName).Filterable(false).Title(" ").Width(30).ClientTemplate("#= DoctorWageItems_Databound(PurposeName,Guid)#");
                        columns.Bound(x => x.Insurance).Format("{0:n0}").Filterable(false).Title(Localizer["Insurance"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });

                    }

                    columns.Bound(x => x.Rem).Format("{0:n0}").Filterable(false).Title(Localizer["Remained"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                    columns.Bound(x => x.TotalServiceAmount).Format("{0:n0}").Filterable(false).Title(Localizer["TotalService"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                    columns.Bound(x => x.ReceptionStatus).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Status"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).ClientTemplate("#= LineItems_Databound(ReceptionStatus)#");
                    //columns.Bound(x => x.Patient.User.PhoneNumber).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Mobile"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                    //columns.Bound(x => x.Patient.UserGenderName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Gender"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                    columns.Bound(x => x.NameMobile).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Patient"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                    columns.Bound(x => x.Invoice).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["InvoiceNum"]).HtmlAttributes(new { @style = "text-align:center;"}).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                    //columns.Bound(x => x.InvoiceDate).Filterable(false).Format("{0: dd/MM/yyyy}").Title(Localizer["InvoiceDate"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                    columns.Bound(x => x.Index).Filterable(false).Width(5).Title("#").HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).Width(30);
                    columns.Bound(x => x.Guid).Hidden();
                    columns.Bound(x => x.Id).Hidden();
                }
                else
                {
                    columns.Bound(x => x.Guid).Hidden();
                    columns.Bound(x => x.Id).Hidden();
                    columns.Bound(x => x.Index).Filterable(false).Title("#").HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).Width(30);
                    //columns.Bound(x => x.InvoiceDate).Filterable(false).Format("{0: dd/MM/yyyy}").Title(Localizer["InvoiceDate"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                    columns.Bound(x => x.Invoice).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["InvoiceNum"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                    columns.Bound(x => x.NameMobile).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Patient"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                    //columns.Bound(x => x.Patient.UserGenderName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Gender"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                    //columns.Bound(x => x.Patient.User.PhoneNumber).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Mobile"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                    columns.Bound(x => x.ReceptionStatus).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Title(Localizer["Status"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).ClientTemplate("#= LineItems_Databound(ReceptionStatus)#");
                    columns.Bound(x => x.TotalServiceAmount).Format("{0:n0}").Filterable(false).Title(Localizer["TotalService"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                    columns.Bound(x => x.Rem).Format("{0:n0}").Filterable(false).Title(Localizer["Remained"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });

                    if (HttpContextAccessor.HttpContext.Session.GetString("SectionTypeName") == "Hospital")
                    {
                        columns.Bound(x => x.Insurance).Format("{0:n0}").Filterable(false).Title(Localizer["Insurance"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
                        columns.Bound(x => x.PurposeName).Filterable(false).Title(" ").Width(30).ClientTemplate("#= DoctorWageItems_Databound(PurposeName,Guid)#");
                    }

                    if ((bool)ViewBag.AccessNewCash)
                    {
                        columns.Bound("").Title(" ").Width(30)
                        .ClientTemplate(
                            $@"<a class='tooltip-success grid-btn ' onClick='PayAllServices(this);' data-id='#=Guid#' data-rem='#=Rem#' data-totalServiceAmount='#=TotalServiceAmount#' data-patient='#=Patient.User.Name#' data-rel='tooltip' title='{pay_all_title}' data-original-title='PayAll'>
                                <span class='green'>
                                  <i class='ace-icon fa fa-credit-card-alt bigger-120'></i>
                                </span>
                            </a>
                        ");

                    }

                    columns.Bound("").Title(" ").Width(30)
                    .ClientTemplate(
                        $@"<a class='tooltip-success grid-btn ' onClick='ShowServices(this);' data-id='#=Guid#' data-rel='tooltip' title='{service_title}' data-original-title='Services'>
                            <span class='purple'>
                                <i class='ace-icon fa fa-chevron-circle-right bigger-120'></i>
                            </span>
                        </a>
                    ");
                }

            })

            .DataSource(dataSource => dataSource
            .Ajax()
            .Model(model =>
            {
                model.Id(p => p.Guid);
            })
            //.Sort(sort => sort.Add("InvoiceDate").Descending())
            .PageSize(10)
            .Read(read => read.Action("GetAllForCash", "PatientReception").Data("GetPaymentAndPeriodForReception"))
            .Events(a=>a.RequestEnd("CashRequestEnd"))
            )
            .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
            .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
            .Pageable(pageable => pageable
            .Input(true)
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(2)
            .Numeric(true)) // Enable paging
            .Sortable().HtmlAttributes(new { @style = "direction: ltr;margin-top:2rem;overflow:auto" }) // Enable sorting

            )
            </div>

            <div col-sm-12>

                <div id="totalcash">


                </div>

            </div>

        </div>
    </div>

</div>

<div id="PayAllModal" class="modal fade @font" data-backdrop="static" data-keyboard="false" style="@direction">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" onclick="closePayAllServices()" aria-hidden="true">&times;</button>
                <h3 id="PayAllModal-header" class="smaller lighter blue no-margin @font">
                    @Localizer["PatientAccountant"] - <span id="patient-name-pay-service"></span>
                </h3>
            </div>
            <div id="PayAllModal-body" style="width:60vw" class="modal-body @font">


            </div>
            <div id="ERROR_Data" class="red label-white middle hidden" style="height:40px;display:block">
                <i class="ace-icon fa fa-stop bigger-120"></i>
                @Localizer["ERROR_DataNotValid"]
            </div>
            <div id="ERROR_SomeThingWentWrong" class="red label-white middle hidden" style="height:40px;display:block">
                <i class="ace-icon fa fa-stop bigger-120"></i>
                @Localizer["ERROR_InsertWrong"]
            </div>

            <div class="modal-footer">

                @(Html.Kendo().Button()
                .Name("btn-PayAll-accept")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "k-primary pull-right", onclick = "payAllAccept(false)" })
                .Content(Localizer["Ok"]))
                @(Html.Kendo().Button()
                .Name("btn-PayAll-close")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right", onclick = "closePayAllServices()" })
                .Content(Localizer["Exit"]))
            </div>
        </div> @*.modal-content*@
    </div> @*.modal-dialog*@
</div>

@await Html.PartialAsync("~/Views/Shared/PartialViews/InterfacePartials/_GridAndModalLinks.cshtml")
@await Html.PartialAsync("~/Views/Shared/PartialViews/InterfacePartials/_Modal.cshtml")



<div id="DoctorWageModal" class="modal fade @font" data-backdrop="static" data-keyboard="false" style="@direction">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" onclick="closeDoctorWageModal()" aria-hidden="true">&times;</button>
                <h3 id="DoctorWageModal-header" class="smaller lighter blue no-margin @font">
                    @Localizer["DoctorWage"]
                </h3>
            </div>
            <div id="DoctorWageModal-body" style="width:40vw" class="modal-body @font">


            </div>
            <div id="RepeatedValue" class="red label-white middle hidden" style="height:40px;display:block">
                <i class="ace-icon fa fa-stop bigger-120"></i>
                @Localizer["ERROR_RepeatedWage"]
            </div>
            <div id="SallaryDependency" class="red label-white middle hidden" style="height:40px;display:block">
                <i class="ace-icon fa fa-stop bigger-120"></i>
                @Localizer["ERROR_HumanResourceSallaryDependency"]
            </div>
            <div id="ERROR_Data" class="red label-white middle hidden" style="height:40px;display:block">
                <i class="ace-icon fa fa-stop bigger-120"></i>
                @Localizer["ERROR_DataNotValid"]
            </div>
            <div id="ERROR_SomeThingWentWrong" class="red label-white middle hidden" style="height:40px;display:block">
                <i class="ace-icon fa fa-stop bigger-120"></i>
                @Localizer["ERROR_InsertWrong"]
            </div>

            <div id="ERROR_Money" class="red label-white middle hidden" style="height:40px;display:block">
                <i class="ace-icon fa fa-stop bigger-120"></i>
                @Localizer["ERROR_Money"]
            </div>

            <div class="modal-footer">

                @(Html.Kendo().Button()
                .Name("btn-DoctorWage-accept")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "k-primary pull-right" })
                .Content(Localizer["Ok"]))
                @(Html.Kendo().Button()
                .Name("btn-DoctorWage-close")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right", onclick = "closeDoctorWageModal()" })
                .Content(Localizer["Exit"]))
            </div>
        </div> @*.modal-content*@
    </div> @*.modal-dialog*@
</div>


<div id="DeleteWageModal" class="modal fade bd-example-modal-lg @font" data-backdrop="static" data-keyboard="false" style="@direction">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="widget-header" style="padding:1rem">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h3 class='smaller @font'>
                    <i class='ace-icon fa fa-exclamation-triangle red '></i>@Localizer["DeleteRecordHeader"]
                </h3>
            </div>

            <div id="DeleteWageModal-body" class="modal-body">
                @Localizer["DeleteRecordBody"]
                <div id="ERROR_ThisRecordHasDependencyOnItInAnotherEntity" class="red label-white middle hidden" style="height:40px;margin-top:2rem">
                    <i class="ace-icon fa fa-stop bigger-120"></i>
                    @Localizer["ERROR_ThisRecordHasDependencyOnItInAnotherEntity"]
                </div>
                <div id="ERROR_SomeThingWentWrong" class="red label-white middle hidden" style="height:40px;">
                    <i class="ace-icon fa fa-stop bigger-120"></i>
                    @Localizer["ERROR_SomeThingWentWrong"]
                </div>
            </div>

            <div class="modal-footer">
                @Html.AntiForgeryToken()

                @(Html.Kendo().Button()
                .Name("btn-DeleteWageModal-accept")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "k-primary pull-right" })
                .Content(@Localizer["Ok"]))
                @(Html.Kendo().Button()
                .Name("btn-DeleteWageModal-close")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right", @data_dismiss = "modal" })
                .Content(@Localizer["Exit"]))

            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div>

<div id="UpdateWageModal" class="modal fade @font" data-backdrop="static" data-keyboard="false" style="@direction">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h3 id="UpdateWageModal-header" class="smaller lighter blue no-margin @font">
                    @Localizer["EditWage"]
                </h3>
            </div>
            <div id="UpdateWageModal-body" style="width:40vw" class="modal-body @font">

                <label class="block clearfix">
                    <label for="form-field-8">@Localizer["Name"]: </label>
                    <span class="block input-icon input-icon-right">
                        @(Html.Kendo().TextBox()
                                .Name("UpdateWageName")
                                .Enable(false)
                                .HtmlAttributes(new { style = "width: 100%"})
                            )
                    </span>
                </label>

                <label class="block clearfix">
                    <label for="form-field-8">@Localizer["Amount"]: </label>
                    <span class="block input-icon input-icon-right">

                        @(Html.Kendo().NumericTextBox<decimal>()
                                    .Name("UpdateWageAmount")
                                    .Min(0)
                                    .Max(10000000)
                                    .Format("N0")
                                    .HtmlAttributes(new { style = "width: 100%", @data_checkEmpty = "UpdateWageAmount-box" })
                                )
                    </span>
                    <span id="UpdateWageAmount-box" class="updateEmptybox hidden" data-isEssential="true" style="color:red;">
                        @Localizer["ThisFieldIsEmptyPleaseFillIt"]
                    </span>
                </label>

            </div>

            <div id="ERROR_Data" class="red label-white middle hidden" style="height:40px;display:block">
                <i class="ace-icon fa fa-stop bigger-120"></i>
                @Localizer["ERROR_DataNotValid"]
            </div>
            <div id="ERROR_SomeThingWentWrong" class="red label-white middle hidden" style="height:40px;display:block">
                <i class="ace-icon fa fa-stop bigger-120"></i>
                @Localizer["ERROR_InsertWrong"]
            </div>

            <div id="ERROR_Money" class="red label-white middle hidden" style="height:40px;display:block">
                <i class="ace-icon fa fa-stop bigger-120"></i>
                @Localizer["ERROR_Money"]
            </div>

            <div class="modal-footer">

                @(Html.Kendo().Button()
                .Name("btn-UpdateWage-accept")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "k-primary pull-right" })
                .Content(Localizer["Ok"]))
                @(Html.Kendo().Button()
                .Name("btn-UpdateWage-close")
                .HtmlAttributes(new { style = "font-size:15px;height:35px;margin:2px;", type = "button", @class = "pull-right", @data_dismiss = "modal" })
                .Content(Localizer["Exit"]))
            </div>
        </div> @*.modal-content*@
    </div> @*.modal-dialog*@
</div>

<style>
    .custom_selected_row {
        background-color: #295370 !important;
        color: white !important;
    }
</style>

<script>

    function DoctorWageItems_Databound(PurposeName, Guid) {
        if (PurposeName == 'Surgery') {
            return "<a class='tooltip-success grid-btn ' onClick='PayDoctorWage(this);' data-id='" + Guid + "' data-rel='tooltip' title='@doctor_title' data-original-title='DoctorWage'>" +
                "<span class='blue'>" +
                "<i class='ace-icon fa fa-user-md bigger-120'></i>" +
                "</span >" +
                " </a >";
        } else {
            return "";
        }
    }


    function EditTreatmentStaff(element) {
        $("#UpdateWageModal #ERROR_Money").addClass("hidden");
        $("#UpdateWageModal #ERROR_DataNotValid").addClass("hidden");
        $("#UpdateWageModal #ERROR_SomeThingWentWrong").addClass("hidden");

        $(".loader").removeClass("hidden");
        $('#UpdateWageModal').modal('toggle');

        var name = $(element).attr('data-HumanResourceName');
        var salary = $(element).attr('data-Salary');

        $("#UpdateWageName").val(name);
        $("#UpdateWageAmount").val(salary);

        var Id = $(element).attr('data-id');
        var Cadre = $(element).attr('data-cadre');
        $('#btn-UpdateWage-accept').attr('data-id', Id);
        $('#btn-UpdateWage-accept').attr('data-cadre', Cadre);

        $(".loader").fadeIn("slow");
        $(".loader").addClass("hidden");
        var numerictextbox2 = $("#UpdateWageAmount").data("kendoNumericTextBox");
        numerictextbox2.focus();
    }


    $('#btn-UpdateWage-accept').on("click", function () {
        $(this).attr("disabled", true);

        $("#UpdateWageModal #ERROR_Money").addClass("hidden");
        $("#UpdateWageModal #ERROR_DataNotValid").addClass("hidden");
        $("#UpdateWageModal #ERROR_SomeThingWentWrong").addClass("hidden");
        $("#UpdateWageModal .updateEmptybox").addClass("hidden");

        var isEmmpty = true;
        $("#UpdateWageModal .updateEmptybox").each(function () {
            if ($(this).attr('data-isEssential') === 'true') {
                var empty = $(this).attr('id');
                if ($('[data-checkEmpty="' + empty + '"]').val() === "") {
                    $(this).removeClass('hidden');
                    $('#btn-UpdateWage-accept').removeAttr("disabled");
                    isEmmpty = false;
                    return;
                }
            }
        });

        if (isEmmpty === false) {
            return;
        }

        var Id = $(this).attr('data-id');
        var Cadre = $(this).attr('data-cadre');

        link = "/HumanResource/UpdateTreatmentStaff";

        var token = $(':input:hidden[name*="RequestVerificationToken"]');

        $(".loader").removeClass("hidden");
        $.ajax({
            type: "Post",
            url: link,
            data: {
                __RequestVerificationToken: token.attr('value'),
                Guid: Id,
                Salary: $("#UpdateWageAmount").val()
            },
            success: function (response) {
                $('#btn-UpdateWage-accept').removeAttr("disabled");

                if (response === "DataNotValid") {
                    $("#UpdateWageModal #ERROR_DataNotValid").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                }
                else if (response === "SomeThingWentWrong") {
                    $("#UpdateWageModal #ERROR_SomeThingWentWrong").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");

                } else if (response === "ERROR_Money") {
                    $("#UpdateWageModal #ERROR_Money").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                } else {
                    $('#UpdateWageModal').modal('hide');
                    $(".modal-backdrop:last").remove();
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");

                    if (Cadre == "TreatmentStaff") {

                        $("#kendoTreatmentStaffGrid").find(".k-pager-refresh").click();

                    } else if (Cadre == "SentinelCadre") {

                        $("#kendoSentinelCadreGrid").find(".k-pager-refresh").click();

                    } else if (Cadre == "PrematureCadre") {

                        $("#kendoPrematureCadreGrid").find(".k-pager-refresh").click();

                    }
                }
            }
        });
    });



    function GridDeleteTreatmentStaff(element) {

        $("#DeleteWageModal #ERROR_ThisRecordHasDependencyOnItInAnotherEntity").addClass("hidden");
        $("#DeleteWageModal #ERROR_SomeThingWentWrong").addClass("hidden");

        $(".loader").removeClass("hidden");
        $('#DeleteWageModal').modal('toggle');
        var Id = $(element).attr('data-id');
        var Cadre = $(element).attr('data-cadre');
        $('#btn-DeleteWageModal-accept').attr('data-id', Id);
        $('#btn-DeleteWageModal-accept').attr('data-cadre', Cadre);
        $(".loader").fadeIn("slow");
        $(".loader").addClass("hidden");
    }


    $('#btn-DeleteWageModal-accept').on("click", function () {
        $(this).attr("disabled", true);

        $("#DeleteWageModal #ERROR_ThisRecordHasDependencyOnItInAnotherEntity").addClass("hidden");
        $("#DeleteWageModal#ERROR_SomeThingWentWrong").addClass("hidden");

        var Id = $(this).attr('data-id');
        var Cadre = $(this).attr('data-cadre');

        link = "/HumanResource/RemoveSalary?Id=" + Id;

        $(".loader").removeClass("hidden");
        $.ajax({
            type: "Get",
            url: link,
            @*data: {
                __RequestVerificationToken: token.attr('value'),
                Id: Id
            },*@
            success: function (response) {
                $('#btn-DeleteWageModal-accept').removeAttr("disabled");

                if (response === "SUCCESSFUL") {
                    $('#DeleteWageModal').modal('hide');
                    $(".modal-backdrop:last").remove();
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");

                    if (Cadre == "TreatmentStaff") {

                        $("#kendoTreatmentStaffGrid").find(".k-pager-refresh").click();

                    } else if (Cadre == "SentinelCadre") {

                        $("#kendoSentinelCadreGrid").find(".k-pager-refresh").click();

                    } else if (Cadre == "PrematureCadre") {

                        $("#kendoPrematureCadreGrid").find(".k-pager-refresh").click();

                    }

                }
                else if (response === "ERROR_ThisRecordHasDependencyOnItInAnotherEntity") {
                    $("#DeleteWageModal #ERROR_ThisRecordHasDependencyOnItInAnotherEntity").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                }
                else if (response === "ERROR_SomeThingWentWrong") {
                    $("#DeleteWageModal #ERROR_SomeThingWentWrong").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                }
                else {
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                }
            }
        });
    });


    function PayDoctorWage(element) {

        $('#DoctorWageModal #ERROR_SomeThingWentWrong').addClass('hidden');
        $('#DoctorWageModal #ERROR_Data').addClass('hidden');
        $('#DoctorWageModal #RepeatedValue').addClass('hidden');
        $('#DoctorWageModal #SallaryDependency').addClass('hidden');
        $('#DoctorWageModal #ERROR_Money').addClass('hidden');

        var Id = $(element).attr('data-id');

        var link = "/Cash/DoctorWageModal?receptionId=" + Id;
        $(".loader").removeClass("hidden");

        $('#DoctorWageModal').modal('toggle');
        $('#DoctorWageModal-body').load(link + '', function () {
            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        });
    }

    function closeDoctorWageModal() {

        $('#DoctorWageModal').modal('hide');
        $('#DoctorWageModal-body').empty();
        $(".modal-backdrop:last").remove();

    }

    $("#btn-DoctorWage-accept").on("click", function () {
        $(this).attr("disabled", true);

        $('#DoctorWageModal #ERROR_SomeThingWentWrong').addClass('hidden');
        $('#DoctorWageModal #ERROR_Data').addClass('hidden');
        $('#DoctorWageModal #RepeatedValue').addClass('hidden');
        $('#DoctorWageModal #ERROR_Money').addClass('hidden');
        $('#DoctorWageModal #SallaryDependency').addClass('hidden');
        $("#DoctorWageModal .emptybox").addClass("hidden");

        var isEmmpty = true;
        $("#DoctorWageModal .emptybox").each(function () {
            if ($(this).attr('data-isEssential') === 'true') {
                var empty = $(this).attr('id');
                if ($('[data-checkEmpty="' + empty + '"]').val() === "") {
                    $(this).removeClass('hidden');
                    $('#btn-DoctorWage-accept').removeAttr("disabled");
                    isEmmpty = false;
                    return;
                }
            }
        });

        if (isEmmpty === false) {
            return;
        }

        var link = "/ReceptionService/AddDoctorWage";

        var token = $(':input:hidden[name*="RequestVerificationToken"]');
        $(".loader").removeClass("hidden");
        $.ajax({
            type: "Post",
            url: link,
            data: {
                __RequestVerificationToken: token.attr('value'),
                ReceptionId: $("#DoctorWageModal  #ReceptionId").val(),
                Amount: $("#DoctorWageModal  #Amount").val(),
                AnesthesiologistAmount: $("#DoctorWageModal  #AnesthesiologistAmount").val(),
                PediatricianAmount: $("#DoctorWageModal  #PediatricianAmount").val(),
                ResidentAmount: $("#DoctorWageModal  #ResidentAmount").val(),
                ResidentGuid: $("#DoctorWageModal  #Resident").val(),
                HospitalWage: $("#DoctorWageModal  #HospitalWage").val(),
                ReceptionServiceId: $("#DoctorWageModal  #ReceptionServiceId").val(),

            },
            success: function (response) {
                $('#btn-DoctorWage-accept').removeAttr("disabled");

                if (response === "DataNotValid") {
                    $("#DoctorWageModal #ERROR_Data").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                } else if (response === "ERROR_Money") {

                    $("#DoctorWageModal #ERROR_Money").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");

                } else if (response === "ERROR_HumanResourceSallaryDependency") {

                    $("#DoctorWageModal #SallaryDependency").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");

                } else if (response === "SomeThingWentWrong") {
                    $("#DoctorWageModal #ERROR_SomeThingWentWrong").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");

                } else if (response === "RepeatedValue") {
                    $("#DoctorWageModal #RepeatedValue").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                } else {
                    $('#DoctorWageModal').modal('hide');
                    $(".modal-backdrop:last").remove();
                    $('#DoctorWageModal-body').empty();
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");

                    $("#kendoPatientReceptionGrid .k-pager-refresh")[0].click();
                    $("#serviceKendoGrid .k-pager-refresh")[0].click();
                }
            }
        });
    });



    function PayAllServices(element) {

        $('#PayAllModal #ERROR_SomeThingWentWrong').addClass('hidden');
        $('#PayAllModal #ERROR_Data').addClass('hidden');

        var Id = $(element).attr('data-id');

        var link = "/Cash/PayAllModal?receptionId=" + Id;
        $(".loader").removeClass("hidden");

        $('#PayAllModal').modal('toggle');
        $('#PayAllModal-body').load(link + '', function () {
            $('#totalServiceAmount').text($(element).attr('data-totalServiceAmount'));
            $('#totalServiceAmountInstallment').text($(element).attr('data-totalServiceAmount'));
            $('#patient-name-pay-service').text($(element).attr('data-patient'));
            $('#remained').text($(element).attr('data-rem'));
            $('#totalReceive').text($(element).attr('data-rem'));
            $('#totalAmount').text($(element).attr('data-rem'));
            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        });
    }

    function closePayAllServices() {

        $('#PayAllModal').modal('hide');
        $('#PayAllModal-body').empty();
        $(".modal-backdrop:last").remove();

    }



    function printInsurance() {

        let receptionId = $("#ReceptionId").val();
        link = "/ReceptionService/PrintReceptionInsurance?";
        $(".loader").removeClass("hidden");

        $.ajax({
            url: link,
            type: "Post",
            data: { ReceptionId: receptionId },
            success: function (response) {

                draw2(response);
                $(".loader").fadeIn("slow");
                $(".loader").addClass("hidden");
                $('#PayAllModal').modal('hide');
                $(".modal-backdrop:last").remove();
                $('#PayAllModal-body').empty();
                $("#ReceptionIdServiceGrid").val("");
                $("#kendoPatientReceptionGrid .k-pager-refresh")[0].click();
                $("#serviceKendoGrid .k-pager-refresh")[0].click();
            },
            error: function (response) {
                console.log(response);
                console.log(response.data);
                console.log(response.error);
            }
        });

    }


    function payAllAccept(print) {


        if ($("#accessUserPortion").text().toLowerCase() == "true") {
            closePayAllServices();
            return;
        }

        $('#PayAllModal #ERROR_SomeThingWentWrong').addClass('hidden');
        $('#PayAllModal #ERROR_Data').addClass('hidden');
        $("#PayAllModal .emptybox").addClass("hidden");

        var div = $("#pay-tabstrip").find("> div.k-state-active")[0];
        var id = div.getAttribute("id");
        $("#" + id + " .emptybox").addClass("hidden");

        var isEmmpty = true;
        $("#" + id + " .emptybox").each(function () {
            if ($(this).attr('data-isEssential') === 'true') {
                var empty = $(this).attr('id');
                if ($('[data-checkEmpty="' + empty + '"]').val() === "") {
                    $(this).removeClass('hidden');
                    isEmmpty = false;
                    return;
                }
            }
        });

        if (isEmmpty === false) {
            return;
        }


        var _link;
        var data;
        var token = $(':input:hidden[name*="RequestVerificationToken"]');

        if (id == 'pay-tabstrip-1') {
            _link = "/ReceptionServiceReceived/PayAllServices";
            data = {
                __RequestVerificationToken: token.attr('value'),
                ReceptionId: $("#PayAllModal  #ReceptionId").val(),
                ReceptionInvoiceNum: $("#PayAllModal  #ReceptionInvoiceNum").val(),
                PayerName: $("#PayAllModal  #PayerName").val(),
                Insurance: $("#PayAllModal  #Insurance").val()
            }

        } else if (id == 'pay-tabstrip-2') {
            _link = "/ReceptionServiceReceived/ReturnInsurance";
            data = {
                __RequestVerificationToken: token.attr('value'),
                ReceptionId: $("#PayAllModal  #ReceptionId").val(),
                PayerName: $("#PayAllModal  #ReciverName").val(),
                Amount: $("#ReturnedAmount").val(),

            }

        }

        $(".loader").removeClass("hidden");
        $.ajax({
            type: "Post",
            url: _link,
            data: data,
            success: function (response) {
                if (response === "DataNotValid") {
                    $("#PayAllModal #ERROR_Data").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                }
                else if (response === "SomeThingWentWrong") {
                    $("#PayAllModal #ERROR_SomeThingWentWrong").removeClass("hidden");
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                } else {


                    if (print) {
                        printInsurance();
                    }
                    $('#PayAllModal').modal('hide');
                    $(".modal-backdrop:last").remove();
                    $('#PayAllModal-body').empty();
                    $(".loader").fadeIn("slow");
                    $(".loader").addClass("hidden");
                    $("#ReceptionIdServiceGrid").val("");
                    $("#kendoPatientReceptionGrid .k-pager-refresh")[0].click();
                    $("#serviceKendoGrid .k-pager-refresh")[0].click();

                }
            }
        });

    }

    function LineItems_Databound(status) {
        if (status == 'Paid') {
            return "<div style='background:lightgreen;border-radius: 5px;'>" + status + " </div>";
        } else {
            return "<div style='background:pink;border-radius: 5px;'>" + status + " </div>";
        }
    }



    function ShowServices(element) {
        $("#kendoPatientReceptionGrid .custom_selected_row").removeClass("custom_selected_row");
        var tr = $(element).closest('tr');
        tr.addClass('custom_selected_row');

        var guid = element.getAttribute("data-id");

        $.ajax({
            type: "Get",
            url: "/ReceptionService/Form?receptionId=" + guid,
            success: function (res) {
                $('#PayServiecContainer').html(res);
            }
        });
    }

    function PeriodsChange() {

        var period = $("#periods").data("kendoDropDownList");

        var periodValue = period.value();


        $('#period-id').attr('data-Value', periodValue);

        var fromTo = $("#FromTo").text();

        if (periodValue === fromTo) {
            $("#DateFromDiv").removeClass("hidden");
            $("#DateToDiv").removeClass("hidden");
            $("#SearchBtnDiv").removeClass("hidden");
            let date = $("#KendoFromDate").data("kendoDatePicker");
            date.element.focus();
            date.element.select();
        }

        else {
            $("#DateFromDiv").addClass("hidden");
            $("#DateToDiv").addClass("hidden");
            $("#SearchBtnDiv").addClass("hidden");
            $("#kendoPatientReceptionGrid").find(".k-i-reload").click();
        }

    }

    function SectionChange() {

        //$("#kendoPatientReceptionGrid").find(".k-i-reload").click();

        var grid = $("#kendoPatientReceptionGrid").data("kendoGrid");
        grid.dataSource.page(1);

    }

    function btnSearchClick() {
        var period = $("#periods").data("kendoDropDownList");

        var periodValue = period.value();


        $('#period-id').attr('data-Value', periodValue);
        $("#kendoPatientReceptionGrid").find(".k-i-reload").click();

    }


    function AddPatientReceptionAnalysis() {

        $(".loader").removeClass("hidden");
        $(".page-content").load("/PatientReceptionAnalysis/Form", function (responce) {


            $(".loader").fadeIn("slow");
            $(".loader").addClass("hidden");
        })

    }


    $('#KendoFromDate').keypress(function (e) {

        if (e.which === 13 || e.which === 9) {
            let date = $("#KendoDateTo").data("kendoDatePicker");
            date.element.focus();
            //date.element.select();
        }


    });

    $('#KendoFromDate').focus(function (e) {

        let date = $("#KendoFromDate").data("kendoDatePicker");
        date.element.select();

    });

    $('#KendoDateTo').keypress(function (e) {

        if (e.which === 13 || e.which === 9) {
            $("#btn-search-visit").focus();
        }

    });


    $('#KendoDateTo').focus(function (e) {

        let date = $("#KendoDateTo").data("kendoDatePicker");
        date.element.select();

    });


    function PrintAllSurgeries() {

        let periodId = $('#period-id').attr('data-Value');

        let statusId = $('#payments').data("kendoDropDownList").text();

        let clinicSectionId = $('#sections').val();

        var fromDate = $("#KendoFromDate").data("kendoDatePicker");
        var toDate = $("#KendoDateTo").data("kendoDatePicker");

        var frDate = fromDate.value();
        var tDate = toDate.value();
        let frMonth = frDate.getMonth() + 1;
        let frDay = frDate.getDate();
        let toMonth = tDate.getMonth() + 1;
        let toDay = tDate.getDate();

        if (frMonth < 10)
            frMonth = "0" + frMonth;
        if (toMonth < 10)
            toMonth = "0" + toMonth;
        if (frDay < 10)
            frDay = "0" + frDay;
        if (toDay < 10)
            toDay = "0" + toDay;

        let from = frDate.getFullYear() + ":" + frMonth + ":" + frDay;
        let to = tDate.getFullYear() + ":" + toMonth + ":" + toDay;

        $(".loader").removeClass("hidden");


        var data = {
            clinicSectionId: clinicSectionId,
            periodId: periodId,
            fromDate: from,
            toDate: to,
            status: statusId
        };

        link = "/Cash/PrintCashReport";

        $(".loader").removeClass("hidden");

        $.ajax({
            url: link,
            type: "Post",
            data: data,
            success: function (response) {

                draw2(response);
                $(".loader").fadeIn("slow");
                $(".loader").addClass("hidden");
            },
            error: function (response) {
                console.log(response);
                console.log(response.data);
                console.log(response.error);
            }
        });

    }

    function draw2(imgData) {

        "use strict";
        var dataUrl = [];
        for (let index = 0; index < imgData.allb.length; index++) {

            var img = new Image();
            img.src = "data:image/jpeg;base64," + imgData.allb[index];
            dataUrl.push(img.src)
        }
        printJS({ printable: dataUrl, type: 'image' });

    }

    


</script>

