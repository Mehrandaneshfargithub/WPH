@model WPH.Models.Cash.DoctorWageViewModel
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject WPH.Resources.SharedViewLocalizer Localizer


<div>
    @(Html.Kendo().Grid<WPH.Models.HumanResourceSalary.HumanResourceSalaryViewModel>()
    .Name("kendoTreatmentStaffGrid")
    .Columns(columns =>
    {

        if (HttpContextAccessor.HttpContext.Session.GetString("culture") != "en")
        {
            if ((bool)ViewBag.AccessDeleteHumanResourceSalary)
            {
                columns.Bound("").Title(" ").Width(10)
                .ClientTemplate(
                    $@"<a class='tooltip-error grid-btn' onClick='GridDeleteTreatmentStaff(this)' data-cadre='{Model.CadreType}' data-id='#=Guid#' data-rel='tooltip' title='Delete' data-original-title='Delete' data-toggle='modal'>
                        <span class='red'>
                            <i class='ace-icon fa fa-trash-can bigger-120'></i>
                        </span>
                    </a>
                ");
            }

            if ((bool)ViewBag.AccessEditHumanResourceSalary)
            {
                columns.Bound("").Title(" ").Width(10)
                .ClientTemplate(
                    $@"<a class='tooltip-success grid-btn edit' onClick='EditTreatmentStaff(this)' data-cadre='{Model.CadreType}' data-Salary='#=Salary#' data-HumanResourceName='#=HumanResourceName#' data-id='#=Guid#' data-rel='tooltip' title='Edit' data-original-title='Edit'>
                        <span class='green'>
                            <i class='ace-icon fa fa-pencil bigger-120'></i>
                        </span>
                    </a>
                ");
            }

            columns.Bound(x => x.PaymentStatus).Title(Localizer["Status"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).ClientTemplate("#= LineItems_Databound(PaymentStatus)#");
            columns.Bound(x => x.Salary).Filterable(false).Format("{0:n0}").Title(Localizer["Amount"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.HumanResourceName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Width(300).Title(Localizer["Name"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.Index).Filterable(false).Width(10).Title("#").HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.Guid).Hidden();
        }
        else
        {
            columns.Bound(x => x.Guid).Hidden();
            columns.Bound(x => x.Index).Filterable(false).Title("#").Width(10).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
            columns.Bound(x => x.HumanResourceName).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).Width(300).Title(Localizer["Name"]).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" });
            columns.Bound(x => x.Salary).Filterable(false).Title(Localizer["Amount"]).HtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Roboto-grid" }).HeaderHtmlAttributes(new { @style = "text-align:center;", @class = "MyFont-Sarchia-grid" });
            columns.Bound(x => x.PaymentStatus).Title(Localizer["Status"]).Filterable(false).HtmlAttributes(new { @style = "text-align:center;" }).HeaderHtmlAttributes(new { @style = "text-align:center;" }).ClientTemplate("#= LineItems_Databound(PaymentStatus)#");

            if ((bool)ViewBag.AccessEditHumanResourceSalary)
            {
                columns.Bound("").Title(" ").Width(10)
                .ClientTemplate(
                    $@"<a class='tooltip-success grid-btn edit' onClick='EditTreatmentStaff(this)' data-cadre='{Model.CadreType}' data-Salary='#=Salary#' data-HumanResourceName='#=HumanResourceName#' data-id='#=Guid#' data-rel='tooltip' title='Edit' data-original-title='Edit'>
                        <span class='green'>
                            <i class='ace-icon fa fa-pencil bigger-120'></i>
                        </span>
                    </a>
                ");
            }

            if ((bool)ViewBag.AccessDeleteHumanResourceSalary)
            {
                columns.Bound("").Title(" ").Width(10)
                .ClientTemplate(
                    $@"<a class='tooltip-error grid-btn' onClick='GridDeleteTreatmentStaff(this)' data-cadre='{Model.CadreType}' data-id='#=Guid#' data-rel='tooltip' title='Delete' data-original-title='Delete' data-toggle='modal'>
                        <span class='red'>
                            <i class='ace-icon fa fa-trash-can bigger-120'></i>
                        </span>
                    </a>
                ");
            }
        }

    })

        .DataSource(dataSource => dataSource
        .Ajax()
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(p => p.Guid);
        })
        .PageSize(10)
        .Read(read => read.Action("GetAllTreatmentStaffWage", "HumanResource", new
        {
            ReceptionId = Model.ReceptionId,
            DoctorGuid = Model.DoctorGuid,
            AnesthesiologistGuid = Model.AnesthesiologistGuid,
            PediatricianGuid = Model.PediatricianGuid,
            ResidentGuid = Model.ResidentGuid,
            CadreType = Model.CadreType,
        }))
        )
        .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
        .Pageable(pageable => pageable
        .Input(true)
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5)
        .Numeric(true)) // Enable paging
        .Sortable().HtmlAttributes(new { Id = $"kendo{Model.CadreType}Grid", @style = "direction: ltr;margin-top:2rem;font-size:1.3rem;overflow:auto" }) // Enable sorting
    )
</div>